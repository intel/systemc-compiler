//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.27
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: simple_test ()
//
module simple_test // "test_top.dut"
(
    input logic clk,
    input logic nrst
);

// Variables generated for SystemC signals
logic run_put_req;
logic run_put_req_d;
logic run_core_req_d;
logic resp_get_req;
logic resp_get_req_d;
logic resp_core_req_d;
logic [15:0] resp_core_data_d;
logic [15:0] resp_core_data_out;
logic run_clk;
logic run_nrst;
logic run_core_ready;
logic run_core_req;
logic [15:0] run_core_data;
logic resp_clk;
logic resp_nrst;
logic resp_core_ready;
logic resp_core_req;
logic [15:0] resp_core_data;

// Local parameters generated for C++ constants
localparam logic run_chan_sync = 0;
localparam logic run_cthread = 1;
localparam logic run_always_ready = 0;
localparam logic resp_cthread = 1;
localparam logic resp_always_ready = 0;
localparam logic [31:0] N = 5;

// Assignments generated for C++ channel arrays
assign run_clk = clk;
assign run_nrst = nrst;
assign resp_clk = clk;
assign resp_nrst = nrst;

//------------------------------------------------------------------------------
// Clocked THREAD: run_sync_thread (sct_initiator.h:223:5) 
// Empty process, no code generated 

//------------------------------------------------------------------------------
// Clocked THREAD: run_core_thread (sct_initiator.h:266:5) 

// Thread-local variables
logic run_put_req_d_next;
logic run_core_req_d_next;

// Next-state combinational logic
always_comb begin : run_core_thread_comb     // sct_initiator.h:266:5
    run_core_thread_func;
end
function void run_core_thread_func;
    run_core_req_d_next = run_core_req_d;
    run_put_req_d_next = run_put_req_d;
    run_put_req_d_next = run_put_req;
    run_core_req_d_next = !run_core_ready && run_core_req;
endfunction

// Synchronous register update
always_ff @(posedge run_clk or negedge run_nrst) 
begin : run_core_thread_ff
    if ( ~run_nrst ) begin
        run_put_req_d <= '0;
        run_core_req_d <= '0;
    end
    else begin
        run_put_req_d <= run_put_req_d_next;
        run_core_req_d <= run_core_req_d_next;
    end
end

//------------------------------------------------------------------------------
// Method process: run_req_control (sct_initiator.h:253:5) 

always_comb 
begin : run_req_control     // sct_initiator.h:253:5
    logic A;
    A = run_put_req != run_put_req_d;
    if (A)
    begin
        run_core_req = 1'd1;
    end else begin
        run_core_req = run_core_req_d;
    end
end

//------------------------------------------------------------------------------
// Method process: resp_ready_control (sct_target.h:238:5) 

always_comb 
begin : resp_ready_control     // sct_target.h:238:5
    logic A;
    A = resp_get_req != resp_get_req_d;
    if (A)
    begin
        resp_core_ready = 1'd1;
    end else begin
        resp_core_ready = !resp_core_req_d;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: resp_core_thread (sct_target.h:247:5) 

// Thread-local variables
logic resp_get_req_d_next;
logic resp_core_req_d_next;
logic [15:0] resp_core_data_d_next;

// Next-state combinational logic
always_comb begin : resp_core_thread_comb     // sct_target.h:247:5
    resp_core_thread_func;
end
function void resp_core_thread_func;
    resp_core_data_d_next = resp_core_data_d;
    resp_core_req_d_next = resp_core_req_d;
    resp_get_req_d_next = resp_get_req_d;
    resp_get_req_d_next = resp_get_req;
    resp_core_req_d_next = !resp_core_ready || resp_core_req;
    if (resp_core_req && resp_core_ready)
    begin
        resp_core_data_d_next = resp_core_data;
    end
endfunction

// Synchronous register update
always_ff @(posedge resp_clk or negedge resp_nrst) 
begin : resp_core_thread_ff
    if ( ~resp_nrst ) begin
        resp_get_req_d <= '0;
        resp_core_req_d <= '0;
        resp_core_data_d <= '0;
    end
    else begin
        resp_get_req_d <= resp_get_req_d_next;
        resp_core_req_d <= resp_core_req_d_next;
        resp_core_data_d <= resp_core_data_d_next;
    end
end

//------------------------------------------------------------------------------
// Method process: resp_put_to_fifo (sct_target.h:224:5) 
// Empty process, no code generated 

//------------------------------------------------------------------------------
// Method process: resp_core_data_mux (sct_target.h:213:5) 

always_comb 
begin : resp_core_data_mux     // sct_target.h:213:5
    if (resp_core_ready)
    begin
        resp_core_data_out = resp_core_data;
    end else begin
        resp_core_data_out = resp_core_data_d;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: init_thread (target_fifo.h:137:5) 

// Thread-local variables
logic run_put_req_next;
logic [15:0] run_core_data_next;
logic resp_get_req_next;
logic signed [31:0] i;
logic signed [31:0] i_next;
logic signed [31:0] i0;
logic signed [31:0] i_next0;
logic [4:0] init_thread_PROC_STATE;
logic [4:0] init_thread_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : init_thread_comb     // target_fifo.h:137:5
    init_thread_func;
end
function void init_thread_func;
    logic TMP_0;
    logic [15:0] data;
    logic TMP_1;
    logic enable;
    logic A;
    logic TMP_2;
    logic TMP_3;
    logic TMP_4;
    logic TMP_5;
    logic TMP_6;
    logic TMP_7;
    logic TMP_8;
    logic TMP_9;
    logic TMP_10;
    logic TMP_11;
    logic TMP_12;
    logic TMP_13;
    i_next = i;
    i_next0 = i0;
    resp_get_req_next = resp_get_req;
    run_core_data_next = run_core_data;
    run_put_req_next = run_put_req;
    init_thread_PROC_STATE_next = init_thread_PROC_STATE;
    
    case (init_thread_PROC_STATE)
        0: begin
            i_next = '0;
            data = 32'(7'sd42 + i_next);
            // Call put() begin
            if (run_always_ready || run_core_ready)
            begin
                run_put_req_next = !run_put_req;
                run_core_data_next = data;
                TMP_0 = 1;
            end else begin
                TMP_0 = '0;
            end
            // Call put() end
            if (!TMP_0)
            begin
                init_thread_PROC_STATE_next = 1; return;    // target_fifo.h:146:36;
            end
            init_thread_PROC_STATE_next = 2; return;    // target_fifo.h:148:13;
        end
        1: begin
            data = 32'(7'sd42 + i_next);
            // Call put() begin
            if (run_always_ready || run_core_ready)
            begin
                run_put_req_next = !run_put_req;
                run_core_data_next = data;
                TMP_0 = 1;
            end else begin
                TMP_0 = '0;
            end
            // Call put() end
            if (!TMP_0)
            begin
                init_thread_PROC_STATE_next = 1; return;    // target_fifo.h:146:36;
            end
            init_thread_PROC_STATE_next = 2; return;    // target_fifo.h:148:13;
        end
        2: begin
            ++i_next;
            if (i_next < N)
            begin
                data = 32'(7'sd42 + i_next);
                // Call put() begin
                if (run_always_ready || run_core_ready)
                begin
                    run_put_req_next = !run_put_req;
                    run_core_data_next = data;
                    TMP_0 = 1;
                end else begin
                    TMP_0 = '0;
                end
                // Call put() end
                if (!TMP_0)
                begin
                    init_thread_PROC_STATE_next = 1; return;    // target_fifo.h:146:36;
                end
                init_thread_PROC_STATE_next = 2; return;    // target_fifo.h:148:13;
            end
            i_next0 = '0;
            enable = 1;
            // Call get() begin
            A = (!resp_core_ready || resp_core_req);
            if (A)
            begin
                resp_get_req_next = !resp_get_req;
                TMP_1 = enable;
            end else begin
                TMP_1 = '0;
            end
            // Call get() end
            if (!TMP_1)
            begin
                init_thread_PROC_STATE_next = 3; return;    // target_fifo.h:153:37;
            end
            init_thread_PROC_STATE_next = 4; return;    // target_fifo.h:155:13;
        end
        3: begin
            enable = 1;
            // Call get() begin
            A = (!resp_core_ready || resp_core_req);
            if (A)
            begin
                resp_get_req_next = !resp_get_req;
                TMP_1 = enable;
            end else begin
                TMP_1 = '0;
            end
            // Call get() end
            if (!TMP_1)
            begin
                init_thread_PROC_STATE_next = 3; return;    // target_fifo.h:153:37;
            end
            init_thread_PROC_STATE_next = 4; return;    // target_fifo.h:155:13;
        end
        4: begin
            ++i_next0;
            if (i_next0 < N)
            begin
                enable = 1;
                // Call get() begin
                A = (!resp_core_ready || resp_core_req);
                if (A)
                begin
                    resp_get_req_next = !resp_get_req;
                    TMP_1 = enable;
                end else begin
                    TMP_1 = '0;
                end
                // Call get() end
                if (!TMP_1)
                begin
                    init_thread_PROC_STATE_next = 3; return;    // target_fifo.h:153:37;
                end
                init_thread_PROC_STATE_next = 4; return;    // target_fifo.h:155:13;
            end
            data = 6'd42;
            // Call put() begin
            if (run_always_ready || run_core_ready)
            begin
                run_put_req_next = !run_put_req;
                run_core_data_next = data;
                TMP_2 = 1;
            end else begin
                TMP_2 = '0;
            end
            // Call put() end
            if (!TMP_2)
            begin
                init_thread_PROC_STATE_next = 5; return;    // target_fifo.h:160:30;
            end
            init_thread_PROC_STATE_next = 6; return;    // target_fifo.h:161:9;
        end
        5: begin
            data = 6'd42;
            // Call put() begin
            if (run_always_ready || run_core_ready)
            begin
                run_put_req_next = !run_put_req;
                run_core_data_next = data;
                TMP_2 = 1;
            end else begin
                TMP_2 = '0;
            end
            // Call put() end
            if (!TMP_2)
            begin
                init_thread_PROC_STATE_next = 5; return;    // target_fifo.h:160:30;
            end
            init_thread_PROC_STATE_next = 6; return;    // target_fifo.h:161:9;
        end
        6: begin
            enable = 1;
            // Call get() begin
            A = (!resp_core_ready || resp_core_req);
            if (A)
            begin
                resp_get_req_next = !resp_get_req;
                TMP_3 = enable;
            end else begin
                TMP_3 = '0;
            end
            // Call get() end
            if (!TMP_3)
            begin
                init_thread_PROC_STATE_next = 6; return;    // target_fifo.h:163:33;
            end
            init_thread_PROC_STATE_next = 8; return;    // target_fifo.h:164:30;
        end
        8: begin
            data = 6'd43;
            // Call put() begin
            if (run_always_ready || run_core_ready)
            begin
                run_put_req_next = !run_put_req;
                run_core_data_next = data;
                TMP_4 = 1;
            end else begin
                TMP_4 = '0;
            end
            // Call put() end
            if (!TMP_4)
            begin
                init_thread_PROC_STATE_next = 8; return;    // target_fifo.h:166:30;
            end
            init_thread_PROC_STATE_next = 10; return;    // target_fifo.h:167:9;
        end
        10: begin
            data = 6'd44;
            // Call put() begin
            if (run_always_ready || run_core_ready)
            begin
                run_put_req_next = !run_put_req;
                run_core_data_next = data;
                TMP_5 = 1;
            end else begin
                TMP_5 = '0;
            end
            // Call put() end
            if (!TMP_5)
            begin
                init_thread_PROC_STATE_next = 10; return;    // target_fifo.h:168:30;
            end
            init_thread_PROC_STATE_next = 12; return;    // target_fifo.h:169:9;
        end
        12: begin
            enable = 1;
            // Call get() begin
            A = (!resp_core_ready || resp_core_req);
            if (A)
            begin
                resp_get_req_next = !resp_get_req;
                TMP_6 = enable;
            end else begin
                TMP_6 = '0;
            end
            // Call get() end
            if (!TMP_6)
            begin
                init_thread_PROC_STATE_next = 12; return;    // target_fifo.h:171:33;
            end
            init_thread_PROC_STATE_next = 14; return;    // target_fifo.h:172:30;
        end
        14: begin
            enable = 1;
            // Call get() begin
            A = (!resp_core_ready || resp_core_req);
            if (A)
            begin
                resp_get_req_next = !resp_get_req;
                TMP_7 = enable;
            end else begin
                TMP_7 = '0;
            end
            // Call get() end
            if (!TMP_7)
            begin
                init_thread_PROC_STATE_next = 14; return;    // target_fifo.h:173:33;
            end
            init_thread_PROC_STATE_next = 16; return;    // target_fifo.h:174:30;
        end
        16: begin
            data = 6'd45;
            // Call put() begin
            if (run_always_ready || run_core_ready)
            begin
                run_put_req_next = !run_put_req;
                run_core_data_next = data;
                TMP_8 = 1;
            end else begin
                TMP_8 = '0;
            end
            // Call put() end
            if (!TMP_8)
            begin
                init_thread_PROC_STATE_next = 16; return;    // target_fifo.h:176:30;
            end
            init_thread_PROC_STATE_next = 18; return;    // target_fifo.h:177:9;
        end
        18: begin
            data = 6'd46;
            // Call put() begin
            if (run_always_ready || run_core_ready)
            begin
                run_put_req_next = !run_put_req;
                run_core_data_next = data;
                TMP_9 = 1;
            end else begin
                TMP_9 = '0;
            end
            // Call put() end
            if (!TMP_9)
            begin
                init_thread_PROC_STATE_next = 18; return;    // target_fifo.h:178:30;
            end
            init_thread_PROC_STATE_next = 20; return;    // target_fifo.h:179:9;
        end
        20: begin
            data = 6'd47;
            // Call put() begin
            if (run_always_ready || run_core_ready)
            begin
                run_put_req_next = !run_put_req;
                run_core_data_next = data;
                TMP_10 = 1;
            end else begin
                TMP_10 = '0;
            end
            // Call put() end
            if (!TMP_10)
            begin
                init_thread_PROC_STATE_next = 20; return;    // target_fifo.h:180:30;
            end
            init_thread_PROC_STATE_next = 22; return;    // target_fifo.h:181:9;
        end
        22: begin
            enable = 1;
            // Call get() begin
            A = (!resp_core_ready || resp_core_req);
            if (A)
            begin
                resp_get_req_next = !resp_get_req;
                TMP_11 = enable;
            end else begin
                TMP_11 = '0;
            end
            // Call get() end
            if (!TMP_11)
            begin
                init_thread_PROC_STATE_next = 22; return;    // target_fifo.h:183:33;
            end
            init_thread_PROC_STATE_next = 24; return;    // target_fifo.h:184:30;
        end
        24: begin
            enable = 1;
            // Call get() begin
            A = (!resp_core_ready || resp_core_req);
            if (A)
            begin
                resp_get_req_next = !resp_get_req;
                TMP_12 = enable;
            end else begin
                TMP_12 = '0;
            end
            // Call get() end
            if (!TMP_12)
            begin
                init_thread_PROC_STATE_next = 24; return;    // target_fifo.h:185:33;
            end
            init_thread_PROC_STATE_next = 26; return;    // target_fifo.h:186:30;
        end
        26: begin
            enable = 1;
            // Call get() begin
            A = (!resp_core_ready || resp_core_req);
            if (A)
            begin
                resp_get_req_next = !resp_get_req;
                TMP_13 = enable;
            end else begin
                TMP_13 = '0;
            end
            // Call get() end
            if (!TMP_13)
            begin
                init_thread_PROC_STATE_next = 26; return;    // target_fifo.h:187:33;
            end
            init_thread_PROC_STATE_next = 28; return;    // target_fifo.h:188:30;
        end
        28: begin
            init_thread_PROC_STATE_next = 29; return;    // target_fifo.h:191:9;
        end
        29: begin
            init_thread_PROC_STATE_next = 29; return;    // target_fifo.h:194:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge run_clk or negedge nrst) 
begin : init_thread_ff
    if ( ~nrst ) begin
        // Call reset_put() begin
        run_put_req <= '0;
        run_core_data <= '0;
        // Call reset_put() end
        // Call reset_get() begin
        resp_get_req <= '0;
        // Call reset_get() end
        init_thread_PROC_STATE <= '0;    // target_fifo.h:142:9;
    end
    else begin
        run_put_req <= run_put_req_next;
        run_core_data <= run_core_data_next;
        resp_get_req <= resp_get_req_next;
        i <= i_next;
        i0 <= i_next0;
        init_thread_PROC_STATE <= init_thread_PROC_STATE_next;
    end
end


//------------------------------------------------------------------------------
// Child module instances

B a
(
  .run_core_ready_s(run_core_ready),
  .run_core_req_s(run_core_req),
  .run_core_data_s(run_core_data),
  .resp_core_ready_s(resp_core_ready),
  .resp_core_req_s(resp_core_req),
  .resp_core_data_s(resp_core_data),
  .clk(clk),
  .nrst(nrst)
);

endmodule



//==============================================================================
//
// Module: B (target_fifo.h:113:5)
//
module B // "test_top.dut.a"
(
    output logic run_core_ready_s,
    input logic run_core_req_s,
    input logic [15:0] run_core_data_s,
    input logic resp_core_ready_s,
    output logic resp_core_req_s,
    output logic [15:0] resp_core_data_s,
    input logic clk,
    input logic nrst
);

// Variables generated for SystemC signals
logic [1:0] run_fifo_element_num;
logic [1:0] run_fifo_element_num_d;
logic [15:0] run_fifo_buffer[2];
logic run_fifo_put_req;
logic run_fifo_get_req;
logic [15:0] run_fifo_data_in;
logic [15:0] run_fifo_data_out;
logic run_fifo_ready_push;
logic run_fifo_out_valid;
logic run_fifo_pop_indx;
logic run_fifo_push_indx;
logic run_get_req;
logic run_get_req_d;
logic run_core_req_d;
logic [15:0] run_core_data_d;
logic [15:0] run_core_data_out;
logic resp_put_req;
logic run_clk;
logic run_nrst;
logic run_core_ready;
logic run_core_req;
logic [15:0] run_core_data;
logic run_fifo_clk;
logic run_fifo_nrst;
logic resp_core_ready;
logic resp_core_req;
logic [15:0] resp_core_data;

// Local parameters generated for C++ constants
localparam logic run_cthread = 0;
localparam logic run_always_ready = 0;
localparam logic run_fifo_SYNC_VALID = 1;
localparam logic run_fifo_SYNC_READY = 1;
localparam logic run_fifo_INIT_BUFFER = 0;
localparam logic run_fifo_cthread_put = 0;
localparam logic run_fifo_cthread_get = 0;
localparam logic resp_chan_sync = 0;
localparam logic resp_cthread = 0;
localparam logic resp_always_ready = 0;

// Assignments generated for C++ channel arrays
assign run_core_ready_s = run_core_ready;
assign run_core_req = run_core_req_s;
assign run_core_data = run_core_data_s;
assign resp_core_ready = resp_core_ready_s;
assign resp_core_req_s = resp_core_req;
assign resp_core_data_s = resp_core_data;
assign run_clk = clk;
assign run_nrst = nrst;
assign run_fifo_clk = run_clk;
assign run_fifo_nrst = run_nrst;

//------------------------------------------------------------------------------
// Method process: fifo_asyncProc (sct_fifo.h:329:5) 

always_comb 
begin : fifo_asyncProc     // sct_fifo.h:329:5
    logic outValid;
    logic readyPush;
    logic popIndx;
    logic notEmpty;
    logic notFull;
    logic push;
    logic pop;
    popIndx = '0;
    notEmpty = run_fifo_element_num_d != 1'd0;
    notFull = run_fifo_element_num_d != 2'd2;
    push = run_fifo_put_req;
    pop = run_fifo_get_req;
    outValid = notEmpty;
    readyPush = notFull;
    popIndx = run_fifo_pop_indx;
    run_fifo_out_valid = outValid;
    run_fifo_data_out = run_fifo_buffer[popIndx];
    run_fifo_ready_push = readyPush;
    run_fifo_element_num = run_fifo_element_num_d;
    if (pop && !push)
    begin
        run_fifo_element_num = run_fifo_element_num_d - 1'd1;
    end else begin
        if (!pop && push)
        begin
            run_fifo_element_num = run_fifo_element_num_d + 1'd1;
        end
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: fifo_syncProc (sct_fifo.h:416:5) 

// Thread-local variables
logic run_fifo_pop_indx_next;
logic run_fifo_push_indx_next;
logic [1:0] run_fifo_element_num_d_next;
logic [15:0] run_fifo_buffer_next[2];

// Next-state combinational logic
always_comb begin : fifo_syncProc_comb     // sct_fifo.h:416:5
    fifo_syncProc_func;
end
function void fifo_syncProc_func;
    logic push;
    logic pop;
    run_fifo_buffer_next = run_fifo_buffer;
    run_fifo_element_num_d_next = run_fifo_element_num_d;
    run_fifo_pop_indx_next = run_fifo_pop_indx;
    run_fifo_push_indx_next = run_fifo_push_indx;
    push = run_fifo_put_req;
    pop = run_fifo_get_req;
    if (pop)
    begin
        run_fifo_pop_indx_next = (run_fifo_pop_indx == 3'(2'd2 - 1'd1)) ? 1'd0 : run_fifo_pop_indx + 1'd1;
    end
    if (push)
    begin
        run_fifo_buffer_next[run_fifo_push_indx] = run_fifo_data_in;
        run_fifo_push_indx_next = (run_fifo_push_indx == 3'(2'd2 - 1'd1)) ? 1'd0 : run_fifo_push_indx + 1'd1;
    end
    run_fifo_element_num_d_next = run_fifo_element_num;
endfunction

// Synchronous register update
always_ff @(posedge run_fifo_clk or negedge run_fifo_nrst) 
begin : fifo_syncProc_ff
    if ( ~run_fifo_nrst ) begin
        run_fifo_pop_indx <= '0;
        run_fifo_push_indx <= '0;
        run_fifo_element_num_d <= '0;
        run_fifo_buffer[0] <= '0;
    end
    else begin
        run_fifo_pop_indx <= run_fifo_pop_indx_next;
        run_fifo_push_indx <= run_fifo_push_indx_next;
        run_fifo_element_num_d <= run_fifo_element_num_d_next;
        run_fifo_buffer <= run_fifo_buffer_next;
    end
end

//------------------------------------------------------------------------------
// Method process: run_ready_control (sct_target.h:238:5) 

always_comb 
begin : run_ready_control     // sct_target.h:238:5
    logic A;
    A = run_get_req_d;
    if (A)
    begin
        run_core_ready = 1'd1;
    end else begin
        run_core_ready = !run_core_req_d;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: run_core_thread (sct_target.h:247:5) 

// Thread-local variables
logic run_get_req_d_next;
logic run_core_req_d_next;
logic [15:0] run_core_data_d_next;

// Next-state combinational logic
always_comb begin : run_core_thread_comb     // sct_target.h:247:5
    run_core_thread_func;
end
function void run_core_thread_func;
    run_core_data_d_next = run_core_data_d;
    run_core_req_d_next = run_core_req_d;
    run_get_req_d_next = run_get_req_d;
    run_get_req_d_next = run_get_req;
    run_core_req_d_next = !run_core_ready || run_core_req;
    if (run_core_req && run_core_ready)
    begin
        run_core_data_d_next = run_core_data;
    end
endfunction

// Synchronous register update
always_ff @(posedge run_clk or negedge run_nrst) 
begin : run_core_thread_ff
    if ( ~run_nrst ) begin
        run_get_req_d <= '0;
        run_core_req_d <= '0;
        run_core_data_d <= '0;
    end
    else begin
        run_get_req_d <= run_get_req_d_next;
        run_core_req_d <= run_core_req_d_next;
        run_core_data_d <= run_core_data_d_next;
    end
end

//------------------------------------------------------------------------------
// Method process: run_put_to_fifo (sct_target.h:224:5) 

always_comb 
begin : run_put_to_fifo     // sct_target.h:224:5
    logic TMP_0;
    logic TMP_1;
    run_get_req = '0;
    // Call reset_put() begin
    run_fifo_put_req = '0;
    run_fifo_data_in = '0;
    // Call reset_put() end
    if (!run_core_ready)
    begin
        // Call put() begin
        run_fifo_data_in = run_core_data_d;
        run_fifo_put_req = run_fifo_ready_push;
        TMP_0 = run_fifo_ready_push;
        // Call put() end
        run_get_req = TMP_0;
    end else begin
        if (run_core_req)
        begin
            // Call put() begin
            run_fifo_data_in = run_core_data;
            run_fifo_put_req = run_fifo_ready_push;
            TMP_1 = run_fifo_ready_push;
            // Call put() end
            run_get_req = TMP_1;
        end
    end
end

//------------------------------------------------------------------------------
// Method process: run_core_data_mux (sct_target.h:213:5) 

always_comb 
begin : run_core_data_mux     // sct_target.h:213:5
    if (run_core_ready)
    begin
        run_core_data_out = run_core_data;
    end else begin
        run_core_data_out = run_core_data_d;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: resp_sync_thread (sct_initiator.h:223:5) 
// Empty process, no code generated 

//------------------------------------------------------------------------------
// Clocked THREAD: resp_core_thread (sct_initiator.h:266:5) 
// Empty process, no code generated 

//------------------------------------------------------------------------------
// Method process: resp_req_control (sct_initiator.h:253:5) 

always_comb 
begin : resp_req_control     // sct_initiator.h:253:5
    logic A;
    A = resp_put_req;
    if (A)
    begin
        resp_core_req = 1'd1;
    end else begin
        resp_core_req = '0;
    end
end

//------------------------------------------------------------------------------
// Method process: methProc (target_fifo.h:78:5) 

always_comb 
begin : methProc     // target_fifo.h:78:5
    logic TMP_0;
    logic TMP_1;
    logic TMP_2;
    logic [15:0] TMP_3;
    logic [15:0] TMP_4;
    logic [15:0] data;
    logic TMP_6;
    // Call reset_get() begin
    // Call reset_get() begin
    run_fifo_get_req = '0;
    // Call reset_get() end
    // Call reset_get() end
    // Call reset_put() begin
    resp_put_req = '0;
    resp_core_data = '0;
    // Call reset_put() end
    // Call request() begin
    // Call request() begin
    TMP_1 = run_fifo_out_valid;
    // Call request() end
    TMP_0 = TMP_1;
    // Call request() end
    // Call ready() begin
    TMP_2 = resp_core_ready;
    // Call ready() end
    if (TMP_0 && TMP_2)
    begin
        // Call get() begin
        // Call get() begin
        run_fifo_get_req = run_fifo_out_valid;
        TMP_4 = run_fifo_data_out;
        // Call get() end
        TMP_3 = TMP_4;
        // Call get() end
        data = TMP_3;
        // Call put() begin
        if (resp_always_ready || resp_core_ready)
        begin
            resp_put_req = 1;
            resp_core_data = data;
            TMP_6 = 1;
        end else begin
            resp_put_req = '0;
            resp_core_data = '0;
            TMP_6 = '0;
        end
        // Call put() end
    end
end

endmodule


