//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.17
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: simple_test ()
//
module simple_test // "test_top.dut"
(
    input logic clk,
    input logic nrst
);

// Variables generated for SystemC signals
logic run_ready;
logic run_req;
logic [15:0] run_data;
logic resp_ready;
logic resp_req;
logic [15:0] resp_data;

//------------------------------------------------------------------------------
// Clocked THREAD: init_thread (fifo_shared.h:153:5) 

// Thread-local variables
logic run_req_next;
logic [15:0] run_data_next;
logic resp_ready_next;
logic [2:0] init_thread_PROC_STATE;
logic [2:0] init_thread_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : init_thread_comb     // fifo_shared.h:153:5
    init_thread_func;
end
function void init_thread_func;
    resp_ready_next = resp_ready;
    run_data_next = run_data;
    run_req_next = run_req;
    init_thread_PROC_STATE_next = init_thread_PROC_STATE;
    
    case (init_thread_PROC_STATE)
        0: begin
            run_req_next = 1;
            run_data_next = 42;
            if (!run_ready || !run_req)
            begin
                init_thread_PROC_STATE_next = 1; return;    // fifo_shared.h:162:40;
            end
            run_req_next = 0;
            run_data_next = 0;
            if (!resp_req || !resp_ready)
            begin
                init_thread_PROC_STATE_next = 2; return;    // fifo_shared.h:169:42;
            end
            resp_ready_next = 0;
            init_thread_PROC_STATE_next = 3; return;    // fifo_shared.h:175:9;
        end
        1: begin
            if (!run_ready || !run_req)
            begin
                init_thread_PROC_STATE_next = 1; return;    // fifo_shared.h:162:40;
            end
            run_req_next = 0;
            run_data_next = 0;
            if (!resp_req || !resp_ready)
            begin
                init_thread_PROC_STATE_next = 2; return;    // fifo_shared.h:169:42;
            end
            resp_ready_next = 0;
            init_thread_PROC_STATE_next = 3; return;    // fifo_shared.h:175:9;
        end
        2: begin
            if (!resp_req || !resp_ready)
            begin
                init_thread_PROC_STATE_next = 2; return;    // fifo_shared.h:169:42;
            end
            resp_ready_next = 0;
            init_thread_PROC_STATE_next = 3; return;    // fifo_shared.h:175:9;
        end
        3: begin
            init_thread_PROC_STATE_next = 3; return;    // fifo_shared.h:178:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : init_thread_ff
    if ( ~nrst ) begin
        run_req <= 0;
        run_data <= 0;
        resp_ready <= 1;
        init_thread_PROC_STATE <= 0;    // fifo_shared.h:158:9;
    end
    else begin
        run_req <= run_req_next;
        run_data <= run_data_next;
        resp_ready <= resp_ready_next;
        init_thread_PROC_STATE <= init_thread_PROC_STATE_next;
    end
end


//------------------------------------------------------------------------------
// Child module instances

A a
(
  .clk(clk),
  .nrst(nrst),
  .run_ready(run_ready),
  .run_req(run_req),
  .run_data(run_data),
  .resp_ready(resp_ready),
  .resp_req(resp_req),
  .resp_data(resp_data)
);

endmodule



//==============================================================================
//
// Module: A (fifo_shared.h:131:5)
//
module A // "test_top.dut.a"
(
    input logic clk,
    input logic nrst,
    output logic run_ready,
    input logic run_req,
    input logic [15:0] run_data,
    input logic resp_ready,
    output logic resp_req,
    output logic [15:0] resp_data
);

// Variables generated for SystemC signals
logic [1:0] fifo_element_num;
logic [1:0] fifo_element_num_d;
logic [15:0] fifo_buffer[2];
logic fifo_put_req;
logic fifo_get_req;
logic [15:0] fifo_data_in;
logic [15:0] fifo_data_out;
logic fifo_ready_push;
logic fifo_out_valid;
logic fifo_pop_indx;
logic fifo_push_indx;
logic fifo_clk;
logic fifo_nrst;

// Local parameters generated for C++ constants
localparam logic fifo_SYNC_VALID = 1;
localparam logic fifo_SYNC_READY = 0;
localparam logic fifo_INIT_BUFFER = 0;
localparam logic fifo_cthread_put = 0;
localparam logic fifo_cthread_get = 0;

// Assignments generated for C++ channel arrays
assign fifo_clk = clk;
assign fifo_nrst = nrst;

//------------------------------------------------------------------------------
// Method process: fifo_asyncProc (sct_fifo.h:329:5) 

always_comb 
begin : fifo_asyncProc     // sct_fifo.h:329:5
    logic outValid;
    logic readyPush;
    logic popIndx;
    logic notEmpty;
    logic notFull;
    logic push;
    logic pop;
    popIndx = 0;
    notEmpty = fifo_element_num_d != 0;
    notFull = fifo_element_num_d != 2;
    push = fifo_put_req;
    pop = fifo_get_req;
    outValid = notEmpty;
    readyPush = notFull;
    popIndx = fifo_pop_indx;
    fifo_out_valid = outValid;
    fifo_data_out = fifo_buffer[popIndx];
    fifo_ready_push = pop || readyPush;
    fifo_element_num = fifo_element_num_d;
    if (pop && !push)
    begin
        fifo_element_num = fifo_element_num_d - 1;
    end else begin
        if (!pop && push)
        begin
            fifo_element_num = fifo_element_num_d + 1;
        end
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: fifo_syncProc (sct_fifo.h:416:5) 

// Thread-local variables
logic fifo_pop_indx_next;
logic fifo_push_indx_next;
logic [1:0] fifo_element_num_d_next;
logic [15:0] fifo_buffer_next[2];

// Next-state combinational logic
always_comb begin : fifo_syncProc_comb     // sct_fifo.h:416:5
    fifo_syncProc_func;
end
function void fifo_syncProc_func;
    logic push;
    logic pop;
    fifo_buffer_next = fifo_buffer;
    fifo_element_num_d_next = fifo_element_num_d;
    fifo_pop_indx_next = fifo_pop_indx;
    fifo_push_indx_next = fifo_push_indx;
    push = fifo_put_req;
    pop = fifo_get_req;
    if (pop)
    begin
        fifo_pop_indx_next = (fifo_pop_indx == 2 - 1) ? 0 : fifo_pop_indx + 1;
    end
    if (push)
    begin
        fifo_buffer_next[fifo_push_indx] = fifo_data_in;
        fifo_push_indx_next = (fifo_push_indx == 2 - 1) ? 0 : fifo_push_indx + 1;
    end
    fifo_element_num_d_next = fifo_element_num;
endfunction

// Synchronous register update
always_ff @(posedge fifo_clk or negedge fifo_nrst) 
begin : fifo_syncProc_ff
    if ( ~fifo_nrst ) begin
        fifo_pop_indx <= 0;
        fifo_push_indx <= 0;
        fifo_element_num_d <= 0;
        fifo_buffer[0] <= 0;
    end
    else begin
        fifo_pop_indx <= fifo_pop_indx_next;
        fifo_push_indx <= fifo_push_indx_next;
        fifo_element_num_d <= fifo_element_num_d_next;
        fifo_buffer <= fifo_buffer_next;
    end
end

//------------------------------------------------------------------------------
// Method process: putMeth (fifo_shared.h:53:5) 

always_comb 
begin : putMeth     // fifo_shared.h:53:5
    logic TMP_0;
    logic TMP_1;
    logic [15:0] data;
    logic TMP_2;
    // Call ready() begin
    TMP_0 = fifo_ready_push;
    // Call ready() end
    run_ready = TMP_0;
    // Call reset_put() begin
    fifo_put_req = 0;
    fifo_data_in = 0;
    // Call reset_put() end
    // Call ready() begin
    TMP_1 = fifo_ready_push;
    // Call ready() end
    if (run_req && TMP_1)
    begin
        data = run_data;
        // Call put() begin
        fifo_data_in = data;
        fifo_put_req = fifo_ready_push;
        TMP_2 = fifo_ready_push;
        // Call put() end
    end
end

//------------------------------------------------------------------------------
// Method process: getMeth (fifo_shared.h:81:5) 

always_comb 
begin : getMeth     // fifo_shared.h:81:5
    logic TMP_0;
    logic [15:0] TMP_1;
    logic [15:0] data;
    resp_req = 0;
    resp_data = 0;
    // Call reset_get() begin
    fifo_get_req = 0;
    // Call reset_get() end
    // Call request() begin
    TMP_0 = fifo_out_valid;
    // Call request() end
    if (TMP_0 && resp_ready)
    begin
        // Call get() begin
        fifo_get_req = fifo_out_valid;
        TMP_1 = fifo_data_out;
        // Call get() end
        data = TMP_1;
        resp_req = 1;
        resp_data = data;
    end
end

endmodule


