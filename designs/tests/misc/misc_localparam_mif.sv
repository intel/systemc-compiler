//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.14
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: Top ()
//
module Top // "top"
(
    input logic clk
);

// Variables generated for SystemC signals
logic t;
logic signed [31:0] a_t0;
logic [31:0] aa_s[2];
logic signed [31:0] aa_t0[2];
logic signed [31:0] t1;

// Local parameters generated for C++ constants
localparam logic [31:0] a_T = 41;
localparam logic [31:0] a_S = 42;
localparam logic aa_BC[2] = '{ 1, 1 };
localparam logic aa_B[2] = '{ 0, 1 };
localparam logic [31:0] aa_S[2] = '{ 42, 42 };

//------------------------------------------------------------------------------
// Method process: a_childProc (test_localparam_mif.cpp:38:5) 

always_comb 
begin : a_childProc     // test_localparam_mif.cpp:38:5
    integer l;
    l = a_S;
    a_t0 = l;
end

//------------------------------------------------------------------------------
// Method process: aa_childProc (test_localparam_mif.cpp:38:5) 

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : aa_childProc_sct_i 

    always_comb 
    begin : aa_childProc     // test_localparam_mif.cpp:38:5
        integer l;
        l = aa_S[sct_i];
        aa_t0[sct_i] = l;
    end

end
endgenerate

//------------------------------------------------------------------------------
// Method process: topProc (test_localparam_mif.cpp:71:5) 

always_comb 
begin : topProc     // test_localparam_mif.cpp:71:5
    integer l;
    integer i;
    logic TMP_0;
    i = t;
    l = a_T;
    l = aa_BC[i];
    l = aa_B[i];
    for (integer i_1 = 0; i_1 < 2; ++i_1)
    begin
        // Call g() begin
        TMP_0 = |((aa_s[i_1] == aa_B[i_1]) ? aa_s[i_1] : aa_B[i_1]);
        // Call g() end
        l = t || TMP_0;
    end
    t1 = l;
end

endmodule


