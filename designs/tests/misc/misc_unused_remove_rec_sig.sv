//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.14
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a_mod"
(
    input logic clk,
    input logic signed [31:0] i1_a,
    input logic [2:0] i1_b,
    output logic signed [31:0] o1_a,
    output logic [2:0] o1_b,
    input logic signed [31:0] ivec1_a[3],
    input logic [2:0] ivec1_b[3],
    output logic signed [31:0] ovec1_a[3][2],
    output logic [2:0] ovec1_b[3][2]
);

// Variables generated for SystemC signals
logic nrst;
logic [3:0] s;
logic [3:0] r;
logic signed [31:0] t0_a;
logic [2:0] t0_b;
logic signed [31:0] t1_a;
logic [2:0] t1_b;
logic signed [31:0] t2_a;
logic [2:0] t2_b;
logic signed [31:0] vec0_a[3];
logic [2:0] vec0_b[3];
logic signed [31:0] vec1_a[3];
logic [2:0] vec1_b[3];
logic signed [31:0] vec3_a[3];
logic [2:0] vec3_b[3];
logic signed [31:0] vvec0_a[3][2];
logic [2:0] vvec0_b[3][2];
logic signed [31:0] vvec1_a[3][2];
logic [2:0] vvec1_b[3][2];
logic signed [31:0] vvec3_a[3][2];
logic [2:0] vvec3_b[3][2];
logic signed [31:0] vec1t_a[3];
logic [2:0] vec1t_b[3];
logic signed [31:0] vec3t_a[3];
logic [2:0] vec3t_b[3];
logic signed [31:0] vvec0t_a[3][2];
logic [2:0] vvec0t_b[3][2];
logic signed [31:0] vvec1t_a[3][2];
logic [2:0] vvec1t_b[3][2];
logic signed [31:0] vvec3t_a[3][2];
logic [2:0] vvec3t_b[3][2];

//------------------------------------------------------------------------------
// Method process: remove_port (test_unused_remove_rec_sig.cpp:107:5) 
// Empty process, no code generated 

//------------------------------------------------------------------------------
// Method process: remove_sig (test_unused_remove_rec_sig.cpp:112:5) 

always_comb 
begin : remove_sig     // test_unused_remove_rec_sig.cpp:112:5
    integer ss_a;
    logic [2:0] ss_b;
    ss_b = 0;
    t1_a = ss_a; t1_b = ss_b;
    t2_a = t0_a; t2_b = t0_b;
end

//------------------------------------------------------------------------------
// Method process: remove_sig_vec (test_unused_remove_rec_sig.cpp:120:5) 

always_comb 
begin : remove_sig_vec     // test_unused_remove_rec_sig.cpp:120:5
    integer ss_a;
    logic [2:0] ss_b;
    integer rr_a;
    logic [2:0] rr_b;
    vec1_a[vec0_a[1]] = 0; vec1_b[vec0_a[1]] = 0;
    vec3_a[r] = vvec0_a[1][1]; vec3_b[r] = vvec0_b[1][1];
    ss_b = 0;
    vvec1_a[1][vec0_a[1]] = ss_a; vvec1_b[1][vec0_a[1]] = ss_b;
    rr_b = 0;
    rr_a = vvec3_a[s][vec0_a[1]]; rr_b = vvec3_b[s][vec0_a[1]];
end

//------------------------------------------------------------------------------
// Clocked THREAD: remove_sig_vec_thread (test_unused_remove_rec_sig.cpp:133:5) 

// Thread-local variables
logic signed [31:0] vec1t_a_next[3];
logic [2:0] vec1t_b_next[3];
logic signed [31:0] vec3t_a_next[3];
logic [2:0] vec3t_b_next[3];
logic signed [31:0] vvec1t_a_next[3][2];
logic [2:0] vvec1t_b_next[3][2];

// Next-state combinational logic
always_comb begin : remove_sig_vec_thread_comb     // test_unused_remove_rec_sig.cpp:133:5
    remove_sig_vec_thread_func;
end
function void remove_sig_vec_thread_func;
    integer l;
    integer ss_a;
    logic [2:0] ss_b;
    integer rr_a;
    logic [2:0] rr_b;
    vec1t_a_next = vec1t_a;
    vec1t_b_next = vec1t_b;
    vec3t_a_next = vec3t_a;
    vec3t_b_next = vec3t_b;
    vvec1t_a_next = vvec1t_a;
    vvec1t_b_next = vvec1t_b;
    l = r;
    vec1t_a_next[l] = 0; vec1t_b_next[l] = 0;
    vec3t_a_next[r] = vvec0t_a[1][1]; vec3t_b_next[r] = vvec0t_b[1][1];
    ss_b = 0;
    vvec1t_a_next[1][l] = ss_a; vvec1t_b_next[1][l] = ss_b;
    rr_b = 0;
    rr_a = vvec3t_a[s][l]; rr_b = vvec3t_b[s][l];
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : remove_sig_vec_thread_ff
    if ( ~nrst ) begin
    end
    else begin
        vec1t_a <= vec1t_a_next;
        vec1t_b <= vec1t_b_next;
        vec3t_a <= vec3t_a_next;
        vec3t_b <= vec3t_b_next;
        vvec1t_a <= vvec1t_a_next;
        vvec1t_b <= vvec1t_b_next;
    end
end

endmodule


