//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "test_top.a_mod"
(
    input logic clk,
    input logic rstn
);

// Variables generated for SystemC signals
logic signed [31:0] s;
logic signed [31:0] s_d;
logic signed [31:0] s_d2;

// Local parameters generated for C++ constants
localparam logic [31:0] N = 2;
localparam logic signed [31:0] M = 3;

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_imm (test_sva_generate_proc_nogen.cpp:109:5) 

// Thread-local variables
logic signed [31:0] ii;
logic signed [31:0] ii_next;
logic sct_assert_imm_PROC_STATE;
logic sct_assert_imm_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : sct_assert_imm_comb     // test_sva_generate_proc_nogen.cpp:109:5
    sct_assert_imm_func;
end
function void sct_assert_imm_func;
    integer mm;
    ii_next = ii;
    sct_assert_imm_PROC_STATE_next = sct_assert_imm_PROC_STATE;
    
    case (sct_assert_imm_PROC_STATE)
        0: begin
            mm = 3;
            ii_next = s;
            sct_assert_imm_PROC_STATE_next = 1; return;    // test_sva_generate_proc_nogen.cpp:120:13;
        end
        1: begin
            ii_next = s;
            sct_assert_imm_PROC_STATE_next = 1; return;    // test_sva_generate_proc_nogen.cpp:120:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_imm_ff
    if ( ~rstn ) begin
        integer kk;
        integer mm;
        ii <= '0;
        kk = 1;
        mm = 2;
        sct_assert_imm_PROC_STATE <= '0;    // test_sva_generate_proc_nogen.cpp:113:9;
    end
    else begin
        ii <= ii_next;
        sct_assert_imm_PROC_STATE <= sct_assert_imm_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_imm_reg (test_sva_generate_proc_nogen.cpp:125:5) 

// Thread-local variables
logic signed [31:0] kk0;
logic signed [31:0] kk_next;
logic signed [31:0] mm0;
logic signed [31:0] mm_next;
logic sct_assert_imm_reg_PROC_STATE;
logic sct_assert_imm_reg_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : sct_assert_imm_reg_comb     // test_sva_generate_proc_nogen.cpp:125:5
    sct_assert_imm_reg_func;
end
function void sct_assert_imm_reg_func;
    kk_next = kk0;
    mm_next = mm0;
    sct_assert_imm_reg_PROC_STATE_next = sct_assert_imm_reg_PROC_STATE;
    
    case (sct_assert_imm_reg_PROC_STATE)
        0: begin
            mm_next = 3;
            sct_assert_imm_reg_PROC_STATE_next = 1; return;    // test_sva_generate_proc_nogen.cpp:135:13;
        end
        1: begin
            sct_assert_imm_reg_PROC_STATE_next = 1; return;    // test_sva_generate_proc_nogen.cpp:135:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_imm_reg_ff
    if ( ~rstn ) begin
        kk0 <= 1;
        mm0 <= 2;
        sct_assert_imm_reg_PROC_STATE <= '0;    // test_sva_generate_proc_nogen.cpp:129:9;
    end
    else begin
        kk0 <= kk_next;
        mm0 <= mm_next;
        sct_assert_imm_reg_PROC_STATE <= sct_assert_imm_reg_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_one (test_sva_generate_proc_nogen.cpp:141:5) 

// Next-state combinational logic
always_comb begin : sct_assert_one_comb     // test_sva_generate_proc_nogen.cpp:141:5
    sct_assert_one_func;
end
function void sct_assert_one_func;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_one_ff
    if ( ~rstn ) begin
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_two_same (test_sva_generate_proc_nogen.cpp:152:5) 

// Next-state combinational logic
always_comb begin : sct_assert_two_same_comb     // test_sva_generate_proc_nogen.cpp:152:5
    sct_assert_two_same_func;
end
function void sct_assert_two_same_func;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_two_same_ff
    if ( ~rstn ) begin
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_several (test_sva_generate_proc_nogen.cpp:164:5) 

// Thread-local variables
logic [7:0] b;

// Next-state combinational logic
always_comb begin : sct_assert_several_comb     // test_sva_generate_proc_nogen.cpp:164:5
    sct_assert_several_func;
end
function void sct_assert_several_func;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_several_ff
    if ( ~rstn ) begin
        logic [7:0] b;
        b = 1;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_several_multi1 (test_sva_generate_proc_nogen.cpp:178:5) 

// Thread-local variables
logic [1:0] sct_assert_several_multi1_PROC_STATE;
logic [1:0] sct_assert_several_multi1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : sct_assert_several_multi1_comb     // test_sva_generate_proc_nogen.cpp:178:5
    sct_assert_several_multi1_func;
end
function void sct_assert_several_multi1_func;
    sct_assert_several_multi1_PROC_STATE_next = sct_assert_several_multi1_PROC_STATE;
    
    case (sct_assert_several_multi1_PROC_STATE)
        0: begin
            sct_assert_several_multi1_PROC_STATE_next = 1; return;    // test_sva_generate_proc_nogen.cpp:184:13;
        end
        1: begin
            sct_assert_several_multi1_PROC_STATE_next = '0; return;    // test_sva_generate_proc_nogen.cpp:186:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_several_multi1_ff
    if ( ~rstn ) begin
        sct_assert_several_multi1_PROC_STATE <= '0;    // test_sva_generate_proc_nogen.cpp:181:9;
    end
    else begin
        sct_assert_several_multi1_PROC_STATE <= sct_assert_several_multi1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_several_multi2 (test_sva_generate_proc_nogen.cpp:191:5) 

// Thread-local variables
logic [1:0] sct_assert_several_multi2_PROC_STATE;
logic [1:0] sct_assert_several_multi2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : sct_assert_several_multi2_comb     // test_sva_generate_proc_nogen.cpp:191:5
    sct_assert_several_multi2_func;
end
function void sct_assert_several_multi2_func;
    sct_assert_several_multi2_PROC_STATE_next = sct_assert_several_multi2_PROC_STATE;
    
    case (sct_assert_several_multi2_PROC_STATE)
        0: begin
            if (|s)
            begin
                sct_assert_several_multi2_PROC_STATE_next = 1; return;    // test_sva_generate_proc_nogen.cpp:198:17;
            end
            sct_assert_several_multi2_PROC_STATE_next = '0; return;    // test_sva_generate_proc_nogen.cpp:201:13;
        end
        1: begin
            sct_assert_several_multi2_PROC_STATE_next = '0; return;    // test_sva_generate_proc_nogen.cpp:201:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(negedge clk or negedge rstn) 
begin : sct_assert_several_multi2_ff
    if ( ~rstn ) begin
        sct_assert_several_multi2_PROC_STATE <= '0;    // test_sva_generate_proc_nogen.cpp:194:9;
    end
    else begin
        sct_assert_several_multi2_PROC_STATE <= sct_assert_several_multi2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_several_multi3 (test_sva_generate_proc_nogen.cpp:206:5) 

// Thread-local variables
logic [1:0] sct_assert_several_multi3_PROC_STATE;
logic [1:0] sct_assert_several_multi3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : sct_assert_several_multi3_comb     // test_sva_generate_proc_nogen.cpp:206:5
    sct_assert_several_multi3_func;
end
function void sct_assert_several_multi3_func;
    sct_assert_several_multi3_PROC_STATE_next = sct_assert_several_multi3_PROC_STATE;
    
    case (sct_assert_several_multi3_PROC_STATE)
        0: begin
            if (|s)
            begin
                sct_assert_several_multi3_PROC_STATE_next = '0; return;    // test_sva_generate_proc_nogen.cpp:216:17;
            end else begin
                sct_assert_several_multi3_PROC_STATE_next = '0; return;    // test_sva_generate_proc_nogen.cpp:220:17;
            end
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_several_multi3_ff
    if ( ~rstn ) begin
        sct_assert_several_multi3_PROC_STATE <= '0;    // test_sva_generate_proc_nogen.cpp:210:9;
    end
    else begin
        sct_assert_several_multi3_PROC_STATE <= sct_assert_several_multi3_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_thread_var1 (test_sva_generate_proc_nogen.cpp:226:5) 

// Next-state combinational logic
always_comb begin : sct_assert_thread_var1_comb     // test_sva_generate_proc_nogen.cpp:226:5
    sct_assert_thread_var1_func;
end
function void sct_assert_thread_var1_func;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_thread_var1_ff
    if ( ~rstn ) begin
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_thread_var2 (test_sva_generate_proc_nogen.cpp:240:5) 

// Thread-local variables
logic rec_a;
logic [3:0] rec_b;

// Next-state combinational logic
always_comb begin : sct_assert_thread_var2_comb     // test_sva_generate_proc_nogen.cpp:240:5
    sct_assert_thread_var2_func;
end
function void sct_assert_thread_var2_func;
    rec_b = s_d;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_thread_var2_ff
    if ( ~rstn ) begin
        logic rec_a;
        rec_a = '0;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_thread_loc1 (test_sva_generate_proc_nogen.cpp:254:5) 

// Next-state combinational logic
always_comb begin : sct_assert_thread_loc1_comb     // test_sva_generate_proc_nogen.cpp:254:5
    sct_assert_thread_loc1_func;
end
function void sct_assert_thread_loc1_func;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_thread_loc1_ff
    if ( ~rstn ) begin
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_thread_loc2 (test_sva_generate_proc_nogen.cpp:267:5) 

// Next-state combinational logic
always_comb begin : sct_assert_thread_loc2_comb     // test_sva_generate_proc_nogen.cpp:267:5
    sct_assert_thread_loc2_func;
end
function void sct_assert_thread_loc2_func;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_thread_loc2_ff
    if ( ~rstn ) begin
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_thread_loc3 (test_sva_generate_proc_nogen.cpp:278:5) 

// Thread-local variables
logic k;
logic k_next;
logic signed [31:0] i0;
logic signed [31:0] i_next;
logic signed [31:0] l;
logic signed [31:0] l_next;
logic [1:0] sct_assert_thread_loc3_PROC_STATE;
logic [1:0] sct_assert_thread_loc3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : sct_assert_thread_loc3_comb     // test_sva_generate_proc_nogen.cpp:278:5
    sct_assert_thread_loc3_func;
end
function void sct_assert_thread_loc3_func;
    i_next = i0;
    k_next = k;
    l_next = l;
    sct_assert_thread_loc3_PROC_STATE_next = sct_assert_thread_loc3_PROC_STATE;
    
    case (sct_assert_thread_loc3_PROC_STATE)
        0: begin
            sct_assert_thread_loc3_PROC_STATE_next = 1; return;    // test_sva_generate_proc_nogen.cpp:288:13;
        end
        1: begin
            k_next = l_next == s;
            sct_assert_thread_loc3_PROC_STATE_next = '0; return;    // test_sva_generate_proc_nogen.cpp:292:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_thread_loc3_ff
    if ( ~rstn ) begin
        i0 <= '0;
        k <= '0;
        l <= '0;
        sct_assert_thread_loc3_PROC_STATE <= '0;    // test_sva_generate_proc_nogen.cpp:283:9;
    end
    else begin
        k <= k_next;
        i0 <= i_next;
        l <= l_next;
        sct_assert_thread_loc3_PROC_STATE <= sct_assert_thread_loc3_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: sct_assert_cond (test_sva_generate_proc_nogen.cpp:297:5) 

// Next-state combinational logic
always_comb begin : sct_assert_cond_comb     // test_sva_generate_proc_nogen.cpp:297:5
    sct_assert_cond_func;
end
function void sct_assert_cond_func;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : sct_assert_cond_ff
    if ( ~rstn ) begin
    end
    else begin
    end
end

endmodule


