//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.14
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// Variables generated for SystemC signals
logic a;
logic b;
logic c;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .a(a),
  .b(b),
  .c(c)
);

endmodule



//==============================================================================
//
// Module: A (test_unsigned_mode.cpp:208:5)
//
module A // "b_mod.a_mod"
(
    input logic a,
    output logic b,
    output logic c
);

// Variables generated for SystemC signals
logic [3:0] s;
logic [3:0] m[3];
logic sb;

//------------------------------------------------------------------------------
// Method process: unary (test_unsigned_mode.cpp:40:5) 

always_comb 
begin : unary     // test_unsigned_mode.cpp:40:5
    integer unsigned u;
    logic [15:0] x;
    logic [19:0] bx;
    logic [63:0] res;
    logic [19:0] bres;
    u = 11;
    x = 12;
    bx = 13;
    bres = 0;
    bres = bx;
    bres = -signed'({1'b0, bx});
    `ifndef INTEL_SVA_OFF
        assert (bres == 'hFFFF3) else $error("Assertion failed at test_unsigned_mode.cpp:38:24>");
    `endif // INTEL_SVA_OFF
    bres = --bx;
    bres = ++bx;
    bres = ~bx;
    `ifndef INTEL_SVA_OFF
        assert (bres == 'hFFFF2) else $error("Assertion failed at test_unsigned_mode.cpp:38:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: binary (test_unsigned_mode.cpp:62:5) 

always_comb 
begin : binary     // test_unsigned_mode.cpp:62:5
    logic b_1;
    logic [15:0] x;
    integer unsigned u;
    integer unsigned u1;
    integer unsigned u2;
    logic [14:0] bx;
    logic [63:0] res;
    integer unsigned uu;
    logic signed [15:0] y;
    b_1 = 1;
    x = 14;
    u = 12;
    u1 = 13;
    u2 = 14;
    bx = 13;
    uu = -2'sd1;
    uu = 42;
    y = 16'd42;
    y = 10'd42;
    y = -10'sd42;
    res = u1 - u;
    res = -u + u1;
    res = x - u;
    res = 32'(bx) - u;
    res = 32'(bx) + x;
    res = u - 1;
    res = u + (-2'sd1);
    res = u + (-2'sd1);
    res = res + (-2'sd1);
    res = u - u1 + u2;
    `ifndef INTEL_SVA_OFF
        assert (res == 13) else $error("Assertion failed at test_unsigned_mode.cpp:38:24>");
    `endif // INTEL_SVA_OFF
    res = u - x + 3;
    `ifndef INTEL_SVA_OFF
        assert (res == 1) else $error("Assertion failed at test_unsigned_mode.cpp:38:24>");
    `endif // INTEL_SVA_OFF
    res = 2 * (u - x) + u1;
    `ifndef INTEL_SVA_OFF
        assert (res == 9) else $error("Assertion failed at test_unsigned_mode.cpp:38:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: biguint (test_unsigned_mode.cpp:99:5) 

always_comb 
begin : biguint     // test_unsigned_mode.cpp:99:5
    integer unsigned u;
    logic [15:0] x;
    logic [64:0] bx;
    logic [63:0] res;
    logic [64:0] bres;
    u = 11;
    x = 12;
    bx = 13;
    bres = 0;
    bres = signed'({1'b0, bx}) - 1;
    bres = 4 / (signed'({1'b0, bx}) - 15) + signed'({1'b0, x});
    `ifndef INTEL_SVA_OFF
        assert (bres == 10) else $error("Assertion failed at test_unsigned_mode.cpp:38:24>");
    `endif // INTEL_SVA_OFF
    bres = 31 + u;
    bres = u - 12'd42;
    bres = u - 32'd42;
end

//------------------------------------------------------------------------------
// Method process: c99types (test_unsigned_mode.cpp:116:5) 

always_comb 
begin : c99types     // test_unsigned_mode.cpp:116:5
    logic [7:0] a_1;
    logic [15:0] b_1;
    integer unsigned c_1;
    logic [63:0] d;
    integer z;
    integer i;
    integer unsigned u;
    logic [15:0] x;
    logic [64:0] bx;
    a_1 = 1;
    i = 10;
    u = 11;
    x = 12;
    bx = 13;
    a_1 = x - 1;
    b_1 = x + 32'(bx);
    c_1 = 32'(bx) - 1;
    d = i + u;
    a_1 = b_1 - c_1;
    c_1 = signed'({1'b0, a_1}) - signed'({1'b0, b_1});
end

//------------------------------------------------------------------------------
// Method process: warnings (test_unsigned_mode.cpp:137:5) 

always_comb 
begin : warnings     // test_unsigned_mode.cpp:137:5
    integer i;
    logic [15:0] x;
    integer unsigned u;
    logic signed [15:0] y;
    logic [14:0] bx;
    logic signed [32:0] by;
    logic signed [32:0] bres;
    logic signed [63:0] res;
    i = 10;
    x = 14;
    u = 12;
    y = 11;
    bx = 13;
    by = 12;
    bres = 0;
    res = -2'sd1;
    res = -u;
    res = i + u;
    res = i + x;
    res = y + x;
    res = y + signed'({1'b0, u});
    res = res * y;
    bres = 1;
    bres = -u;
    i = 32'(u);
end

//------------------------------------------------------------------------------
// Method process: others (test_unsigned_mode.cpp:164:5) 

always_comb 
begin : others     // test_unsigned_mode.cpp:164:5
    logic signed [15:0] y;
    logic [14:0] bx;
    integer unsigned u;
    logic [3:0] w;
    logic [9:0] x;
    logic a_1;
    logic b_1;
    logic c_1;
    logic d;
    logic e;
    logic t;
    y = 14;
    bx = 13;
    u = 12;
    w = s;
    x = (1 <<< w) + signed'({1'b0, bx});
    a_1 = s > 2;
    b_1 = s > 3;
    c_1 = a_1 == b_1;
    c_1 = a_1 || b_1;
    c_1 = y == signed'({1'b0, u});
    d = m[0][3];
    e = 0;
    e = a_1;
    e = e || sb;
    a_1 = a_1 | (s > 1);
    a_1 = a_1 | (b_1 | c_1);
    t = 0;
    t = b_1 ? 0 : 1;
    a_1 = b_1 ? 0 : 1;
end

endmodule


