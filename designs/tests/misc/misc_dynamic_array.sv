//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.14
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
    input logic clk
);

// Variables generated for SystemC signals
logic sig1[3];
logic sig2[3];
logic sig3[3];
logic sig4[3];


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .clk(clk),
  .p1(sig1),
  .p2(sig2)
);

A p_mod
(
  .clk(clk),
  .p1(sig3),
  .p2(sig4)
);

endmodule



//==============================================================================
//
// Module: A (test_dynamic_array.cpp:56:5)
//
module A // "b_mod.a_mod"
(
    input logic clk,
    input logic p1[3],
    output logic p2[3]
);

// Variables generated for SystemC signals
logic signed [31:0] s1[3];
logic dummy;

//------------------------------------------------------------------------------
// Method process: proc1 (test_dynamic_array.cpp:30:5) 

always_comb 
begin : proc1     // test_dynamic_array.cpp:30:5
    s1[0] = dummy ? 1 : 2;
    p2[0] = dummy;
end

//------------------------------------------------------------------------------
// Clocked THREAD: proc2 (test_dynamic_array.cpp:35:5) 

// Thread-local variables
logic dummy_next;

// Next-state combinational logic
always_comb begin : proc2_comb     // test_dynamic_array.cpp:35:5
    proc2_func;
end
function void proc2_func;
    integer j;
    integer i;
    dummy_next = dummy;
    j = s1[0];
    i = p1[0] ? 1 : 2;
    dummy_next = |(i + j);
endfunction

// Synchronous register update
always_ff @(posedge clk) 
begin : proc2_ff
    begin
        dummy <= dummy_next;
    end
end

endmodule


