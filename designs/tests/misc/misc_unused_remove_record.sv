//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.14
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a_mod"
(
    input logic clk
);

// Variables generated for SystemC signals
logic nrst;
logic [3:0] s;
logic signed [31:0] r_a;
logic [2:0] r_b;
logic signed [31:0] t0_a;
logic [2:0] t0_b;
logic signed [31:0] t0a_a;
logic [2:0] t0a_b;
logic signed [31:0] t1_a;
logic [2:0] t1_b;
logic signed [31:0] t3;
logic signed [31:0] t3a;
logic signed [31:0] t4;
logic signed [31:0] t4a;
logic t6_a[2];
logic [2:0] t6_b[3];
logic t7_a[2];
logic [2:0] t7_b[3];
logic signed [31:0] t8;
logic signed [31:0] t8a;
logic signed [31:0] t1b_a;
logic [2:0] t1b_b;
logic t7a_a[2];
logic [2:0] t7a_b[3];

//------------------------------------------------------------------------------
// Method process: remove_local (test_unused_remove_record.cpp:96:5) 

always_comb 
begin : remove_local     // test_unused_remove_record.cpp:96:5
    integer r1_a;
    logic [2:0] r1_b;
    logic [2:0] par;
    integer r2_a;
    logic [2:0] r2_b;
    integer r3_a;
    logic [2:0] r3_b;
    integer r4_a;
    logic [2:0] r4_b;
    integer r5_a;
    logic [2:0] r5_b;
    integer r6_a;
    logic [2:0] r6_b;
    integer r7_a;
    logic [2:0] r7_b;
    integer r8_a;
    logic [2:0] r8_b;
    r1_b = 0;
    par = s;
    r2_b = par;
    // Call Simple() begin
    r2_a = 42;
    // Call Simple() end
    par = s;
    r3_b = par;
    // Call Simple() begin
    r3_a = 42;
    // Call Simple() end
    r4_b = 0;
    t0_a = r4_a; t0_b = r4_b;
    r5_a = r_a; r5_b = r_b;
    r6_b = 0;
    r7_b = 0;
    r6_a = r7_a; r6_b = r7_b;
    r8_a = r7_a; r8_b = r7_b;
end

//------------------------------------------------------------------------------
// Method process: remove_member (test_unused_remove_record.cpp:155:5) 

// Process-local variables
logic signed [31:0] m2_a;
logic [2:0] m2_b;
logic signed [31:0] m4_a;
logic signed [31:0] m7_a;
logic [2:0] m7_b;
logic signed [31:0] m3_a;
logic [2:0] m3_b;
logic signed [31:0] m6_a;
logic signed [31:0] m8_a;
logic [2:0] m8_b;
logic signed [31:0] m9_a;
logic [2:0] m9_b;
logic signed [31:0] m10_a;
logic [2:0] m10_b;

always_comb 
begin : remove_member     // test_unused_remove_record.cpp:155:5
    integer r1_a;
    logic [2:0] r1_b;
    integer l2;
    integer r2_a;
    logic [2:0] r2_b;
    r1_b = 0;
    m2_a = r1_a; m2_b = r1_b;
    r1_a = m3_a; r1_b = m3_b;
    m4_a = 42;
    l2 = m6_a;
    t3 = l2;
    m7_a = m8_a; m7_b = m8_b;
    r2_a = m9_a; r2_b = m9_b;
    t3 = r2_a;
    t1_a = m10_a; t1_b = m10_b;
end

//------------------------------------------------------------------------------
// Method process: remove_array (test_unused_remove_record.cpp:208:5) 

// Process-local variables
logic signed [31:0] ma0_a[2];
logic [2:0] ma0_b[2];
logic signed [31:0] ma2_a[2];
logic [2:0] ma2_b[2];
logic signed [31:0] ma3_a[2];
logic [2:0] ma3_b[2];
logic signed [31:0] ma4_a[2][2];
logic [2:0] ma4_b[2][2];
logic signed [31:0] ma5_a[2][2];
logic [2:0] ma5_b[2][2];
logic signed [31:0] ma6_a[2][2];
logic [2:0] ma6_b[2][2];
logic signed [31:0] ma7_a[2];
logic [2:0] ma7_b[2];
logic signed [31:0] ma8_a[1][2];
logic signed [31:0] ma9_a[1][2];

always_comb 
begin : remove_array     // test_unused_remove_record.cpp:208:5
    integer a_a;
    logic [2:0] a_b;
    integer a0_a[2];
    logic [2:0] a0_b[2];
    integer a1_a[2][3];
    logic [2:0] a1_b[2][3];
    integer a2_a[2];
    logic [2:0] a2_b[2];
    integer a3_a[2][3];
    logic [2:0] a3_b[2][3];
    integer l1_a;
    logic [2:0] l1_b;
    integer l2_a;
    logic [2:0] l2_b;
    integer l3_a;
    logic [2:0] l3_b;
    integer l4_a;
    logic [2:0] l4_b;
    integer l5_a;
    logic [2:0] l5_b;
    a_b = 0;
    ma0_a[s] = a_a; ma0_b[s] = a_b;
    a1_a[0][0] = a_a; a1_b[0][0] = a_b;
    a2_a[0] = ma2_a[0]; a2_b[0] = ma2_b[0];
    t4 = a2_a[0];
    a3_a[s][0] = ma3_a[1]; a3_b[s][0] = ma3_b[1];
    a3_a[1][s] = ma4_a[s][r_b]; a3_b[1][s] = ma4_b[s][r_b];
    l1_a = ma5_a[s][1]; l1_b = ma5_b[s][1];
    l2_a = ma6_a[1][s]; l2_b = ma6_b[1][s];
    t4 = l2_a;
    l3_a = ma7_a[s]; l3_b = ma7_b[s];
    l4_b = 0;
    l4_a = ma8_a[0][s];
    l5_b = 0;
    l5_a = ma9_a[s][s];
    t4 = l5_a;
end

//------------------------------------------------------------------------------
// Method process: remove_field_array (test_unused_remove_record.cpp:288:5) 

// Process-local variables
logic fm3_a[2];
logic [2:0] fm3_b[3];
logic fm5_a[2][2];
logic [2:0] fm5_b[2][3];
logic fm4_a[2];
logic [2:0] fm4_b[3];
logic fm6_a[2][2];
logic [2:0] fm6_b[2][3];
logic [2:0] fm7_b[3];
logic fm8_a[2][2];

always_comb 
begin : remove_field_array     // test_unused_remove_record.cpp:288:5
    logic f1_a[2];
    logic [2:0] f1_b[3];
    logic f2_a[2][2];
    logic [2:0] f2_b[2][3];
    f1_b[0] = 0; f1_b[1] = 0; f1_b[2] = 0;
    fm3_a = t6_a; fm3_b = t6_b;
    t7_a = fm4_a; t7_b = fm4_b;
    fm5_a[s] = t6_a; fm5_b[s] = t6_b;
    t7_a = fm6_a[s]; t7_b = fm6_b[s];
    t8 = fm7_b[s];
    t8 = fm8_a[s][s];
end

//------------------------------------------------------------------------------
// Clocked THREAD: remove_local_thread (test_unused_remove_record.cpp:112:5) 

// Thread-local variables
logic signed [31:0] t0a_a_next;
logic [2:0] t0a_b_next;

// Next-state combinational logic
always_comb begin : remove_local_thread_comb     // test_unused_remove_record.cpp:112:5
    remove_local_thread_func;
end
function void remove_local_thread_func;
    integer r0_a;
    logic [2:0] r0_b;
    integer r1_a;
    logic [2:0] r1_b;
    logic [2:0] par;
    integer r2_a;
    logic [2:0] r2_b;
    integer r3_a;
    logic [2:0] r3_b;
    integer r4_a;
    logic [2:0] r4_b;
    integer r5_a;
    logic [2:0] r5_b;
    integer r6_a;
    logic [2:0] r6_b;
    integer r7_a;
    logic [2:0] r7_b;
    integer r8_a;
    logic [2:0] r8_b;
    t0a_a_next = t0a_a;
    t0a_b_next = t0a_b;
    r1_b = 0;
    par = s;
    r2_b = par;
    // Call Simple() begin
    r2_a = 42;
    // Call Simple() end
    par = s;
    r3_b = par;
    // Call Simple() begin
    r3_a = 42;
    // Call Simple() end
    r4_b = 0;
    t0a_a_next = r4_a; t0a_b_next = r4_b;
    r5_a = r_a; r5_b = r_b;
    r6_b = 0;
    r7_b = 0;
    r6_a = r7_a; r6_b = r7_b;
    r8_a = r7_a; r8_b = r7_b;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : remove_local_thread_ff
    if ( ~nrst ) begin
        integer r0_a;
        logic [2:0] r0_b;
        r0_b = 0;
    end
    else begin
        t0a_a <= t0a_a_next;
        t0a_b <= t0a_b_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: remove_member_thread (test_unused_remove_record.cpp:173:5) 

// Thread-local variables
logic signed [31:0] m3t_a;
logic [2:0] m3t_b;
logic signed [31:0] m6t_a;
logic signed [31:0] m6t_a_next;
logic signed [31:0] m8t_a;
logic signed [31:0] m8t_a_next;
logic [2:0] m8t_b;
logic [2:0] m8t_b_next;
logic signed [31:0] m9t_a;
logic signed [31:0] m9t_a_next;
logic [2:0] m9t_b;
logic [2:0] m9t_b_next;
logic signed [31:0] m10t_a;
logic signed [31:0] m10t_a_next;
logic [2:0] m10t_b;
logic [2:0] m10t_b_next;
logic signed [31:0] t3a_next;
logic signed [31:0] t1b_a_next;
logic [2:0] t1b_b_next;
logic signed [31:0] m2t_a;
logic [2:0] m2t_b;
logic signed [31:0] m4t_a;
logic signed [31:0] m7t_a;
logic [2:0] m7t_b;

// Next-state combinational logic
always_comb begin : remove_member_thread_comb     // test_unused_remove_record.cpp:173:5
    remove_member_thread_func;
end
function void remove_member_thread_func;
    integer r1_a;
    logic [2:0] r1_b;
    integer l2;
    integer r2_a;
    logic [2:0] r2_b;
    m10t_a_next = m10t_a;
    m10t_b_next = m10t_b;
    m6t_a_next = m6t_a;
    m8t_a_next = m8t_a;
    m8t_b_next = m8t_b;
    m9t_a_next = m9t_a;
    m9t_b_next = m9t_b;
    t1b_a_next = t1b_a;
    t1b_b_next = t1b_b;
    t3a_next = t3a;
    m4t_a = 42;
    l2 = m6t_a_next;
    t3a_next = l2;
    m7t_a = m8t_a_next; m7t_b = m8t_b_next;
    r2_a = m9t_a_next; r2_b = m9t_b_next;
    t3a_next = r2_a;
    t1b_a_next = m10t_a_next; t1b_b_next = m10t_b_next;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : remove_member_thread_ff
    if ( ~nrst ) begin
        integer r1_a;
        logic [2:0] r1_b;
        integer m2t_a;
        logic [2:0] m2t_b;
        r1_b = 0;
        m2t_a = r1_a; m2t_b = r1_b;
        r1_a = m3t_a; r1_b = m3t_b;
    end
    else begin
        m6t_a <= m6t_a_next;
        m8t_a <= m8t_a_next;
        m8t_b <= m8t_b_next;
        m9t_a <= m9t_a_next;
        m9t_b <= m9t_b_next;
        m10t_a <= m10t_a_next;
        m10t_b <= m10t_b_next;
        t3a <= t3a_next;
        t1b_a <= t1b_a_next;
        t1b_b <= t1b_b_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: remove_array_thread (test_unused_remove_record.cpp:246:5) 

// Thread-local variables
logic signed [31:0] a_a0;
logic signed [31:0] a_a_next;
logic [2:0] a_b0;
logic [2:0] a_b_next;
logic signed [31:0] ma2t_a[2];
logic signed [31:0] ma2t_a_next[2];
logic [2:0] ma2t_b[2];
logic [2:0] ma2t_b_next[2];
logic signed [31:0] ma3t_a[2];
logic signed [31:0] ma3t_a_next[2];
logic [2:0] ma3t_b[2];
logic [2:0] ma3t_b_next[2];
logic signed [31:0] ma4t_a[2][2];
logic signed [31:0] ma4t_a_next[2][2];
logic [2:0] ma4t_b[2][2];
logic [2:0] ma4t_b_next[2][2];
logic signed [31:0] ma5t_a[2][2];
logic signed [31:0] ma5t_a_next[2][2];
logic [2:0] ma5t_b[2][2];
logic [2:0] ma5t_b_next[2][2];
logic signed [31:0] ma6t_a[2][2];
logic signed [31:0] ma6t_a_next[2][2];
logic [2:0] ma6t_b[2][2];
logic [2:0] ma6t_b_next[2][2];
logic signed [31:0] ma7t_a[2];
logic signed [31:0] ma7t_a_next[2];
logic [2:0] ma7t_b[2];
logic [2:0] ma7t_b_next[2];
logic signed [31:0] ma8t_a[1][2];
logic signed [31:0] ma8t_a_next[1][2];
logic signed [31:0] ma9t_a[1][2];
logic signed [31:0] ma9t_a_next[1][2];
logic signed [31:0] t4a_next;

// Next-state combinational logic
always_comb begin : remove_array_thread_comb     // test_unused_remove_record.cpp:246:5
    remove_array_thread_func;
end
function void remove_array_thread_func;
    integer a0_a[2];
    logic [2:0] a0_b[2];
    integer a1_a[2][3];
    logic [2:0] a1_b[2][3];
    integer a2_a[2];
    logic [2:0] a2_b[2];
    integer a3_a[2][3];
    logic [2:0] a3_b[2][3];
    integer l1_a;
    logic [2:0] l1_b;
    integer l2_a;
    logic [2:0] l2_b;
    integer l3_a;
    logic [2:0] l3_b;
    integer l4_a;
    logic [2:0] l4_b;
    integer l5_a;
    logic [2:0] l5_b;
    a_a_next = a_a0;
    a_b_next = a_b0;
    ma2t_a_next = ma2t_a;
    ma2t_b_next = ma2t_b;
    ma3t_a_next = ma3t_a;
    ma3t_b_next = ma3t_b;
    ma4t_a_next = ma4t_a;
    ma4t_b_next = ma4t_b;
    ma5t_a_next = ma5t_a;
    ma5t_b_next = ma5t_b;
    ma6t_a_next = ma6t_a;
    ma6t_b_next = ma6t_b;
    ma7t_a_next = ma7t_a;
    ma7t_b_next = ma7t_b;
    ma8t_a_next = ma8t_a;
    ma9t_a_next = ma9t_a;
    t4a_next = t4a;
    a1_a[0][0] = a_a_next; a1_b[0][0] = a_b_next;
    a2_a[0] = ma2t_a_next[0]; a2_b[0] = ma2t_b_next[0];
    t4a_next = a2_a[0];
    a3_a[s][0] = ma3t_a_next[1]; a3_b[s][0] = ma3t_b_next[1];
    a3_a[1][s] = ma4t_a_next[s][s]; a3_b[1][s] = ma4t_b_next[s][s];
    l1_a = ma5t_a_next[s][1]; l1_b = ma5t_b_next[s][1];
    l2_a = ma6t_a_next[1][s]; l2_b = ma6t_b_next[1][s];
    t4a_next = l2_a;
    l3_a = ma7t_a_next[s]; l3_b = ma7t_b_next[s];
    l4_b = 0;
    l4_a = ma8t_a_next[0][s];
    l5_b = 0;
    l5_a = ma9t_a_next[s][s];
    t4a_next = l5_a;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : remove_array_thread_ff
    if ( ~nrst ) begin
        integer a0_a[2];
        logic [2:0] a0_b[2];
        a_b0 <= 0;
    end
    else begin
        a_a0 <= a_a_next;
        a_b0 <= a_b_next;
        ma2t_a <= ma2t_a_next;
        ma2t_b <= ma2t_b_next;
        ma3t_a <= ma3t_a_next;
        ma3t_b <= ma3t_b_next;
        ma4t_a <= ma4t_a_next;
        ma4t_b <= ma4t_b_next;
        ma5t_a <= ma5t_a_next;
        ma5t_b <= ma5t_b_next;
        ma6t_a <= ma6t_a_next;
        ma6t_b <= ma6t_b_next;
        ma7t_a <= ma7t_a_next;
        ma7t_b <= ma7t_b_next;
        ma8t_a <= ma8t_a_next;
        ma9t_a <= ma9t_a_next;
        t4a <= t4a_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: remove_field_array_thread (test_unused_remove_record.cpp:312:5) 

// Thread-local variables
logic fm4t_a[2];
logic fm4t_a_next[2];
logic [2:0] fm4t_b[3];
logic [2:0] fm4t_b_next[3];
logic fm6t_a[2][2];
logic fm6t_a_next[2][2];
logic [2:0] fm6t_b[2][3];
logic [2:0] fm6t_b_next[2][3];
logic [2:0] fm7t_b[3];
logic [2:0] fm7t_b_next[3];
logic fm8t_a[2][2];
logic fm8t_a_next[2][2];
logic t7a_a_next[2];
logic [2:0] t7a_b_next[3];
logic signed [31:0] t8a_next;
logic fm3t_a[2];
logic [2:0] fm3t_b[3];
logic fm5t_a[2][2];
logic [2:0] fm5t_b[2][3];

// Next-state combinational logic
always_comb begin : remove_field_array_thread_comb     // test_unused_remove_record.cpp:312:5
    remove_field_array_thread_func;
end
function void remove_field_array_thread_func;
    logic f1_a[2];
    logic [2:0] f1_b[3];
    logic f2_a[2][2];
    logic [2:0] f2_b[2][3];
    fm4t_a_next = fm4t_a;
    fm4t_b_next = fm4t_b;
    fm6t_a_next = fm6t_a;
    fm6t_b_next = fm6t_b;
    fm7t_b_next = fm7t_b;
    fm8t_a_next = fm8t_a;
    t7a_a_next = t7a_a;
    t7a_b_next = t7a_b;
    t8a_next = t8a;
    fm3t_a = t6_a; fm3t_b = t6_b;
    t7a_a_next = fm4t_a_next; t7a_b_next = fm4t_b_next;
    fm5t_a[s] = t6_a; fm5t_b[s] = t6_b;
    t7a_a_next = fm6t_a_next[s]; t7a_b_next = fm6t_b_next[s];
    t8a_next = fm7t_b_next[s];
    t8a_next = fm8t_a_next[s][s];
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : remove_field_array_thread_ff
    if ( ~nrst ) begin
        logic f1_a[2];
        logic [2:0] f1_b[3];
        logic f2_a[2][2];
        logic [2:0] f2_b[2][3];
        f1_b[0] = 0; f1_b[1] = 0; f1_b[2] = 0;
    end
    else begin
        fm4t_a <= fm4t_a_next;
        fm4t_b <= fm4t_b_next;
        fm6t_a <= fm6t_a_next;
        fm6t_b <= fm6t_b_next;
        fm7t_b <= fm7t_b_next;
        fm8t_a <= fm8t_a_next;
        t7a_a <= t7a_a_next;
        t7a_b <= t7a_b_next;
        t8a <= t8a_next;
    end
end

endmodule


