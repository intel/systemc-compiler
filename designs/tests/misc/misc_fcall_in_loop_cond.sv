//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.17
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a_mod"
(
    input logic clk
);

// Variables generated for SystemC signals
logic nrst;
logic signed [31:0] s;

//------------------------------------------------------------------------------
// Clocked THREAD: thread_for1 (test_fcall_in_loop_cond.cpp:100:5) 

// Thread-local variables
logic [31:0] i;
logic [31:0] i_next;
logic [31:0] i0;
logic [31:0] i_next0;
logic [2:0] thread_for1_PROC_STATE;
logic [2:0] thread_for1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_for1_comb     // test_fcall_in_loop_cond.cpp:100:5
    thread_for1_func;
end
function void thread_for1_func;
    integer unsigned TMP_0;
    integer unsigned TMP_1;
    i_next = i;
    i_next0 = i0;
    thread_for1_PROC_STATE_next = thread_for1_PROC_STATE;
    
    case (thread_for1_PROC_STATE)
        0: begin
            i_next = 0;
            // Call h() begin
            TMP_0 = |s ? 4 : 5;
            // Call h() end
            if (i_next < TMP_0)
            begin
                thread_for1_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:103:44;
            end
            thread_for1_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:104:9;
        end
        1: begin
            i_next++;
            // Call h() begin
            TMP_0 = |s ? 4 : 5;
            // Call h() end
            if (i_next < TMP_0)
            begin
                thread_for1_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:103:44;
            end
            thread_for1_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:104:9;
        end
        2: begin
            i_next0 = 0;
            // Call h() begin
            TMP_1 = |s ? 4 : 5;
            // Call h() end
            if (i_next0 < TMP_1 + 1)
            begin
                i_next0++;
                thread_for1_PROC_STATE_next = 3; return;    // test_fcall_in_loop_cond.cpp:110:16;
            end
            thread_for1_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:112:13;
        end
        3: begin
            // Call h() begin
            TMP_1 = |s ? 4 : 5;
            // Call h() end
            if (i_next0 < TMP_1 + 1)
            begin
                i_next0++;
                thread_for1_PROC_STATE_next = 3; return;    // test_fcall_in_loop_cond.cpp:110:16;
            end
            thread_for1_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:112:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_for1_ff
    if ( ~nrst ) begin
        thread_for1_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:102:9;
    end
    else begin
        i <= i_next;
        i0 <= i_next0;
        thread_for1_PROC_STATE <= thread_for1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_for2 (test_fcall_in_loop_cond.cpp:120:5) 

// Thread-local variables
logic [31:0] i1;
logic [31:0] i_next1;
logic [1:0] thread_for2_PROC_STATE;
logic [1:0] thread_for2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_for2_comb     // test_fcall_in_loop_cond.cpp:120:5
    thread_for2_func;
end
function void thread_for2_func;
    integer unsigned TMP_0;
    integer unsigned par;
    i_next1 = i1;
    thread_for2_PROC_STATE_next = thread_for2_PROC_STATE;
    
    case (thread_for2_PROC_STATE)
        0: begin
            i_next1 = 0;
            par = i_next1;
            // Call f2() begin
            par--;
            TMP_0 = par + 1;
            // Call f2() end
            if (i_next1 < TMP_0)
            begin
                thread_for2_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:126:16;
            end
            thread_for2_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:128:13;
        end
        1: begin
            ++i_next1;
            par = i_next1;
            // Call f2() begin
            par--;
            TMP_0 = par + 1;
            // Call f2() end
            if (i_next1 < TMP_0)
            begin
                thread_for2_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:126:16;
            end
            thread_for2_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:128:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_for2_ff
    if ( ~nrst ) begin
        thread_for2_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:122:9;
    end
    else begin
        i1 <= i_next1;
        thread_for2_PROC_STATE <= thread_for2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_for3 (test_fcall_in_loop_cond.cpp:135:5) 

// Thread-local variables
logic [31:0] i2;
logic [31:0] i_next2;
logic [1:0] thread_for3_PROC_STATE;
logic [1:0] thread_for3_PROC_STATE_next;

// Thread-local constants
logic signed [31:0] N;

// Next-state combinational logic
always_comb begin : thread_for3_comb     // test_fcall_in_loop_cond.cpp:135:5
    thread_for3_func;
end
function void thread_for3_func;
    integer unsigned TMP_0;
    integer unsigned par;
    i_next2 = i2;
    thread_for3_PROC_STATE_next = thread_for3_PROC_STATE;
    
    case (thread_for3_PROC_STATE)
        0: begin
            i_next2 = 0;
            par = N;
            // Call f3() begin
            TMP_0 = |s ? par + 1 : par + 2;
            // Call f3() end
            if (i_next2 < TMP_0)
            begin
                thread_for3_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:142:17;
            end
            thread_for3_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:146:13;
        end
        1: begin
            if (|s)
            begin
                // continue begin
                ++i_next2;
                par = N;
                // Call f3() begin
                TMP_0 = |s ? par + 1 : par + 2;
                // Call f3() end
                if (i_next2 < TMP_0)
                begin
                    thread_for3_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:142:17;
                end
                thread_for3_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:146:13;
                // continue end
            end
            i_next2++;
            ++i_next2;
            par = N;
            // Call f3() begin
            TMP_0 = |s ? par + 1 : par + 2;
            // Call f3() end
            if (i_next2 < TMP_0)
            begin
                thread_for3_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:142:17;
            end
            thread_for3_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:146:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_for3_ff
    if ( ~nrst ) begin
        N = 4;
        thread_for3_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:138:9;
    end
    else begin
        i2 <= i_next2;
        thread_for3_PROC_STATE <= thread_for3_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_for4 (test_fcall_in_loop_cond.cpp:156:5) 

// Thread-local variables
logic [31:0] i3;
logic [31:0] i_next3;
logic [31:0] k;
logic [31:0] k_next;
logic [1:0] thread_for4_PROC_STATE;
logic [1:0] thread_for4_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_for4_comb     // test_fcall_in_loop_cond.cpp:156:5
    thread_for4_func;
end
function void thread_for4_func;
    integer unsigned TMP_0;
    integer unsigned par1;
    logic [4:0] par2;
    i_next3 = i3;
    k_next = k;
    thread_for4_PROC_STATE_next = thread_for4_PROC_STATE;
    
    case (thread_for4_PROC_STATE)
        0: begin
            k_next = 0;
            i_next3 = 0;
            par1 = k_next; par2 = i_next3;
            // Call f4() begin
            for (integer j = 0; j < par2; ++j)
            begin
                par1++;
            end
            TMP_0 = par1;
            // Call f4() end
            if (i_next3 < TMP_0)
            begin
                thread_for4_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:163:21;
            end
            thread_for4_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:165:17;
        end
        1: begin
            ++i_next3;
            par1 = k_next; par2 = i_next3;
            // Call f4() begin
            for (integer j = 0; j < par2; ++j)
            begin
                par1++;
            end
            TMP_0 = par1;
            // Call f4() end
            if (i_next3 < TMP_0)
            begin
                thread_for4_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:163:21;
            end
            thread_for4_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:165:17;
        end
        2: begin
            ++k_next;
            if (k_next < 3)
            begin
                i_next3 = 0;
                par1 = k_next; par2 = i_next3;
                // Call f4() begin
                for (integer j = 0; j < par2; ++j)
                begin
                    par1++;
                end
                TMP_0 = par1;
                // Call f4() end
                if (i_next3 < TMP_0)
                begin
                    thread_for4_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:163:21;
                end
                thread_for4_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:165:17;
            end
            k_next = 0;
            i_next3 = 0;
            par1 = k_next; par2 = i_next3;
            // Call f4() begin
            for (integer j = 0; j < par2; ++j)
            begin
                par1++;
            end
            TMP_0 = par1;
            // Call f4() end
            if (i_next3 < TMP_0)
            begin
                thread_for4_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:163:21;
            end
            thread_for4_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:165:17;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_for4_ff
    if ( ~nrst ) begin
        thread_for4_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:158:9;
    end
    else begin
        i3 <= i_next3;
        k <= k_next;
        thread_for4_PROC_STATE <= thread_for4_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_for5 (test_fcall_in_loop_cond.cpp:178:5) 

// Thread-local variables
logic [31:0] i4;
logic [31:0] i_next4;
logic [1:0] thread_for5_PROC_STATE;
logic [1:0] thread_for5_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_for5_comb     // test_fcall_in_loop_cond.cpp:178:5
    thread_for5_func;
end
function void thread_for5_func;
    integer unsigned TMP_0;
    integer unsigned par1;
    integer unsigned TMP_1;
    integer unsigned par2;
    integer unsigned j;
    i_next4 = i4;
    thread_for5_PROC_STATE_next = thread_for5_PROC_STATE;
    
    case (thread_for5_PROC_STATE)
        0: begin
            i_next4 = 0;
            par1 = s;
            // Call f5() begin
            par2 = par1 + 1;
            // Call f5a() begin
            TMP_1 = par2 + 1;
            // Call f5a() end
            j = TMP_1;
            TMP_0 = j;
            // Call f5() end
            if (i_next4 < TMP_0)
            begin
                thread_for5_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:184:17;
            end
            thread_for5_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:186:13;
        end
        1: begin
            ++i_next4;
            par1 = s;
            // Call f5() begin
            par2 = par1 + 1;
            // Call f5a() begin
            TMP_1 = par2 + 1;
            // Call f5a() end
            j = TMP_1;
            TMP_0 = j;
            // Call f5() end
            if (i_next4 < TMP_0)
            begin
                thread_for5_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:184:17;
            end
            thread_for5_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:186:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_for5_ff
    if ( ~nrst ) begin
        thread_for5_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:180:9;
    end
    else begin
        i4 <= i_next4;
        thread_for5_PROC_STATE <= thread_for5_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_for6 (test_fcall_in_loop_cond.cpp:201:5) 

// Thread-local variables
logic [31:0] i5;
logic [31:0] i_next5;
logic [1:0] thread_for6_PROC_STATE;
logic [1:0] thread_for6_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_for6_comb     // test_fcall_in_loop_cond.cpp:201:5
    thread_for6_func;
end
function void thread_for6_func;
    integer unsigned TMP_0;
    integer unsigned par1;
    logic [4:0] par2;
    integer j;
    integer unsigned TMP_1;
    integer unsigned par3;
    i_next5 = i5;
    thread_for6_PROC_STATE_next = thread_for6_PROC_STATE;
    
    case (thread_for6_PROC_STATE)
        0: begin
            i_next5 = 0;
            par1 = i_next5; par2 = 3;
            // Call f6() begin
            j = 0;
            while (j < par2)
            begin
                par3 = ++j;
                // Call f6a() begin
                TMP_1 = par3 + 1;
                // Call f6a() end
                par1 = par1 + TMP_1;
            end
            TMP_0 = par1;
            // Call f6() end
            if (i_next5 < TMP_0)
            begin
                thread_for6_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:207:17;
            end
            thread_for6_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:209:13;
        end
        1: begin
            ++i_next5;
            par1 = i_next5; par2 = 3;
            // Call f6() begin
            j = 0;
            while (j < par2)
            begin
                par3 = ++j;
                // Call f6a() begin
                TMP_1 = par3 + 1;
                // Call f6a() end
                par1 = par1 + TMP_1;
            end
            TMP_0 = par1;
            // Call f6() end
            if (i_next5 < TMP_0)
            begin
                thread_for6_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:207:17;
            end
            thread_for6_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:209:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_for6_ff
    if ( ~nrst ) begin
        thread_for6_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:203:9;
    end
    else begin
        i5 <= i_next5;
        thread_for6_PROC_STATE <= thread_for6_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_for7 (test_fcall_in_loop_cond.cpp:221:5) 

// Thread-local variables
logic [31:0] i6;
logic [31:0] i_next6;
logic [1:0] thread_for7_PROC_STATE;
logic [1:0] thread_for7_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_for7_comb     // test_fcall_in_loop_cond.cpp:221:5
    thread_for7_func;
end
function void thread_for7_func;
    integer unsigned TMP_0;
    integer unsigned par1;
    integer unsigned TMP_1;
    logic [4:0] par2;
    integer unsigned j;
    i_next6 = i6;
    thread_for7_PROC_STATE_next = thread_for7_PROC_STATE;
    
    case (thread_for7_PROC_STATE)
        0: begin
            i_next6 = 0;
            par1 = i_next6;
            // Call f7a() begin
            TMP_0 = par1 + 3;
            // Call f7a() end
            par2 = i_next6;
            // Call f7b() begin
            j = par2 * 2;
            TMP_1 = j;
            // Call f7b() end
            if (TMP_0 > TMP_1)
            begin
                thread_for7_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:227:17;
            end
            thread_for7_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:229:13;
        end
        1: begin
            ++i_next6;
            par1 = i_next6;
            // Call f7a() begin
            TMP_0 = par1 + 3;
            // Call f7a() end
            par2 = i_next6;
            // Call f7b() begin
            j = par2 * 2;
            TMP_1 = j;
            // Call f7b() end
            if (TMP_0 > TMP_1)
            begin
                thread_for7_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:227:17;
            end
            thread_for7_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:229:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_for7_ff
    if ( ~nrst ) begin
        thread_for7_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:223:9;
    end
    else begin
        i6 <= i_next6;
        thread_for7_PROC_STATE <= thread_for7_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_for8 (test_fcall_in_loop_cond.cpp:240:5) 

// Thread-local variables
logic [31:0] i7;
logic [31:0] i_next7;
logic [1:0] thread_for8_PROC_STATE;
logic [1:0] thread_for8_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_for8_comb     // test_fcall_in_loop_cond.cpp:240:5
    thread_for8_func;
end
function void thread_for8_func;
    integer unsigned TMP_0;
    integer par1;
    integer par2;
    integer unsigned TMP_1;
    integer unsigned par3;
    i_next7 = i7;
    thread_for8_PROC_STATE_next = thread_for8_PROC_STATE;
    
    case (thread_for8_PROC_STATE)
        0: begin
            i_next7 = 0;
            par1 = i_next7; par2 = s;
            // Call f8a() begin
            TMP_0 = par1 > par2;
            // Call f8a() end
            par3 = s;
            // Call f8b() begin
            TMP_1 = par3 * 2;
            // Call f8b() end
            if (|TMP_0 || TMP_1 > 10)
            begin
                thread_for8_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:246:17;
            end
            thread_for8_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:248:13;
        end
        1: begin
            ++i_next7;
            par1 = i_next7; par2 = s;
            // Call f8a() begin
            TMP_0 = par1 > par2;
            // Call f8a() end
            par3 = s;
            // Call f8b() begin
            TMP_1 = par3 * 2;
            // Call f8b() end
            if (|TMP_0 || TMP_1 > 10)
            begin
                thread_for8_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:246:17;
            end
            thread_for8_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:248:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_for8_ff
    if ( ~nrst ) begin
        thread_for8_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:242:9;
    end
    else begin
        i7 <= i_next7;
        thread_for8_PROC_STATE <= thread_for8_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_for9 (test_fcall_in_loop_cond.cpp:259:5) 

// Thread-local variables
logic [31:0] i8;
logic [31:0] i_next8;
logic [1:0] thread_for9_PROC_STATE;
logic [1:0] thread_for9_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_for9_comb     // test_fcall_in_loop_cond.cpp:259:5
    thread_for9_func;
end
function void thread_for9_func;
    logic TMP_0;
    integer unsigned par1;
    i_next8 = i8;
    thread_for9_PROC_STATE_next = thread_for9_PROC_STATE;
    
    case (thread_for9_PROC_STATE)
        0: begin
            if (|s)
            begin
                thread_for9_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:265:17;
            end else begin
                i_next8 = 0;
                par1 = i_next8 + 1;
                // Call f9() begin
                if (par1 > 3)
                begin
                    TMP_0 = |s;
                end else begin
                    TMP_0 = |(par1 - 1);
                end
                // Call f9() end
                if (TMP_0)
                begin
                    thread_for9_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:268:21;
                end
                thread_for9_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:270:17;
            end
        end
        2: begin
            ++i_next8;
            par1 = i_next8 + 1;
            // Call f9() begin
            if (par1 > 3)
            begin
                TMP_0 = |s;
            end else begin
                TMP_0 = |(par1 - 1);
            end
            // Call f9() end
            if (TMP_0)
            begin
                thread_for9_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:268:21;
            end
            thread_for9_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:270:17;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_for9_ff
    if ( ~nrst ) begin
        thread_for9_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:261:9;
    end
    else begin
        i8 <= i_next8;
        thread_for9_PROC_STATE <= thread_for9_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_while1 (test_fcall_in_loop_cond.cpp:285:5) 

// Thread-local variables
logic [31:0] i9;
logic [31:0] i_next9;
logic [2:0] thread_while1_PROC_STATE;
logic [2:0] thread_while1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_while1_comb     // test_fcall_in_loop_cond.cpp:285:5
    thread_while1_func;
end
function void thread_while1_func;
    logic TMP_0;
    logic TMP_1;
    integer unsigned par;
    i_next9 = i9;
    thread_while1_PROC_STATE_next = thread_while1_PROC_STATE;
    
    case (thread_while1_PROC_STATE)
        0: begin
            // Call g() begin
            TMP_0 = |s;
            // Call g() end
            if (!TMP_0)
            begin
                thread_while1_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:289:22;
            end
            thread_while1_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:290:9;
        end
        2: begin
            i_next9 = 0;
            i_next9++;
            thread_while1_PROC_STATE_next = 3; return;    // test_fcall_in_loop_cond.cpp:296:16;
        end
        3: begin
            par = i_next9;
            // Call f() begin
            TMP_1 = par < 3;
            // Call f() end
            if (TMP_1)
            begin
                i_next9++;
                thread_while1_PROC_STATE_next = 3; return;    // test_fcall_in_loop_cond.cpp:296:16;
            end
            thread_while1_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:298:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_while1_ff
    if ( ~nrst ) begin
        thread_while1_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:287:9;
    end
    else begin
        i9 <= i_next9;
        thread_while1_PROC_STATE <= thread_while1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_while2 (test_fcall_in_loop_cond.cpp:302:5) 

// Thread-local variables
logic [31:0] i10;
logic [31:0] i_next10;
logic [31:0] k0;
logic [31:0] k_next0;
logic [1:0] thread_while2_PROC_STATE;
logic [1:0] thread_while2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_while2_comb     // test_fcall_in_loop_cond.cpp:302:5
    thread_while2_func;
end
function void thread_while2_func;
    logic TMP_0;
    integer unsigned par;
    i_next10 = i10;
    k_next0 = k0;
    thread_while2_PROC_STATE_next = thread_while2_PROC_STATE;
    
    case (thread_while2_PROC_STATE)
        0: begin
            i_next10 = 0;
            k_next0 = 1;
            for (integer j = 0; j < 3; ++j)
            begin
                k_next0++;
            end
            i_next10 = i_next10 + k_next0;
            thread_while2_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:312:16;
        end
        1: begin
            if (|s)
            begin
                // continue begin
                par = i_next10;
                // Call f() begin
                TMP_0 = par < 3;
                // Call f() end
                if (TMP_0)
                begin
                    for (integer j = 0; j < 3; ++j)
                    begin
                        k_next0++;
                    end
                    i_next10 = i_next10 + k_next0;
                    thread_while2_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:312:16;
                end
                thread_while2_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:315:13;
                // continue end
            end
            par = i_next10;
            // Call f() begin
            TMP_0 = par < 3;
            // Call f() end
            if (TMP_0)
            begin
                for (integer j = 0; j < 3; ++j)
                begin
                    k_next0++;
                end
                i_next10 = i_next10 + k_next0;
                thread_while2_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:312:16;
            end
            thread_while2_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:315:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_while2_ff
    if ( ~nrst ) begin
        thread_while2_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:304:9;
    end
    else begin
        i10 <= i_next10;
        k0 <= k_next0;
        thread_while2_PROC_STATE <= thread_while2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_while3 (test_fcall_in_loop_cond.cpp:319:6) 

// Thread-local variables
logic [31:0] i11;
logic [31:0] i_next11;
logic [1:0] thread_while3_PROC_STATE;
logic [1:0] thread_while3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_while3_comb     // test_fcall_in_loop_cond.cpp:319:6
    thread_while3_func;
end
function void thread_while3_func;
    logic TMP_0;
    integer unsigned par;
    i_next11 = i11;
    thread_while3_PROC_STATE_next = thread_while3_PROC_STATE;
    
    case (thread_while3_PROC_STATE)
        0: begin
            i_next11 = 0;
            par = i_next11;
            // Call f() begin
            TMP_0 = par < 3;
            // Call f() end
            if (|s && TMP_0)
            begin
                thread_while3_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:327:20;
            end
            thread_while3_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:333:13;
        end
        1: begin
            if (|s)
            begin
                // break begin
                i_next11++;
                par = i_next11;
                // Call f() begin
                TMP_0 = par < 3;
                // Call f() end
                if (|s && TMP_0)
                begin
                    thread_while3_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:327:20;
                end
                thread_while3_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:333:13;
                // break end
            end
            i_next11--;
            thread_while3_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:327:20;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_while3_ff
    if ( ~nrst ) begin
        thread_while3_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:321:9;
    end
    else begin
        i11 <= i_next11;
        thread_while3_PROC_STATE <= thread_while3_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_dowhile1 (test_fcall_in_loop_cond.cpp:337:5) 

// Thread-local variables
logic [31:0] i12;
logic [31:0] i_next12;
logic [1:0] thread_dowhile1_PROC_STATE;
logic [1:0] thread_dowhile1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_dowhile1_comb     // test_fcall_in_loop_cond.cpp:337:5
    thread_dowhile1_func;
end
function void thread_dowhile1_func;
    logic TMP_0;
    logic TMP_1;
    integer unsigned par;
    i_next12 = i12;
    thread_dowhile1_PROC_STATE_next = thread_dowhile1_PROC_STATE;
    
    case (thread_dowhile1_PROC_STATE)
        0: begin
            thread_dowhile1_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:342:13;
        end
        1: begin
            // Call g() begin
            TMP_0 = |s;
            // Call g() end
            if (!TMP_0)
            begin
                thread_dowhile1_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:342:13;
            end
            thread_dowhile1_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:344:9;
        end
        2: begin
            i_next12 = 0;
            i_next12++;
            thread_dowhile1_PROC_STATE_next = 3; return;    // test_fcall_in_loop_cond.cpp:350:16;
        end
        3: begin
            i_next12 = i_next12 + 1;
            par = i_next12;
            // Call f() begin
            TMP_1 = par < 3;
            // Call f() end
            if (TMP_1)
            begin
                i_next12++;
                thread_dowhile1_PROC_STATE_next = 3; return;    // test_fcall_in_loop_cond.cpp:350:16;
            end
            i_next12 = 0;
            i_next12++;
            thread_dowhile1_PROC_STATE_next = 3; return;    // test_fcall_in_loop_cond.cpp:350:16;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_dowhile1_ff
    if ( ~nrst ) begin
        thread_dowhile1_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:339:9;
    end
    else begin
        i12 <= i_next12;
        thread_dowhile1_PROC_STATE <= thread_dowhile1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_dowhile2 (test_fcall_in_loop_cond.cpp:356:5) 

// Thread-local variables
logic [1:0] thread_dowhile2_PROC_STATE;
logic [1:0] thread_dowhile2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_dowhile2_comb     // test_fcall_in_loop_cond.cpp:356:5
    thread_dowhile2_func;
end
function void thread_dowhile2_func;
    logic TMP_0;
    thread_dowhile2_PROC_STATE_next = thread_dowhile2_PROC_STATE;
    
    case (thread_dowhile2_PROC_STATE)
        0: begin
            thread_dowhile2_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:365:20;
        end
        1: begin
            // Call g() begin
            TMP_0 = |s;
            // Call g() end
            if (TMP_0)
            begin
                thread_dowhile2_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:365:20;
            end
            thread_dowhile2_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:368:17;
        end
        2: begin
            if (|s)
            begin
                thread_dowhile2_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:365:20;
            end
            thread_dowhile2_PROC_STATE_next = 0; return;    // test_fcall_in_loop_cond.cpp:370:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_dowhile2_ff
    if ( ~nrst ) begin
        thread_dowhile2_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:358:9;
    end
    else begin
        thread_dowhile2_PROC_STATE <= thread_dowhile2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: thread_dowhile3 (test_fcall_in_loop_cond.cpp:374:5) 

// Thread-local variables
logic [31:0] i13;
logic [31:0] i_next13;
logic [1:0] thread_dowhile3_PROC_STATE;
logic [1:0] thread_dowhile3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : thread_dowhile3_comb     // test_fcall_in_loop_cond.cpp:374:5
    thread_dowhile3_func;
end
function void thread_dowhile3_func;
    logic TMP_0;
    integer unsigned par;
    logic TMP_1;
    logic TMP_2;
    logic TMP_3;
    i_next13 = i13;
    thread_dowhile3_PROC_STATE_next = thread_dowhile3_PROC_STATE;
    
    case (thread_dowhile3_PROC_STATE)
        0: begin
            i_next13 = 0;
            i_next13++;
            thread_dowhile3_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:382:16;
        end
        1: begin
            par = i_next13;
            // Call f() begin
            TMP_0 = par < 3;
            // Call f() end
            // Call g() begin
            TMP_1 = |s;
            // Call g() end
            if (TMP_0 || TMP_1)
            begin
                i_next13++;
                thread_dowhile3_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:382:16;
            end else begin
                i_next13--;
                thread_dowhile3_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:387:16;
            end
        end
        2: begin
            par = i_next13;
            // Call f() begin
            TMP_2 = par < 3;
            // Call f() end
            // Call g() begin
            TMP_3 = |s;
            // Call g() end
            if (TMP_2 && TMP_3)
            begin
                i_next13--;
                thread_dowhile3_PROC_STATE_next = 2; return;    // test_fcall_in_loop_cond.cpp:387:16;
            end
            i_next13 = 0;
            i_next13++;
            thread_dowhile3_PROC_STATE_next = 1; return;    // test_fcall_in_loop_cond.cpp:382:16;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge nrst) 
begin : thread_dowhile3_ff
    if ( ~nrst ) begin
        thread_dowhile3_PROC_STATE <= 0;    // test_fcall_in_loop_cond.cpp:376:9;
    end
    else begin
        i13 <= i_next13;
        thread_dowhile3_PROC_STATE <= thread_dowhile3_PROC_STATE_next;
    end
end

endmodule


