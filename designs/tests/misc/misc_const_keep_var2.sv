//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "mod"
(
    input logic clk
);

// Variables generated for SystemC signals

// Local parameters generated for C++ constants
localparam logic [31:0] domIndx0 = 1;
localparam logic [31:0] domIndx1 = 2;
localparam logic [31:0] DOMAIN_NUM = 2;

//------------------------------------------------------------------------------
// Method process: switchProc (test_const_keep_var2.cpp:41:5) 

always_comb 
begin : switchProc     // test_const_keep_var2.cpp:41:5
    integer indx;
    logic [3:0] globIndex;
    indx = '0;
    globIndex = '0;
    case (0)
    0 : begin
        globIndex = domIndx0;
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: switchForProc (test_const_keep_var2.cpp:59:5) 

always_comb 
begin : switchForProc     // test_const_keep_var2.cpp:59:5
    logic [3:0] globIndex;
    globIndex = '0;
    for (int i = 0; i < DOMAIN_NUM; i++)
    begin
        case (i)
        0 : begin
            globIndex = domIndx0;
        end
        1 : begin
            globIndex = domIndx1;
        end
        endcase
    end
end

//------------------------------------------------------------------------------
// Method process: switchEmpty (test_const_keep_var2.cpp:80:5) 

always_comb 
begin : switchEmpty     // test_const_keep_var2.cpp:80:5
    integer indx;
    logic [3:0] globIndex;
    indx = '0;
    globIndex = '0;
    case (0)
    0 : begin  // Empty case without break
        globIndex = domIndx1;
    end
    1 : begin  // Empty case without break
        globIndex = domIndx1;
    end
    2 : begin
        globIndex = domIndx1;
    end
    endcase
end

endmodule


