//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a`_mod"
(
);

// Variables generated for SystemC signals
logic signed [31:0] s1;
logic signed [31:0] s2;

//------------------------------------------------------------------------------
// Method process: const_eval1 (test_fcall_const_eval.cpp:86:5) 

// Process-local variables
logic signed [31:0] t1;
logic [31:0] pu;

always_comb 
begin : const_eval1     // test_fcall_const_eval.cpp:86:5
    integer k;
    logic [7:0] ku;
    logic [7:0] kb;
    logic [32:0] res;
    logic b;
    ku = 2'd3;
    kb = 2'd2;
    res = '0;
    k = 42;    // Call of cf1()
    k = 3;    // Call of cf2()
    t1 = k;
    k = 4;    // Call of cf3()
    k = 6;    // Call of cf4()
    res = 2;
    b = 1;    // Call of cf6()
    pu = 1'd1;
    b = 1;    // Call of cf7()
    if (42)
    begin
        k = 1;
    end
    if (2)
    begin
        k = 2;
    end
end

//------------------------------------------------------------------------------
// Method process: const_eval2 (test_fcall_const_eval.cpp:140:5) 

always_comb 
begin : const_eval2     // test_fcall_const_eval.cpp:140:5
    integer k;
    logic [7:0] ku;
    logic [7:0] kb;
    logic [32:0] res;
    integer unsigned TMP_0;
    integer l;
    integer unsigned TMP_4;
    integer l_1;
    integer unsigned TMP_6;
    integer unsigned a;
    integer unsigned TMP_7;
    integer l_2;
    integer unsigned TMP_11;
    integer unsigned TMP_14;
    integer unsigned a_1;
    integer l_3;
    ku = 2'd3;
    kb = 2'd2;
    res = '0;
    // Call cff1() begin
    l = 42;    // Call of cf1()
    TMP_0 = 6'd44;    // Call of cf2()
    // Call cff1() end
    k = TMP_0;
    // Call cff2() begin
    l_1 = -2'sd1;
    if (0)
    begin
    end
    TMP_4 = 1'd1;    // Call of cf2()
    // Call cff2() end
    k = TMP_4;
    a = 1'd1;
    // Call cff3() begin
    // Call cff1() begin
    l = 42;    // Call of cf1()
    TMP_7 = 6'd44;    // Call of cf2()
    // Call cff1() end
    l_2 = TMP_7;
    TMP_6 = 6'd47;    // Call of cf2()
    // Call cff3() end
    k = TMP_6;
    a = 2'd2;
    // Call cff3() begin
    // Call cff1() begin
    l = 42;    // Call of cf1()
    TMP_7 = 6'd44;    // Call of cf2()
    // Call cff1() end
    l_2 = TMP_7;
    TMP_11 = 6'd48;    // Call of cf2()
    // Call cff3() end
    a_1 = 1'd0;
    // Call cff4() begin
    l_3 = 42;    // Call of cf1()
    if (|s1)
    begin
        TMP_14 = 6'd44;    // Call of cf2()
    end else begin
        TMP_14 = '0;
    end
    // Call cff4() end
    k = TMP_14;
end

//------------------------------------------------------------------------------
// Method process: non_const_eval1 (test_fcall_const_eval.cpp:205:5) 

// Process-local variables
logic signed [31:0] t2;
logic [31:0] qu;

always_comb 
begin : non_const_eval1     // test_fcall_const_eval.cpp:205:5
    integer m;
    integer unsigned mu;
    integer l;
    integer TMP_0;
    integer i;
    integer TMP_1;
    integer i_1;
    integer TMP_2;
    integer TMP_3;
    integer TMP_4;
    integer unsigned TMP_5;
    integer unsigned TMP_6;
    mu = 1'd1;
    // Call f1() begin
    l = 42;
    // Call f1() end
    i = 1;
    // Call f2() begin
    if (|s2)
    begin
        TMP_0 = i + 2'sd1;
    end else begin
        TMP_0 = i + 3'sd2;
    end
    // Call f2() end
    m = TMP_0;
    i_1 = 1;
    // Call f3() begin
    t2 = t2 + i_1;
    TMP_1 = 42;
    // Call f3() end
    m = TMP_1;
    // Call f4() begin
    TMP_2 = |s2 ? 42 : 43;
    // Call f4() end
    m = TMP_2;
    // Call f5() begin
    TMP_3 = s2;
    // Call f5() end
    m = TMP_3;
    // Call f6() begin
    mu++;
    TMP_4 = mu;
    // Call f6() end
    m = TMP_4;
    // Call f7() begin
    qu = 1'd1;
    TMP_5 = qu;
    // Call f7() end
    m = TMP_5;
    // Call f8() begin
    TMP_6 = s2;
    // Call f8() end
    m = TMP_6;
end

//------------------------------------------------------------------------------
// Method process: non_const_eval2 (test_fcall_const_eval.cpp:252:5) 

// Process-local variables
logic signed [31:0] t3;

always_comb 
begin : non_const_eval2     // test_fcall_const_eval.cpp:252:5
    integer k;
    logic [7:0] ku;
    logic [7:0] kb;
    logic [32:0] res;
    integer unsigned TMP_0;
    logic signed [15:0] TMP_1;
    integer l;
    integer TMP_2;
    integer i;
    logic signed [15:0] TMP_3;
    integer a;
    integer TMP_4;
    integer i_1;
    logic TMP_5;
    logic signed [15:0] TMP_6;
    integer TMP_7;
    integer a_1;
    integer TMP_8;
    integer b;
    integer c;
    ku = 2'd3;
    kb = 2'd2;
    res = '0;
    // Call ff1() begin
    // Call f1a() begin
    s1 = 42;
    // Call f1a() end
    TMP_0 = 1'd1;
    // Call ff1() end
    k = TMP_0;
    // Call ff2() begin
    // Call f1() begin
    l = 42;
    // Call f1() end
    i = 1;
    // Call f2() begin
    if (|s2)
    begin
        TMP_2 = i + 2'sd1;
    end else begin
        TMP_2 = i + 3'sd2;
    end
    // Call f2() end
    TMP_1 = TMP_2 - 3'sd3;
    // Call ff2() end
    k = TMP_1;
    // Call ff3() begin
    a = 1;
    if (3)
    begin
        a = '0;
    end
    i_1 = a;
    // Call f3a() begin
    t3 = t3 + i_1;
    TMP_4 = 42;
    // Call f3a() end
    TMP_3 = TMP_4;
    // Call ff3() end
    k = TMP_3;
    // Call ff4() begin
    // Call ff2() begin
    // Call f1() begin
    l = 42;
    // Call f1() end
    i = 1;
    // Call f2() begin
    if (|s2)
    begin
        TMP_2 = i + 2'sd1;
    end else begin
        TMP_2 = i + 3'sd2;
    end
    // Call f2() end
    TMP_6 = TMP_2 - 3'sd3;
    // Call ff2() end
    TMP_5 = TMP_6 > 3'sd3;
    // Call ff4() end
    k = TMP_5;
    a_1 = 1;
    // Call ff5() begin
    // Call g() begin
    a_1++;
    TMP_8 = 1;
    // Call g() end
    b = TMP_8;
    c = a_1;
    TMP_7 = s2;
    // Call ff5() end
    k = TMP_7;
end

endmodule


