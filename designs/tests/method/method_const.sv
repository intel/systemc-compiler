//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
    input logic clk
);


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .clk(clk)
);

endmodule



//==============================================================================
//
// Module: A (test_const.cpp:592:5)
//
module A // "b_mod.a_mod"
(
    input logic clk
);

// Variables generated for SystemC signals
logic [2:0] a;
logic arstn;
logic [31:0] sig1;

// Local parameters generated for C++ constants
localparam logic signed [31:0] CONST_B = 4;
localparam logic [2:0] CONST_C = 5;
localparam logic [31:0] ARR[5] = '{ 1, 2, 3, 4, 5 };
localparam logic [2:0] CONST_U = 5;
localparam logic signed [2:0] CONST_S = -3'sd2;
localparam logic signed [31:0] c3 = 1;
localparam logic signed [31:0] c4 = 43;
localparam logic CONST_A = 1;
localparam logic CONST_AA = 0;
localparam logic [31:0] CONST_D = 12;
localparam logic [31:0] LOG_D = 4;
localparam logic [31:0] CONST_Z = '0;
localparam logic [31:0] C1 = 3;
localparam logic [31:0] C2 = 3;
localparam logic [31:0] C3 = 2;
localparam logic B = 1;
localparam logic signed [31:0] C = 10;
localparam logic [31:0] D = 12;
localparam logic [31:0] ARR0[4] = '{ 1, 2, 3, 4 };

//------------------------------------------------------------------------------
// Method process: const_init (test_const.cpp:157:5) 

// Process-local variables
logic signed [31:0] m1;

always_comb 
begin : const_init     // test_const.cpp:157:5
    integer TMP_0;
    integer i;
    integer TMP_2;
    integer j;
    integer TMP_4;
    integer k_1;
    integer z;
    // Call getInit() begin
    TMP_0 = m1++;
    // Call getInit() end
    i = TMP_0;
    // Call getInit() begin
    TMP_2 = m1++;
    // Call getInit() end
    j = TMP_2;
    // Call getInit2() begin
    m1++;
    TMP_4 = 1;
    // Call getInit2() end
    k_1 = TMP_4;
    z = i + j + k_1;
    `ifndef INTEL_SVA_OFF
        assert (k_1 == 1) else $error("Assertion failed at test_const.cpp:143:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: std_min_max (test_const.cpp:170:5) 

always_comb 
begin : std_min_max     // test_const.cpp:170:5
    logic [2:0] d;
    d = '0;
    d = a[3 : 2];
    d = a[3 : 2];
    d = a[3 : 2];
end

//------------------------------------------------------------------------------
// Method process: long_literal (test_const.cpp:197:5) 

always_comb 
begin : long_literal     // test_const.cpp:197:5
    logic signed [63:0] v1;
    logic signed [63:0] v2;
    logic signed [63:0] v3;
    logic signed [63:0] v4;
    logic signed [63:0] v5;
    logic signed [63:0] v6;
    logic [63:0] v7;
    logic signed [63:0] v8;
    logic [63:0] r1;
    logic signed [63:0] r2;
    logic [63:0] TMP_4;
    logic [2:0] asize;
    logic [63:0] r3;
    logic [63:0] TMP_6;
    logic [63:0] r4;
    v1 = -32'sd2147483647;
    v2 = -33'sh80000000;
    v3 = -33'sh80000001;
    v4 = 2147483647;
    v5 = 32'h80000000;
    v6 = 32'h80000001;
    v7 = 64'hFFFFFFFFFFFFFFFF;
    v8 = -64'sh7FFFFFFFFFFFFFFF;
    r1 = 64'hFFFFFFFFFFFFFFFF;
    r2 = -64'sh7FFFFFFFFFFFFFFF;
    asize = a;
    // Call case_long_return() begin
    case (asize)
    0 : begin
        TMP_4 = 1'd1;
    end
    1 : begin
        TMP_4 = 2'h3;
    end
    default : begin
        TMP_4 = 64'hFFFFFFFFFFFFFFFF;
    end
    endcase
    // Call case_long_return() end
    r3 = TMP_4;
    asize = a;
    // Call case_long_return() begin
    case (asize)
    0 : begin
        TMP_6 = 1'd1;
    end
    1 : begin
        TMP_6 = 2'h3;
    end
    default : begin
        TMP_6 = 64'hFFFFFFFFFFFFFFFF;
    end
    endcase
    // Call case_long_return() end
    r4 = TMP_6 <<< a;
end

//------------------------------------------------------------------------------
// Method process: long_literal2 (test_const.cpp:218:5) 

always_comb 
begin : long_literal2     // test_const.cpp:218:5
    logic signed [63:0] par1;
    logic signed [31:0] par1_1;
    par1 = 32'h80000000;
    // Call temp_func() begin
    // Call temp_func() end
    par1 = -33'sh80000000;
    // Call temp_func() begin
    // Call temp_func() end
    par1_1 = 32'h80000000;
    // Call temp_func() begin
    // Call temp_func() end
    par1_1 = -32'sh80000000;
    // Call temp_func() begin
    // Call temp_func() end
end

//------------------------------------------------------------------------------
// Method process: signed_long_literal (test_const.cpp:226:5) 

always_comb 
begin : signed_long_literal     // test_const.cpp:226:5
    logic signed [63:0] v1;
    logic signed [63:0] v2;
    logic signed [63:0] v3;
    logic signed [63:0] v4;
    logic signed [63:0] w1;
    logic signed [63:0] w2;
    logic signed [63:0] x1;
    logic signed [63:0] x2;
    logic signed [63:0] x3;
    logic signed [63:0] x4;
    logic signed [63:0] y1;
    logic signed [63:0] y2;
    logic signed [63:0] y3;
    logic signed [63:0] y4;
    logic signed [63:0] y5;
    logic signed [63:0] y6;
    logic signed [63:0] y7;
    v1 = 42;
    v2 = -7'sd42;
    v3 = -7'sd42;
    v4 = 42;
    w1 = 2'sd1 - (-7'sd42);
    w2 = 7'sd42 - 7'sd42;
    x1 = 33'h80000000;
    x2 = -33'sh80000000;
    x3 = -33'sh80000000;
    x4 = 33'h80000000;
    y1 = 33'h80000000;
    y2 = -33'sh80000000;
    y3 = -33'sh80000000;
    y4 = 33'h80000000;
    y5 = 33'h80000000;
    y6 = -33'sh80000000;
    y7 = -33'sh80000000;
end

//------------------------------------------------------------------------------
// Method process: smem_if_loop_const (test_const.cpp:252:5) 

always_comb 
begin : smem_if_loop_const     // test_const.cpp:252:5
    integer k_1;
    k_1 = '0;
    if (0)
    begin
    end
end

//------------------------------------------------------------------------------
// Method process: cout_test (test_const.cpp:268:5) 

always_comb 
begin : cout_test     // test_const.cpp:268:5
end

//------------------------------------------------------------------------------
// Method process: template1 (test_const.cpp:274:5) 

always_comb 
begin : template1     // test_const.cpp:274:5
    integer i;
    i = 3'sd3;
    i = B;
    i = C;
    i = 3'sd2 * C + 2'd3 * D;
end

//------------------------------------------------------------------------------
// Method process: const1 (test_const.cpp:283:5) 

always_comb 
begin : const1     // test_const.cpp:283:5
    integer AA;
    integer unsigned BB;
    logic [4:0] CC;
    integer i;
    AA = 1;
    BB = 4'd12;
    CC = 3'd5;
    i = 1;
    i = 3'sd2 + 3'sd3;
    i = AA + BB;
    i = CC;
end

//------------------------------------------------------------------------------
// Method process: const2 (test_const.cpp:301:5) 

always_comb 
begin : const2     // test_const.cpp:301:5
    logic b;
    integer i;
    b = CONST_A;
    b = CONST_AA;
    i = CONST_B;
    i = CONST_C;
    i = CONST_D;
    i = (LOG_D >>> 2) + 1'd1;
end

//------------------------------------------------------------------------------
// Method process: const_array (test_const.cpp:325:5) 

always_comb 
begin : const_array     // test_const.cpp:325:5
    integer m[3];
    integer A[3];
    integer i;
    A[0] = 1; A[1] = 2; A[2] = 3;
    i = ARR0[1];
    i = A[2];
    i = ARR[4];
    m[1] = 1;
    i = m[1];
    m[2] = ARR0[0] + A[0] + ARR[0];
end

//------------------------------------------------------------------------------
// Method process: sign_const (test_const.cpp:339:5) 

always_comb 
begin : sign_const     // test_const.cpp:339:5
    integer i;
    integer unsigned j;
    logic [2:0] y;
    logic signed [2:0] x_1;
    logic b1;
    logic b2;
    logic b3;
    logic b4;
    logic b5;
    logic b6;
    integer z1;
    integer unsigned z2;
    logic [3:0] z3;
    i = CONST_U;
    i = CONST_S;
    j = CONST_U;
    j = CONST_S;
    y = CONST_U;
    y = 3'(CONST_S);
    x_1 = 3'(CONST_U);
    x_1 = CONST_S;
    i = CONST_U * j + CONST_S;
    b1 = CONST_A;
    b2 = b1;
    b3 = CONST_AA;
    b4 = b3;
    b5 = |CONST_Z;
    b6 = b5;
    z1 = '0;
    z2 = '0;
    z3 = '0;
end

//------------------------------------------------------------------------------
// Method process: cond_stmt_const (test_const.cpp:369:5) 

always_comb 
begin : cond_stmt_const     // test_const.cpp:369:5
    logic b3;
    logic b4;
    logic b5;
    logic b6;
    logic b7;
    logic b8;
    b3 = CONST_A;
    b4 = CONST_AA;
    b5 = CONST_AA;
    b6 = b3;
    b7 = 1'd1;
    b8 = 1'd1;
end

//------------------------------------------------------------------------------
// Method process: int_const_expr (test_const.cpp:379:5) 

always_comb 
begin : int_const_expr     // test_const.cpp:379:5
    integer unsigned u1;
    integer unsigned u2;
    integer unsigned u3;
    logic [2:0] x1;
    integer unsigned u4;
    logic [3:0] x2;
    logic [3:0] u5;
    logic [2:0] u6;
    logic [3:0] u7;
    integer unsigned u8;
    logic [4:0] u9;
    logic [4:0] u10;
    logic signed [4:0] x3;
    logic signed [4:0] x4;
    u1 = CONST_B + CONST_D;
    u2 = u1 + LOG_D;
    u3 = CONST_C;
    x1 = CONST_C;
    u4 = CONST_C + x1;
    x2 = x1 + u4;
    u5 = CONST_C + x1;
    u6 = u5;
    u7 = u6;
    u8 = 3'(u5) + 1'd1;
    u9 = 1'(u8) + 1'd1;
    u10 = 4'(u9) + 2'(x2);
    x3 = 5'(x1);
    x4 = x3 + signed'(5'(x2));
end

//------------------------------------------------------------------------------
// Method process: switch_const (test_const.cpp:403:5) 

always_comb 
begin : switch_const     // test_const.cpp:403:5
    integer k_1;
    k_1 = '0;
    case (4)
    4 : begin
        k_1 = 2;
    end
    endcase
end

//------------------------------------------------------------------------------
// Method process: cond_const (test_const.cpp:422:5) 

always_comb 
begin : cond_const     // test_const.cpp:422:5
    integer a_1;
    logic b1;
    logic b2;
    integer unsigned b3;
    a_1 = 1;
    b1 = 1'd1;
    b2 = 1'd1;
    b3 = 2'd2;
end

//------------------------------------------------------------------------------
// Method process: loop_const (test_const.cpp:430:5) 

always_comb 
begin : loop_const     // test_const.cpp:430:5
    integer k_1;
    integer j;
    k_1 = '0;
    for (int i = 0; i < 2; i++)
    begin
        if (|i)
        begin
            k_1 = 2;
        end
    end
    j = '0;
    j = 1;
    if (1)
    begin
        k_1 = 3;
    end
end

//------------------------------------------------------------------------------
// Method process: loop_const_init (test_const.cpp:466:5) 

always_comb 
begin : loop_const_init     // test_const.cpp:466:5
    integer k_1;
    integer j;
    k_1 = '0;
    j = '0;
    j = 1;
end

//------------------------------------------------------------------------------
// Method process: sc_type_const (test_const.cpp:311:5) 

always_comb 
begin : sc_type_const     // test_const.cpp:311:5
    logic [1:0] x_1;
    logic signed [7:0] x2;
    logic [2:0] y;
    logic signed [15:0] y2;
    x_1 = 1'd1;
    x2 = 2;
    y = '0;
    y2 = '0;
end

//------------------------------------------------------------------------------
// Method process: local_static_const (test_const.cpp:475:5) 

always_comb 
begin : local_static_const     // test_const.cpp:475:5
    integer unsigned CONST_A_1;
    integer i;
    CONST_A_1 = 3'd5;
    i = CONST_A_1 + 1'd1;
end

//------------------------------------------------------------------------------
// Clocked THREAD: local_static_const1 (test_const.cpp:483:5) 

// Thread-local constants
logic [31:0] CONST_E;

// Next-state combinational logic
always_comb begin : local_static_const1_comb     // test_const.cpp:483:5
    local_static_const1_func;
end
function void local_static_const1_func;
    integer i;
    integer unsigned CONST_F;
    i = CONST_E;
    CONST_F = sig1;
    i = CONST_E + CONST_F;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : local_static_const1_ff
    if ( ~arstn ) begin
        CONST_E = sig1;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: local_static_const2 (test_const.cpp:495:5) 

// Next-state combinational logic
always_comb begin : local_static_const2_comb     // test_const.cpp:495:5
    local_static_const2_func;
end
function void local_static_const2_func;
    integer unsigned CONST_AA_1;
    integer unsigned CONST_AAA;
    logic [4:0] j;
    logic [5:0] jj;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : local_static_const2_ff
    if ( ~arstn ) begin
        integer unsigned CONST_AA_1;
        integer unsigned CONST_AAA;
        logic [4:0] j;
        logic [5:0] jj;
        CONST_AA_1 = 3'd5;
        CONST_AAA = 3'd6;
        j = '0;
        jj = '0;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: local_static_const3 (test_const.cpp:518:5) 

// Next-state combinational logic
always_comb begin : local_static_const3_comb     // test_const.cpp:518:5
    local_static_const3_func;
end
function void local_static_const3_func;
    integer unsigned TMP_0;
    integer unsigned CONST_G1;
    integer unsigned CONST_G2;
    integer i;
    integer unsigned TMP_2;
    integer unsigned CONST_H1;
    integer unsigned CONST_H2;
    // Call f2() begin
    CONST_H1 = sig1;
    CONST_H2 = 2'd2;
    TMP_2 = CONST_H1 + CONST_H2;
    // Call f2() end
    i = TMP_2;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : local_static_const3_ff
    if ( ~arstn ) begin
        integer unsigned TMP_0;
        integer unsigned CONST_G1;
        integer unsigned CONST_G2;
        integer i;
        // Call f1() begin
        CONST_G1 = sig1;
        CONST_G2 = 1'd1;
        TMP_0 = CONST_G1 + CONST_G2;
        // Call f1() end
        i = TMP_0;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Method process: neg_literal (test_const.cpp:528:5) 

always_comb 
begin : neg_literal     // test_const.cpp:528:5
    logic signed [127:0] i;
    i = -5'sd10;
end

//------------------------------------------------------------------------------
// Method process: binary_const_pointers (test_const.cpp:533:5) 

// Process-local variables
logic signed [31:0] p2;

always_comb 
begin : binary_const_pointers     // test_const.cpp:533:5
    logic b1;
    logic b2;
    logic b3;
    logic b4;
    b1 = '0;
    b2 = 1;
    b1 = 1 && |p2;
    b2 = 0 || |p2;
    b3 = '0;
    b4 = 1;
end

//------------------------------------------------------------------------------
// Method process: pointer_to_const (test_const.cpp:548:5) 

// Process-local variables
logic signed [31:0] c5;

always_comb 
begin : pointer_to_const     // test_const.cpp:548:5
    integer j;
    j = c3 + c4 + c5;
    j = c3;
    j = c4;
    c5 = 2;
    j = c5;
end

//------------------------------------------------------------------------------
// Method process: const_func_call (test_const.cpp:563:5) 

always_comb 
begin : const_func_call     // test_const.cpp:563:5
    integer unsigned u1;
    integer unsigned u2;
    u1 = 2;    // Call of f1()
    u2 = u1;
end

//------------------------------------------------------------------------------
// Method process: sc_int_func (test_const.cpp:570:5) 

always_comb 
begin : sc_int_func     // test_const.cpp:570:5
    logic [3:0] u1;
    logic b;
    integer i;
    u1 = 4'd15;
    b = &u1;
    i = 32'(u1);
end

endmodule


