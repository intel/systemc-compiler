//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// Variables generated for SystemC signals
logic a;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .a(a)
);

endmodule



//==============================================================================
//
// Module: A (test_bool.cpp:253:5)
//
module A // "b_mod.a_mod"
(
    input logic a
);

// Variables generated for SystemC signals
logic s;
logic ps;
logic t0;
logic t1;
logic t2;
logic t3;
logic t4;
logic t4a;
logic t4b;
logic t5;

//------------------------------------------------------------------------------
// Method process: bool_arithmetic (test_bool.cpp:58:5) 

always_comb 
begin : bool_arithmetic     // test_bool.cpp:58:5
    integer res;
    logic b;
    integer unsigned u;
    integer i;
    logic [15:0] ux;
    logic [15:0] ub;
    logic signed [15:0] ib;
    b = 1;
    u = 6'd42;
    i = -7'sd42;
    ux = 6'd43;
    ub = 6'd44;
    ib = -7'sd44;
    res = b + b * b;
    `ifndef INTEL_SVA_OFF
        assert (res == 2) else $error("Assertion failed at test_bool.cpp:56:24>");
    `endif // INTEL_SVA_OFF
    res = b + 2'sd1;
    `ifndef INTEL_SVA_OFF
        assert (res == 2) else $error("Assertion failed at test_bool.cpp:56:24>");
    `endif // INTEL_SVA_OFF
    res = u + b;
    `ifndef INTEL_SVA_OFF
        assert (res == 43) else $error("Assertion failed at test_bool.cpp:56:24>");
    `endif // INTEL_SVA_OFF
    res = i + b;
    `ifndef INTEL_SVA_OFF
        assert (res == -7'sd41) else $error("Assertion failed at test_bool.cpp:56:24>");
    `endif // INTEL_SVA_OFF
    res = ux + b;
    `ifndef INTEL_SVA_OFF
        assert (res == 44) else $error("Assertion failed at test_bool.cpp:56:24>");
    `endif // INTEL_SVA_OFF
    res = 64'(ub) + b;
    `ifndef INTEL_SVA_OFF
        assert (res == 45) else $error("Assertion failed at test_bool.cpp:56:24>");
    `endif // INTEL_SVA_OFF
    res = 64'(ib) + b;
    `ifndef INTEL_SVA_OFF
        assert (res == -7'sd43) else $error("Assertion failed at test_bool.cpp:56:24>");
    `endif // INTEL_SVA_OFF
    res = -b + i;
    `ifndef INTEL_SVA_OFF
        assert (res == -7'sd43) else $error("Assertion failed at test_bool.cpp:56:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: test_bool_to_bool (test_bool.cpp:93:5) 

always_comb 
begin : test_bool_to_bool     // test_bool.cpp:93:5
    logic b1;
    logic b2;
    b1 = a;
    b1 = a;
    b2 = b1;
    b2 = b1;
    t0 = a;
    t0 = a;
    t0 = a;
    t0 = a;
    t0 = ps;
    t0 = ps;
    t0 = b1;
    t0 = b2;
end

//------------------------------------------------------------------------------
// Method process: test_bool_unary (test_bool.cpp:111:5) 

always_comb 
begin : test_bool_unary     // test_bool.cpp:111:5
    integer unsigned i;
    logic b;
    i = 2'd2;
    b = |i;
    b = |(-i);
    b = |(i++);
    b = |(--i);
    t1 = b;
end

//------------------------------------------------------------------------------
// Method process: test_sc_to_bool (test_bool.cpp:123:5) 

// Process-local variables
logic [4:0] px;

always_comb 
begin : test_sc_to_bool     // test_bool.cpp:123:5
    logic b1;
    logic [2:0] x;
    x = '0;
    b1 = x[1];
    b1 = |x[2 : 1];
    b1 = |x;
    b1 = px[1];
    b1 = |px[2 : 1];
    b1 = |px;
    b1 = |6'(px + x);
    s = x[1];
    s = |x[2 : 1];
    s = |x;
    t2 = b1;
end

//------------------------------------------------------------------------------
// Method process: test_ptr_comp (test_bool.cpp:146:5) 

// Process-local variables
logic signed [31:0] p1;

always_comb 
begin : test_ptr_comp     // test_bool.cpp:146:5
    logic b;
    b = 1'd1;
    b = '0;
    b = '0;
    b = 1;
    b = '0;
    b = 1;
    b = '0;
    b = 1;
    b = 1;
    b = '0;
    b = 1;
    b = '0;
    t3 = b;
end

//------------------------------------------------------------------------------
// Method process: test_int_comp (test_bool.cpp:168:5) 

// Process-local variables
logic signed [31:0] p2;

always_comb 
begin : test_int_comp     // test_bool.cpp:168:5
    logic b1;
    integer i;
    logic [3:0] x;
    x = '0;
    b1 = i == 0;
    b1 = x > 1'd1;
    b1 = i != x;
    t4 = b1;
    t4 = x == i;
    t4 = p2 > 0;
    ps = x != 1'd0;
    ps = i == p2;
end

//------------------------------------------------------------------------------
// Method process: test_sc_comp (test_bool.cpp:187:5) 

always_comb 
begin : test_sc_comp     // test_bool.cpp:187:5
    logic b1;
    logic signed [3:0] x;
    logic signed [11:0] ux;
    logic b2;
    x = '0;
    ux = '0;
    b2 = b1 == ux;
    b2 = b1 == x;
    t4a = b2;
end

//------------------------------------------------------------------------------
// Method process: test_bool1 (test_bool.cpp:199:5) 

// Process-local variables
logic signed [31:0] m;

always_comb 
begin : test_bool1     // test_bool.cpp:199:5
    integer unsigned i;
    logic b1;
    i = 2'd2;
    b1 = 1'd1;
    b1 = |i;
    b1 = |i;
    b1 = |i;
    b1 = |32'(i + 1'd1);
    b1 = |2'(|i + 2'sd1);
    t4b = b1;
    b1 = |(a ? m : m == i);
    b1 = |m ? |(++m) : m > 0;
    t4b = b1;
end

//------------------------------------------------------------------------------
// Method process: test_bool2 (test_bool.cpp:216:5) 

always_comb 
begin : test_bool2     // test_bool.cpp:216:5
    logic [3:0] x;
    logic b;
    x = 3'd6;
    b = x[2];
    b = |x[3 : 1];
    b = |x;
    b = !(|x);
    b = !x[2];
    b = !(|x[3 : 1]);
    b = |5'(x + x[3 : 1]);
    t5 = b;
end

//------------------------------------------------------------------------------
// Method process: test_bool4 (test_bool.cpp:231:5) 

// Process-local variables
logic signed [31:0] p;

always_comb 
begin : test_bool4     // test_bool.cpp:231:5
    integer unsigned i;
    i = 1'd1;
    i = 2'd2;
    i = 2'd3;
    i = 3'd4;
end

endmodule


