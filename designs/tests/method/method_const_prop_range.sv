//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// Variables generated for SystemC signals
logic [7:0] a;
logic clk;
logic nrst;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .clk(clk),
  .nrst(nrst),
  .a(a)
);

endmodule



//==============================================================================
//
// Module: A (test_const_prop_range.cpp:186:5)
//
module A // "b_mod.a_mod"
(
    input logic clk,
    input logic nrst,
    input logic [7:0] a
);

//------------------------------------------------------------------------------
// Method process: bitConstProp (test_const_prop_range.cpp:33:5) 

always_comb 
begin : bitConstProp     // test_const_prop_range.cpp:33:5
    logic [3:0] x;
    logic [3:0] y;
    x = '0;
    x = 11;
    `ifndef INTEL_SVA_OFF
        assert (x[3] == 1'd1) else $error("Assertion failed at test_const_prop_range.cpp:37:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    x = 11;
    `ifndef INTEL_SVA_OFF
        assert (x[2] == 1'd0) else $error("Assertion failed at test_const_prop_range.cpp:42:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    x = 11;
    `ifndef INTEL_SVA_OFF
        assert (x[1] == 1'd1) else $error("Assertion failed at test_const_prop_range.cpp:47:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    x = 11;
    `ifndef INTEL_SVA_OFF
        assert (x[0] == 1'd1) else $error("Assertion failed at test_const_prop_range.cpp:52:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    x = 11;
    y = 3'd5;
    `ifndef INTEL_SVA_OFF
        assert (y[1] == x[2]) else $error("Assertion failed at test_const_prop_range.cpp:58:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    y = 5;
    x = 11;
    y = 5;
    `ifndef INTEL_SVA_OFF
        assert (y[0] == x[0]) else $error("Assertion failed at test_const_prop_range.cpp:65:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    y = 5;
end

//------------------------------------------------------------------------------
// Method process: rangeConstProp (test_const_prop_range.cpp:71:5) 

always_comb 
begin : rangeConstProp     // test_const_prop_range.cpp:71:5
    logic [3:0] x;
    logic [3:0] y;
    x = '0;
    x = 11;
    `ifndef INTEL_SVA_OFF
        assert (x[3 : 0] == 4'd11) else $error("Assertion failed at test_const_prop_range.cpp:75:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    x = 11;
    `ifndef INTEL_SVA_OFF
        assert (x[2 : 0] == 2'd3) else $error("Assertion failed at test_const_prop_range.cpp:80:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    x = 11;
    `ifndef INTEL_SVA_OFF
        assert (x[1 : 0] == 2'd3) else $error("Assertion failed at test_const_prop_range.cpp:85:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    x = 11;
    `ifndef INTEL_SVA_OFF
        assert (x[0 : 0] == 1'd1) else $error("Assertion failed at test_const_prop_range.cpp:90:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    x = 11;
    `ifndef INTEL_SVA_OFF
        assert (x[3 : 2] == 2'd2) else $error("Assertion failed at test_const_prop_range.cpp:95:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    x = 11;
    `ifndef INTEL_SVA_OFF
        assert (x[3 : 1] == 3'd5) else $error("Assertion failed at test_const_prop_range.cpp:100:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    x = 11;
    `ifndef INTEL_SVA_OFF
        assert (x[2 : 1] == 1'd1) else $error("Assertion failed at test_const_prop_range.cpp:105:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    x = 11;
    y = 3'd5;
    `ifndef INTEL_SVA_OFF
        assert (x[3 : 2] == y[2 : 1]) else $error("Assertion failed at test_const_prop_range.cpp:111:9");
    `endif // INTEL_SVA_OFF
    x = 11;
    y = 5;
end

//------------------------------------------------------------------------------
// Method process: concatConstProp (test_const_prop_range.cpp:117:5) 

always_comb 
begin : concatConstProp     // test_const_prop_range.cpp:117:5
    `ifndef INTEL_SVA_OFF
        assert ({3'h3, 4'hA} == 'h3A) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert ({3'hA, 4'h28} == 'h28) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert ({9'h1AB, 4'h2} == 'h1AB2) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert ({4'h3, 3'h2} == 'h1A) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert ({4'h3, 3'h2} == 'h1A) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert ({4'hA, 4'hB} == 'hAB) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert ({4'hA, 4'hB, 4'hC} == 'hABC) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert ({4'hA, 4'hB, 4'hC} == 'hABC) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert ({4'hA, 4'hB, 4'hC, 4'hD} == 'hABCD) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: concatConstPropRHS (test_const_prop_range.cpp:133:5) 

always_comb 
begin : concatConstPropRHS     // test_const_prop_range.cpp:133:5
    logic [3:0] x;
    logic [4:0] y;
    logic signed [3:0] z;
    logic [7:0] t;
    logic [11:0] t2;
    x = '0;
    x = 'hB;
    y = 2'h2;
    `ifndef INTEL_SVA_OFF
        assert ({y, x} == 'h2B) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert ({x, y} == 'h162) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    z = 3;
    `ifndef INTEL_SVA_OFF
        assert ({z, x} == 'h3B) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert ({z, x} == 'h3B) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    t = {y, x};
    `ifndef INTEL_SVA_OFF
        assert (t == 6'h2B) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    t = {y, x};
    `ifndef INTEL_SVA_OFF
        assert (t == 6'h2B) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    t2 = {x, 4'(y), 4'hA};
    `ifndef INTEL_SVA_OFF
        assert (t2 == 12'hB2A) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert ({8'hCD, t2} == 'hCDB2A) else $error("Assertion failed at test_const_prop_range.cpp:31:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: constPropLHS (test_const_prop_range.cpp:157:5) 

always_comb 
begin : constPropLHS     // test_const_prop_range.cpp:157:5
    logic [3:0] x;
    x = '0;
    x = 2;
    x[0] = 1'd1;
    x = 3;
    x[0] = 1'd1;
    x = 4;
    x[2 : 2] = 1;
    x = 5;
    x[1 : 0] = 1;
end

endmodule


