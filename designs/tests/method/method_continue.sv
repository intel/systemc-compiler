//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// Variables generated for SystemC signals
logic a;
logic b;
logic c;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .a(a),
  .b(b),
  .c(c)
);

endmodule



//==============================================================================
//
// Module: A (test_continue.cpp:243:5)
//
module A // "b_mod.a_mod"
(
    input logic a,
    output logic b,
    output logic c
);

// Variables generated for SystemC signals
logic signed [31:0] si;
logic signed [31:0] t0;
logic signed [31:0] t1;

//------------------------------------------------------------------------------
// Method process: for_level (test_continue.cpp:57:5) 

always_comb 
begin : for_level     // test_continue.cpp:57:5
    for (int i = 0; i < 3; i++)
    begin
        if (i < 2)
        begin
            continue;
        end
    end
end

//------------------------------------------------------------------------------
// Method process: while_level (test_continue.cpp:65:5) 

always_comb 
begin : while_level     // test_continue.cpp:65:5
    integer i;
    i = '0;
    while (i < 3)
    begin
        i++;
        if (i < 2)
        begin
            continue;
        end
    end
end

//------------------------------------------------------------------------------
// Method process: do_while_level (test_continue.cpp:75:5) 

always_comb 
begin : do_while_level     // test_continue.cpp:75:5
    integer i;
    i = '0;
    do
    begin
        i++;
        if (i < 2)
        begin
            continue;
        end
    end
    while (i < 3);
end

//------------------------------------------------------------------------------
// Method process: for_continue1 (test_continue.cpp:89:5) 

always_comb 
begin : for_continue1     // test_continue.cpp:89:5
    integer k;
    k = '0;
    for (int i = 0; i < 2; i++)
    begin
        if (a)
        begin
            continue;
        end
        k = k + 2'sd1;
    end
    k = 2;
end

//------------------------------------------------------------------------------
// Method process: for_continue4 (test_continue.cpp:99:5) 

always_comb 
begin : for_continue4     // test_continue.cpp:99:5
    integer k;
    k = '0;
    for (int i = 0; i < 2; i++)
    begin
        for (int j = 0; j < 3; j++)
        begin
            if (a)
            begin
                continue;
            end
            k = k + 2'sd1;
        end
        if (b)
        begin
            continue;
        end
        k = k - 2'sd1;
    end
    k = 2;
end

//------------------------------------------------------------------------------
// Method process: for_continue5 (test_continue.cpp:115:5) 

always_comb 
begin : for_continue5     // test_continue.cpp:115:5
    integer k;
    integer m;
    k = '0;
    m = si;
    if (m > 0)
    begin
        for (int i = 0; i < 2; i++)
        begin
            if (a)
            begin
                if (b)
                begin
                    continue;
                end
                k = k - 2'sd1;
                continue;
            end
            k = k + 2'sd1;
        end
    end
    k = 2;
end

//------------------------------------------------------------------------------
// Method process: for_continue6 (test_continue.cpp:131:5) 

always_comb 
begin : for_continue6     // test_continue.cpp:131:5
    integer k;
    integer m;
    k = '0;
    m = si;
    if (m > 0)
    begin
        for (int i = 0; i < 2; i++)
        begin
            if (a)
            begin
                continue;
            end
            if (b)
            begin
                continue;
            end
            k = k + 2'sd1;
        end
    end
    k = 2;
end

//------------------------------------------------------------------------------
// Method process: for_continue7 (test_continue.cpp:147:5) 

always_comb 
begin : for_continue7     // test_continue.cpp:147:5
    integer k;
    integer m;
    k = '0;
    m = si;
    if (m > 0)
    begin
        for (int i = 0; i < 2; i++)
        begin
            if (a)
            begin
                if (b)
                begin
                    break;
                end
                k = k - 2'sd1;
                continue;
            end
            k = k + 2'sd1;
        end
    end
    k = 2;
end

//------------------------------------------------------------------------------
// Method process: while_continue1 (test_continue.cpp:166:5) 

always_comb 
begin : while_continue1     // test_continue.cpp:166:5
    integer i;
    integer k;
    integer m;
    i = '0;
    k = '0;
    m = si;
    if (m > 0)
    begin
        while (i < 2)
        begin
            i++;
            if (a)
            begin
                continue;
            end
        end
    end
    k = 2;
    t0 = k;
end

//------------------------------------------------------------------------------
// Method process: while_continue2 (test_continue.cpp:182:5) 

always_comb 
begin : while_continue2     // test_continue.cpp:182:5
    integer i;
    integer k;
    i = '0;
    k = '0;
    while (k < 4)
    begin
        while (i < 2)
        begin
            i++;
            if (a)
            begin
                continue;
            end
            k++;
        end
        if (k == 3)
        begin
            continue;
        end
    end
    k = 2;
end

//------------------------------------------------------------------------------
// Method process: do_while_continue1 (test_continue.cpp:204:5) 

always_comb 
begin : do_while_continue1     // test_continue.cpp:204:5
    integer i;
    integer k;
    i = '0;
    k = '0;
    do
    begin
        i++;
        if (i == 1 && a)
        begin
            continue;
        end
    end
    while (i < 2);
    k = 2;
    t1 = k;
end

//------------------------------------------------------------------------------
// Method process: do_while_continue2 (test_continue.cpp:218:5) 

always_comb 
begin : do_while_continue2     // test_continue.cpp:218:5
    integer i;
    integer k;
    i = '0;
    k = '0;
    do
    begin
        k++;
        do
        begin
            i++;
            if (i < 2 && a)
            begin
                continue;
            end
        end
        while (i < 3);
    end
    while (k < 4);
    k = 2;
end

endmodule


