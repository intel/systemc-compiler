//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// Variables generated for SystemC signals
logic a;
logic b;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .a(a),
  .b(b)
);

endmodule



//==============================================================================
//
// Module: A (test_shifts_signed.cpp:104:5)
//
module A // "b_mod.a_mod"
(
    input logic a,
    output logic b
);

// Variables generated for SystemC signals

//------------------------------------------------------------------------------
// Method process: shift_right_neg (test_shifts_signed.cpp:58:5) 

always_comb 
begin : shift_right_neg     // test_shifts_signed.cpp:58:5
    logic signed [31:0] par1;
    logic signed [31:0] par2;
    logic signed [63:0] par3;
    logic signed [31:0] A;
    logic signed [31:0] B;
    logic signed [63:0] C;
    logic signed [63:0] shift_r1;
    logic signed [19:0] par1_1;
    logic signed [31:0] par2_1;
    logic signed [63:0] par3_1;
    logic signed [19:0] A_1;
    logic signed [31:0] B_1;
    logic signed [63:0] C_1;
    logic signed [63:0] shift_r1_1;
    logic signed [62:0] par1_2;
    logic signed [63:0] par2_2;
    logic signed [63:0] par3_2;
    logic signed [62:0] A_2;
    logic signed [63:0] B_2;
    logic signed [63:0] C_2;
    logic signed [63:0] shift_r1_2;
    par1 = -32'sd10; par2 = 32'd31; par3 = -64'sd1;
    // Call shift_right_neg_fns() begin
    A = par1;
    B = par2;
    C = par3;
    shift_r1 = A >>> B;
    `ifndef INTEL_SVA_OFF
        assert (shift_r1 == C) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_right_neg_fns() end
    par1 = 32'd0; par2 = 32'd33; par3 = 64'd0;
    // Call shift_right_neg_fns() begin
    A = par1;
    B = par2;
    C = par3;
    shift_r1 = A >>> B;
    `ifndef INTEL_SVA_OFF
        assert (shift_r1 == C) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_right_neg_fns() end
    par1 = -32'sd1; par2 = 32'd10; par3 = -64'sd1;
    // Call shift_right_neg_fns() begin
    A = par1;
    B = par2;
    C = par3;
    shift_r1 = A >>> B;
    `ifndef INTEL_SVA_OFF
        assert (shift_r1 == C) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_right_neg_fns() end
    par1 = -32'sh80000000; par2 = 32'd31; par3 = -64'sd1;
    // Call shift_right_neg_fns() begin
    A = par1;
    B = par2;
    C = par3;
    shift_r1 = A >>> B;
    `ifndef INTEL_SVA_OFF
        assert (shift_r1 == C) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_right_neg_fns() end
    par1_1 = -20'sd55; par2_1 = 32'd0; par3_1 = -64'sd55;
    // Call shift_right_neg_fns() begin
    A_1 = par1_1;
    B_1 = par2_1;
    C_1 = par3_1;
    shift_r1_1 = A_1 >>> B_1;
    `ifndef INTEL_SVA_OFF
        assert (shift_r1_1 == C_1) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_right_neg_fns() end
    par1 = 32'd0; par2 = 32'd0; par3 = 64'd0;
    // Call shift_right_neg_fns() begin
    A = par1;
    B = par2;
    C = par3;
    shift_r1 = A >>> B;
    `ifndef INTEL_SVA_OFF
        assert (shift_r1 == C) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_right_neg_fns() end
    par1_2 = -63'sd10; par2_2 = 64'd31; par3_2 = -64'sd1;
    // Call shift_right_neg_fns() begin
    A_2 = par1_2;
    B_2 = par2_2;
    C_2 = par3_2;
    shift_r1_2 = A_2 >>> B_2;
    `ifndef INTEL_SVA_OFF
        assert (shift_r1_2 == C_2) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_right_neg_fns() end
end

//------------------------------------------------------------------------------
// Method process: shift_left_neg (test_shifts_signed.cpp:78:5) 

always_comb 
begin : shift_left_neg     // test_shifts_signed.cpp:78:5
    logic signed [31:0] par1;
    logic signed [31:0] par2;
    logic signed [63:0] par3;
    logic signed [31:0] A;
    logic signed [31:0] B;
    logic signed [63:0] C;
    logic signed [63:0] shift_l1;
    logic signed [19:0] par1_1;
    logic signed [31:0] par2_1;
    logic signed [63:0] par3_1;
    logic signed [19:0] A_1;
    logic signed [31:0] B_1;
    logic signed [63:0] C_1;
    logic signed [63:0] shift_l1_1;
    logic signed [31:0] par1_2;
    logic signed [31:0] par2_2;
    logic signed [63:0] par3_2;
    logic signed [31:0] A_2;
    logic signed [31:0] B_2;
    logic signed [63:0] C_2;
    logic signed [63:0] shift_l1_2;
    par1 = -32'sd10; par2 = 32'd4; par3 = -64'sd160;
    // Call shift_left_neg_fns() begin
    A = par1;
    B = par2;
    C = par3;
    shift_l1 = A <<< B;
    `ifndef INTEL_SVA_OFF
        assert (shift_l1 == C) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_left_neg_fns() end
    par1 = -32'sd30; par2 = 32'd8; par3 = -64'sd7680;
    // Call shift_left_neg_fns() begin
    A = par1;
    B = par2;
    C = par3;
    shift_l1 = A <<< B;
    `ifndef INTEL_SVA_OFF
        assert (shift_l1 == C) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_left_neg_fns() end
    par1 = 32'd0; par2 = 32'd33; par3 = 64'd0;
    // Call shift_left_neg_fns() begin
    A = par1;
    B = par2;
    C = par3;
    shift_l1 = A <<< B;
    `ifndef INTEL_SVA_OFF
        assert (shift_l1 == C) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_left_neg_fns() end
    par1 = -32'sd1; par2 = 32'd10; par3 = -64'sd1024;
    // Call shift_left_neg_fns() begin
    A = par1;
    B = par2;
    C = par3;
    shift_l1 = A <<< B;
    `ifndef INTEL_SVA_OFF
        assert (shift_l1 == C) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_left_neg_fns() end
    par1 = -32'sh80000000; par2 = 32'd31; par3 = -64'sh4000000000000000;
    // Call shift_left_neg_fns() begin
    A = par1;
    B = par2;
    C = par3;
    shift_l1 = A <<< B;
    `ifndef INTEL_SVA_OFF
        assert (shift_l1 == C) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_left_neg_fns() end
    par1_1 = -20'sd55; par2_1 = 32'd0; par3_1 = -64'sd55;
    // Call shift_left_neg_fns() begin
    A_1 = par1_1;
    B_1 = par2_1;
    C_1 = par3_1;
    shift_l1_1 = A_1 <<< B_1;
    `ifndef INTEL_SVA_OFF
        assert (shift_l1_1 == C_1) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_left_neg_fns() end
    par1 = 32'd0; par2 = 32'd0; par3 = 64'd0;
    // Call shift_left_neg_fns() begin
    A = par1;
    B = par2;
    C = par3;
    shift_l1 = A <<< B;
    `ifndef INTEL_SVA_OFF
        assert (shift_l1 == C) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_left_neg_fns() end
    par1_2 = -32'sd1; par2_2 = 32'd10; par3_2 = -64'sd1024;
    // Call shift_left_neg_fns() begin
    A_2 = par1_2;
    B_2 = par2_2;
    C_2 = par3_2;
    shift_l1_2 = A_2 <<< B_2;
    `ifndef INTEL_SVA_OFF
        assert (shift_l1_2 == C_2) else $error("Assertion failed at test_shifts_signed.cpp:30:24>");
    `endif // INTEL_SVA_OFF
    // Call shift_left_neg_fns() end
end

endmodule


