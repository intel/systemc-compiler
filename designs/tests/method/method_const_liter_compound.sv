//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a_mod"
(
    input logic clk
);

// Variables generated for SystemC signals
logic [2:0] s;
logic signed [31:0] r0;

// Local parameters generated for C++ constants
localparam logic [15:0] C1 = 42;
localparam logic [31:0] C2 = 42;

//------------------------------------------------------------------------------
// Method process: literFromString (test_const_liter_compound.cpp:55:5) 

always_comb 
begin : literFromString     // test_const_liter_compound.cpp:55:5
    logic [5:0] ux;
    logic signed [9:0] ix;
    logic [64:0] bu;
    logic signed [99:0] bi;
    ux = 'b110011;
    ux = 42;
    ux = 5'd10;
    ux = '0;
    ux = '0;
    ux = '0;
    ix = -5'sd11;
    ix = -7'sh26;
    ix = '0;
    ix = -2'so1;
    ix = -2'sb1;
    bu = '0;
    bu = 65'h1FFFF1111FFFF1111;
    bu = 65'h1FFFF1111FFFF1111;
    bi = -6'sh1F;
    bi = -70'shAFFFF1111FFFF1111;
end

//------------------------------------------------------------------------------
// Method process: literSignedWarning (test_const_liter_compound.cpp:86:5) 

always_comb 
begin : literSignedWarning     // test_const_liter_compound.cpp:86:5
    logic [2:0] a;
    integer i;
    logic b;
    logic [2:0] c;
    logic signed [2:0] d;
    a = '0;
    i = 1;
    c = s;
    c = a | i;
    c = c | i;
    c = c | 2'd2;
    d = '0;
    d = d ^ signed'({1'b0, c});
end

//------------------------------------------------------------------------------
// Method process: extra_signed_remove (test_const_liter_compound.cpp:106:5) 

always_comb 
begin : extra_signed_remove     // test_const_liter_compound.cpp:106:5
    logic [7:0] e;
    logic [4:0] ee;
    logic [3:0] dd;
    logic signed [3:0] c;
    integer unsigned u;
    integer w;
    integer ww;
    integer unsigned uu;
    integer j;
    e = 9'd257;
    e = e + 1'd1;
    `ifndef INTEL_SVA_OFF
        assert (e == 2'd2) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    e = e - 1'd1;
    e = e * 1'd1;
    e = e & 1'd1;
    e = e >>> 1'd1;
    ee = '0;
    dd = 4'd14;
    ee = dd * 2'd3;
    `ifndef INTEL_SVA_OFF
        assert (ee == 4'd10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    ee = dd + 6'd42;
    `ifndef INTEL_SVA_OFF
        assert (ee == 5'd24) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    ee = dd <<< 2;
    `ifndef INTEL_SVA_OFF
        assert (ee == 5'd24) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    ee = dd - 3'd4;
    `ifndef INTEL_SVA_OFF
        assert (ee == 4'd10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    c = -4'sd5;
    u = 1'd1;
    u = u + c;
    w = -7'sd42;
    w = w + signed'({1'b0, u});
    ww = -7'sd42;
    uu = 3'd5;
    ww = ww + signed'({1'b0, uu});
    `ifndef INTEL_SVA_OFF
        assert (ww == -7'sd37) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    j = j + (-C1);
    `ifndef INTEL_SVA_OFF
        assert (1'd1) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    j = j + (-C2);
    `ifndef INTEL_SVA_OFF
        assert (1'd1) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: liter_overflow_oper64 (test_const_liter_compound.cpp:153:5) 

always_comb 
begin : liter_overflow_oper64     // test_const_liter_compound.cpp:153:5
    logic [64:0] A;
    logic [69:0] B;
    logic signed [127:0] RES;
    integer unsigned UI;
    logic [15:0] C;
    logic signed [127:0] c;
    logic [127:0] d;
    A = 1'd1;
    B = 1'd1;
    RES = 1;
    UI = 9'd420;
    C = 7'd105;
    c = '0;
    c = 101;
    c = c + signed'({1'b0, UI});
    `ifndef INTEL_SVA_OFF
        assert (c == 521) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    c = c / signed'({1'b0, C});
    `ifndef INTEL_SVA_OFF
        assert (c == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    c = UI;
    c = c | signed'({1'b0, C});
    `ifndef INTEL_SVA_OFF
        assert (c == 493) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    c = 42;
    c = c >>> 2;
    `ifndef INTEL_SVA_OFF
        assert (c == 'hA) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    c = -8'sd101;
    c = c - signed'({1'b0, UI});
    `ifndef INTEL_SVA_OFF
        assert (c == -11'sd521) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    c = c + signed'({1'b0, UI});
    `ifndef INTEL_SVA_OFF
        assert (c == -8'sd101) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    UI = 6'd41;
    c = c + signed'({1'b0, UI});
    `ifndef INTEL_SVA_OFF
        assert (c == -7'sd60) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    d = 7'd71;
    d = d + c;
    `ifndef INTEL_SVA_OFF
        assert (d == 11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: liter_extend_oper (test_const_liter_compound.cpp:270:5) 

always_comb 
begin : liter_extend_oper     // test_const_liter_compound.cpp:270:5
    logic isSigned;
    logic signed [7:0] a;
    logic signed [15:0] b;
    logic signed [7:0] a_1;
    logic signed [15:0] b_1;
    logic isSigned_1;
    logic [7:0] a_2;
    logic [15:0] b_2;
    logic isSigned_2;
    logic [23:0] a_3;
    logic [41:0] b_3;
    logic isSigned_3;
    logic [10:0] a_4;
    logic [32:0] b_4;
    logic isSigned_4;
    logic [36:0] a_5;
    logic [65:0] b_5;
    logic isSigned_5;
    logic [64:0] a_6;
    logic [172:0] b_6;
    logic isSigned_6;
    logic signed [7:0] a_7;
    logic signed [15:0] b_7;
    logic signed [7:0] a_8;
    logic signed [15:0] b_8;
    logic isSigned_7;
    logic signed [32:0] a_9;
    logic signed [63:0] b_9;
    logic signed [32:0] a_10;
    logic signed [63:0] b_10;
    logic isSigned_8;
    logic signed [63:0] a_11;
    logic signed [126:0] b_11;
    logic signed [63:0] a_12;
    logic signed [126:0] b_12;
    logic isSigned_9;
    logic signed [44:0] a_13;
    logic signed [131:0] b_13;
    logic signed [44:0] a_14;
    logic signed [131:0] b_14;
    logic isSigned_10;
    integer a_15;
    integer b_15;
    integer a_16;
    integer b_16;
    logic isSigned_11;
    logic signed [15:0] a_17;
    integer unsigned b_17;
    logic isSigned_12;
    logic signed [63:0] a_18;
    logic signed [63:0] b_18;
    logic signed [63:0] a_19;
    logic signed [63:0] b_19;
    logic isSigned_13;
    logic signed [15:0] a_20;
    logic [63:0] b_20;
    logic isSigned_14;
    integer a_21;
    logic [15:0] b_21;
    logic isSigned_15;
    integer unsigned a_22;
    logic [29:0] b_22;
    logic isSigned_16;
    integer unsigned a_23;
    logic [62:0] b_23;
    logic isSigned_17;
    integer a_24;
    logic signed [63:0] b_24;
    integer a_25;
    logic signed [63:0] b_25;
    logic isSigned_18;
    integer unsigned a_26;
    logic signed [17:0] b_26;
    logic isSigned_19;
    integer a_27;
    logic [31:0] b_27;
    logic isSigned_20;
    integer a_28;
    logic signed [66:0] b_28;
    integer a_29;
    logic signed [66:0] b_29;
    logic isSigned_21;
    integer unsigned a_30;
    logic [67:0] b_30;
    logic isSigned_22;
    integer a_31;
    logic signed [99:0] b_31;
    integer a_32;
    logic signed [99:0] b_32;
    logic isSigned_23;
    logic signed [63:0] a_33;
    logic [64:0] b_33;
    isSigned = 1;
    // Call run_opers() begin
    // Call pos_compound() begin
    a = 'h11;
    b = 'h22;
    b = b + a;
    `ifndef INTEL_SVA_OFF
        assert (b == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b = b - a;
    `ifndef INTEL_SVA_OFF
        assert (b == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b = b * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (b == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b = b / a;
    `ifndef INTEL_SVA_OFF
        assert (b == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b = b <<< (9'(a - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b = b + (3'sd2 * a);
    `ifndef INTEL_SVA_OFF
        assert (b == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b = b >>> 1;
    `ifndef INTEL_SVA_OFF
        assert (b == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b = b ^ 6'sh10;
    `ifndef INTEL_SVA_OFF
        assert (b == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (1)
    begin
        // Call neg_compound() begin
        a_1 = -6'sh11;
        b_1 = -7'sh22;
        b_1 = b_1 + a_1;
        `ifndef INTEL_SVA_OFF
            assert (b_1 == -7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_1 = b_1 - a_1;
        `ifndef INTEL_SVA_OFF
            assert (b_1 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_1 = b_1 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (b_1 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_1 = b_1 * 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_1 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_1 = b_1 + (-a_1);
        `ifndef INTEL_SVA_OFF
            assert (b_1 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_1 = b_1 / (-2'sd1);
        `ifndef INTEL_SVA_OFF
            assert (b_1 == 'h11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_1 = b_1 <<< 2;
        `ifndef INTEL_SVA_OFF
            assert (b_1 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_1 = b_1 >>> 1;
        `ifndef INTEL_SVA_OFF
            assert (b_1 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_1 = b_1 & 7'sh20;
        `ifndef INTEL_SVA_OFF
            assert (b_1 == 'h20) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_1 = b_1 | 3'sh2;
        `ifndef INTEL_SVA_OFF
            assert (b_1 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        // Call neg_compound() end
    end
    // Call run_opers() end
    isSigned_1 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_2 = 5'h11;
    b_2 = 6'h22;
    b_2 = b_2 + a_2;
    `ifndef INTEL_SVA_OFF
        assert (b_2 == 6'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_2 = b_2 - a_2;
    `ifndef INTEL_SVA_OFF
        assert (b_2 == 6'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_2 = b_2 * 2'd2;
    `ifndef INTEL_SVA_OFF
        assert (b_2 == 7'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_2 = b_2 / a_2;
    `ifndef INTEL_SVA_OFF
        assert (b_2 == 3'd4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_2 = b_2 <<< (9'(a_2 - 4'hF));
    `ifndef INTEL_SVA_OFF
        assert (b_2 == 5'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_2 = b_2 + (2'd2 * a_2);
    `ifndef INTEL_SVA_OFF
        assert (b_2 == 6'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_2 = b_2 >>> 1'd1;
    `ifndef INTEL_SVA_OFF
        assert (b_2 == 5'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_2 = b_2 ^ 5'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_2 == 4'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_2 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_3 = 5'h11;
    b_3 = 6'h22;
    b_3 = b_3 + a_3;
    `ifndef INTEL_SVA_OFF
        assert (b_3 == 6'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_3 = b_3 - a_3;
    `ifndef INTEL_SVA_OFF
        assert (b_3 == 6'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_3 = b_3 * 2'd2;
    `ifndef INTEL_SVA_OFF
        assert (b_3 == 7'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_3 = b_3 / a_3;
    `ifndef INTEL_SVA_OFF
        assert (b_3 == 3'd4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_3 = b_3 <<< (25'(a_3 - 4'hF));
    `ifndef INTEL_SVA_OFF
        assert (b_3 == 5'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_3 = b_3 + (2'd2 * a_3);
    `ifndef INTEL_SVA_OFF
        assert (b_3 == 6'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_3 = b_3 >>> 1'd1;
    `ifndef INTEL_SVA_OFF
        assert (b_3 == 5'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_3 = b_3 ^ 5'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_3 == 4'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_3 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_4 = 5'h11;
    b_4 = 6'h22;
    b_4 = b_4 + a_4;
    `ifndef INTEL_SVA_OFF
        assert (b_4 == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_4 = b_4 - a_4;
    `ifndef INTEL_SVA_OFF
        assert (b_4 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_4 = b_4 * 2;
    `ifndef INTEL_SVA_OFF
        assert (b_4 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_4 = b_4 / a_4;
    `ifndef INTEL_SVA_OFF
        assert (b_4 == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_4 = b_4 <<< (12'(signed'({1'b0, a_4}) - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_4 == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_4 = b_4 + (3'sd2 * signed'({1'b0, a_4}));
    `ifndef INTEL_SVA_OFF
        assert (b_4 == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_4 = b_4 >>> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_4 == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_4 = b_4 ^ 'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_4 == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_4 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_5 = 5'h11;
    b_5 = 6'h22;
    b_5 = b_5 + a_5;
    `ifndef INTEL_SVA_OFF
        assert (b_5 == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_5 = b_5 - a_5;
    `ifndef INTEL_SVA_OFF
        assert (b_5 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_5 = b_5 * 2;
    `ifndef INTEL_SVA_OFF
        assert (b_5 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_5 = b_5 / a_5;
    `ifndef INTEL_SVA_OFF
        assert (b_5 == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_5 = b_5 <<< (32'(signed'({1'b0, a_5}) - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_5 == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_5 = b_5 + (3'sd2 * signed'({1'b0, a_5}));
    `ifndef INTEL_SVA_OFF
        assert (b_5 == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_5 = b_5 >>> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_5 == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_5 = b_5 ^ 'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_5 == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_5 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_6 = 5'h11;
    b_6 = 6'h22;
    b_6 = b_6 + a_6;
    `ifndef INTEL_SVA_OFF
        assert (b_6 == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_6 = b_6 - a_6;
    `ifndef INTEL_SVA_OFF
        assert (b_6 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_6 = b_6 * 2;
    `ifndef INTEL_SVA_OFF
        assert (b_6 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_6 = b_6 / a_6;
    `ifndef INTEL_SVA_OFF
        assert (b_6 == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_6 = b_6 <<< (32'(signed'({1'b0, a_6}) - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_6 == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_6 = b_6 + (3'sd2 * signed'({1'b0, a_6}));
    `ifndef INTEL_SVA_OFF
        assert (b_6 == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_6 = b_6 >>> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_6 == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_6 = b_6 ^ 'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_6 == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_6 = 1;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_7 = 'h11;
    b_7 = 'h22;
    b_7 = b_7 + a_7;
    `ifndef INTEL_SVA_OFF
        assert (b_7 == 7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_7 = b_7 - a_7;
    `ifndef INTEL_SVA_OFF
        assert (b_7 == 7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_7 = b_7 * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (b_7 == 8'sh44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_7 = b_7 / a_7;
    `ifndef INTEL_SVA_OFF
        assert (b_7 == 4'sd4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_7 = b_7 <<< (9'(a_7 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_7 == 6'sh10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_7 = b_7 + (3'sd2 * a_7);
    `ifndef INTEL_SVA_OFF
        assert (b_7 == 7'sh32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_7 = b_7 >>> 2'sd1;
    `ifndef INTEL_SVA_OFF
        assert (b_7 == 6'sh19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_7 = b_7 ^ 6'sh10;
    `ifndef INTEL_SVA_OFF
        assert (b_7 == 5'sh9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (1)
    begin
        // Call neg_compound() begin
        a_8 = -6'sh11;
        b_8 = -7'sh22;
        b_8 = b_8 + a_8;
        `ifndef INTEL_SVA_OFF
            assert (b_8 == -7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_8 = b_8 - a_8;
        `ifndef INTEL_SVA_OFF
            assert (b_8 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_8 = b_8 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (b_8 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_8 = b_8 * 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_8 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_8 = b_8 + (-a_8);
        `ifndef INTEL_SVA_OFF
            assert (b_8 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_8 = b_8 / (-2'sd1);
        `ifndef INTEL_SVA_OFF
            assert (b_8 == 6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_8 = b_8 <<< 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_8 == 8'sh44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_8 = b_8 >>> 2'sd1;
        `ifndef INTEL_SVA_OFF
            assert (b_8 == 7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_8 = b_8 & 7'sh20;
        `ifndef INTEL_SVA_OFF
            assert (b_8 == 7'sh20) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_8 = b_8 | 3'sh2;
        `ifndef INTEL_SVA_OFF
            assert (b_8 == 7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        // Call neg_compound() end
    end
    // Call run_opers() end
    isSigned_7 = 1;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_9 = 'h11;
    b_9 = 'h22;
    b_9 = b_9 + a_9;
    `ifndef INTEL_SVA_OFF
        assert (b_9 == 7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_9 = b_9 - a_9;
    `ifndef INTEL_SVA_OFF
        assert (b_9 == 7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_9 = b_9 * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (b_9 == 8'sh44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_9 = b_9 / a_9;
    `ifndef INTEL_SVA_OFF
        assert (b_9 == 4'sd4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_9 = b_9 <<< (32'(a_9 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_9 == 6'sh10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_9 = b_9 + (3'sd2 * a_9);
    `ifndef INTEL_SVA_OFF
        assert (b_9 == 7'sh32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_9 = b_9 >>> 2'sd1;
    `ifndef INTEL_SVA_OFF
        assert (b_9 == 6'sh19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_9 = b_9 ^ 6'sh10;
    `ifndef INTEL_SVA_OFF
        assert (b_9 == 5'sh9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (1)
    begin
        // Call neg_compound() begin
        a_10 = -6'sh11;
        b_10 = -7'sh22;
        b_10 = b_10 + a_10;
        `ifndef INTEL_SVA_OFF
            assert (b_10 == -7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_10 = b_10 - a_10;
        `ifndef INTEL_SVA_OFF
            assert (b_10 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_10 = b_10 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (b_10 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_10 = b_10 * 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_10 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_10 = b_10 + (-a_10);
        `ifndef INTEL_SVA_OFF
            assert (b_10 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_10 = b_10 / (-2'sd1);
        `ifndef INTEL_SVA_OFF
            assert (b_10 == 6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_10 = b_10 <<< 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_10 == 8'sh44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_10 = b_10 >>> 2'sd1;
        `ifndef INTEL_SVA_OFF
            assert (b_10 == 7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_10 = b_10 & 7'sh20;
        `ifndef INTEL_SVA_OFF
            assert (b_10 == 7'sh20) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_10 = b_10 | 3'sh2;
        `ifndef INTEL_SVA_OFF
            assert (b_10 == 7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        // Call neg_compound() end
    end
    // Call run_opers() end
    isSigned_8 = 1;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_11 = 'h11;
    b_11 = 'h22;
    b_11 = b_11 + a_11;
    `ifndef INTEL_SVA_OFF
        assert (b_11 == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_11 = b_11 - a_11;
    `ifndef INTEL_SVA_OFF
        assert (b_11 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_11 = b_11 * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (b_11 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_11 = b_11 / a_11;
    `ifndef INTEL_SVA_OFF
        assert (b_11 == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_11 = b_11 <<< (32'(a_11 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_11 == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_11 = b_11 + (3'sd2 * a_11);
    `ifndef INTEL_SVA_OFF
        assert (b_11 == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_11 = b_11 >>> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_11 == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_11 = b_11 ^ 6'sh10;
    `ifndef INTEL_SVA_OFF
        assert (b_11 == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (1)
    begin
        // Call neg_compound() begin
        a_12 = -6'sh11;
        b_12 = -7'sh22;
        b_12 = b_12 + a_12;
        `ifndef INTEL_SVA_OFF
            assert (b_12 == -7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_12 = b_12 - a_12;
        `ifndef INTEL_SVA_OFF
            assert (b_12 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_12 = b_12 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (b_12 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_12 = b_12 * 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_12 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_12 = b_12 + (-a_12);
        `ifndef INTEL_SVA_OFF
            assert (b_12 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_12 = b_12 / (-2'sd1);
        `ifndef INTEL_SVA_OFF
            assert (b_12 == 'h11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_12 = b_12 <<< 2;
        `ifndef INTEL_SVA_OFF
            assert (b_12 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_12 = b_12 >>> 1;
        `ifndef INTEL_SVA_OFF
            assert (b_12 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_12 = b_12 & 7'sh20;
        `ifndef INTEL_SVA_OFF
            assert (b_12 == 'h20) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_12 = b_12 | 3'sh2;
        `ifndef INTEL_SVA_OFF
            assert (b_12 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        // Call neg_compound() end
    end
    // Call run_opers() end
    isSigned_9 = 1;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_13 = 'h11;
    b_13 = 'h22;
    b_13 = b_13 + a_13;
    `ifndef INTEL_SVA_OFF
        assert (b_13 == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_13 = b_13 - a_13;
    `ifndef INTEL_SVA_OFF
        assert (b_13 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_13 = b_13 * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (b_13 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_13 = b_13 / a_13;
    `ifndef INTEL_SVA_OFF
        assert (b_13 == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_13 = b_13 <<< (32'(a_13 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_13 == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_13 = b_13 + (3'sd2 * a_13);
    `ifndef INTEL_SVA_OFF
        assert (b_13 == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_13 = b_13 >>> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_13 == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_13 = b_13 ^ 6'sh10;
    `ifndef INTEL_SVA_OFF
        assert (b_13 == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (1)
    begin
        // Call neg_compound() begin
        a_14 = -6'sh11;
        b_14 = -7'sh22;
        b_14 = b_14 + a_14;
        `ifndef INTEL_SVA_OFF
            assert (b_14 == -7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_14 = b_14 - a_14;
        `ifndef INTEL_SVA_OFF
            assert (b_14 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_14 = b_14 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (b_14 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_14 = b_14 * 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_14 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_14 = b_14 + (-a_14);
        `ifndef INTEL_SVA_OFF
            assert (b_14 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_14 = b_14 / (-2'sd1);
        `ifndef INTEL_SVA_OFF
            assert (b_14 == 'h11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_14 = b_14 <<< 2;
        `ifndef INTEL_SVA_OFF
            assert (b_14 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_14 = b_14 >>> 1;
        `ifndef INTEL_SVA_OFF
            assert (b_14 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_14 = b_14 & 7'sh20;
        `ifndef INTEL_SVA_OFF
            assert (b_14 == 'h20) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_14 = b_14 | 3'sh2;
        `ifndef INTEL_SVA_OFF
            assert (b_14 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        // Call neg_compound() end
    end
    // Call run_opers() end
    isSigned_10 = 1;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_15 = 'h11;
    b_15 = 'h22;
    b_15 = b_15 + a_15;
    `ifndef INTEL_SVA_OFF
        assert (b_15 == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_15 = b_15 - a_15;
    `ifndef INTEL_SVA_OFF
        assert (b_15 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_15 = b_15 * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (b_15 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_15 = b_15 / a_15;
    `ifndef INTEL_SVA_OFF
        assert (b_15 == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_15 = b_15 << (32'(a_15 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_15 == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_15 = b_15 + (3'sd2 * a_15);
    `ifndef INTEL_SVA_OFF
        assert (b_15 == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_15 = b_15 >> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_15 == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_15 = b_15 ^ 6'sh10;
    `ifndef INTEL_SVA_OFF
        assert (b_15 == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (1)
    begin
        // Call neg_compound() begin
        a_16 = -6'sh11;
        b_16 = -7'sh22;
        b_16 = b_16 + a_16;
        `ifndef INTEL_SVA_OFF
            assert (b_16 == -7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_16 = b_16 - a_16;
        `ifndef INTEL_SVA_OFF
            assert (b_16 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_16 = b_16 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (b_16 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_16 = b_16 * 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_16 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_16 = b_16 + (-a_16);
        `ifndef INTEL_SVA_OFF
            assert (b_16 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_16 = b_16 / (-2'sd1);
        `ifndef INTEL_SVA_OFF
            assert (b_16 == 'h11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_16 = b_16 << 2;
        `ifndef INTEL_SVA_OFF
            assert (b_16 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_16 = b_16 >> 1;
        `ifndef INTEL_SVA_OFF
            assert (b_16 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_16 = b_16 & 7'sh20;
        `ifndef INTEL_SVA_OFF
            assert (b_16 == 'h20) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_16 = b_16 | 3'sh2;
        `ifndef INTEL_SVA_OFF
            assert (b_16 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        // Call neg_compound() end
    end
    // Call run_opers() end
    isSigned_11 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_17 = 6'sh11;
    b_17 = 6'h22;
    b_17 = b_17 + a_17;
    `ifndef INTEL_SVA_OFF
        assert (b_17 == 6'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_17 = b_17 - a_17;
    `ifndef INTEL_SVA_OFF
        assert (b_17 == 6'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_17 = b_17 * 2'd2;
    `ifndef INTEL_SVA_OFF
        assert (b_17 == 7'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_17 = b_17 / a_17;
    `ifndef INTEL_SVA_OFF
        assert (b_17 == 3'd4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_17 = b_17 << (17'(a_17 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_17 == 5'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_17 = b_17 + (3'sd2 * a_17);
    `ifndef INTEL_SVA_OFF
        assert (b_17 == 6'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_17 = b_17 >> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_17 == 5'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_17 = b_17 ^ 5'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_17 == 4'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_12 = 1;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_18 = 6'sh11;
    b_18 = 7'sh22;
    b_18 = b_18 + a_18;
    `ifndef INTEL_SVA_OFF
        assert (b_18 == 7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_18 = b_18 - a_18;
    `ifndef INTEL_SVA_OFF
        assert (b_18 == 7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_18 = b_18 * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (b_18 == 8'sh44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_18 = b_18 / a_18;
    `ifndef INTEL_SVA_OFF
        assert (b_18 == 4'sd4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_18 = b_18 << (32'(a_18 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_18 == 6'sh10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_18 = b_18 + (3'sd2 * a_18);
    `ifndef INTEL_SVA_OFF
        assert (b_18 == 7'sh32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_18 = b_18 >> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_18 == 6'sh19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_18 = b_18 ^ 6'sh10;
    `ifndef INTEL_SVA_OFF
        assert (b_18 == 5'sh9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (1)
    begin
        // Call neg_compound() begin
        a_19 = -6'sh11;
        b_19 = -7'sh22;
        b_19 = b_19 + a_19;
        `ifndef INTEL_SVA_OFF
            assert (b_19 == -7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_19 = b_19 - a_19;
        `ifndef INTEL_SVA_OFF
            assert (b_19 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_19 = b_19 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (b_19 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_19 = b_19 * 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_19 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_19 = b_19 + (-a_19);
        `ifndef INTEL_SVA_OFF
            assert (b_19 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_19 = b_19 / (-2'sd1);
        `ifndef INTEL_SVA_OFF
            assert (b_19 == 6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_19 = b_19 << 2;
        `ifndef INTEL_SVA_OFF
            assert (b_19 == 8'sh44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_19 = b_19 >> 1;
        `ifndef INTEL_SVA_OFF
            assert (b_19 == 7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_19 = b_19 & 7'sh20;
        `ifndef INTEL_SVA_OFF
            assert (b_19 == 7'sh20) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_19 = b_19 | 3'sh2;
        `ifndef INTEL_SVA_OFF
            assert (b_19 == 7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        // Call neg_compound() end
    end
    // Call run_opers() end
    isSigned_13 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_20 = 6'sh11;
    b_20 = 6'h22;
    b_20 = b_20 + a_20;
    `ifndef INTEL_SVA_OFF
        assert (b_20 == 6'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_20 = b_20 - a_20;
    `ifndef INTEL_SVA_OFF
        assert (b_20 == 6'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_20 = b_20 * 2'd2;
    `ifndef INTEL_SVA_OFF
        assert (b_20 == 7'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_20 = b_20 / a_20;
    `ifndef INTEL_SVA_OFF
        assert (b_20 == 3'd4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_20 = b_20 << (17'(a_20 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_20 == 5'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_20 = b_20 + (3'sd2 * a_20);
    `ifndef INTEL_SVA_OFF
        assert (b_20 == 6'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_20 = b_20 >> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_20 == 5'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_20 = b_20 ^ 5'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_20 == 4'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_14 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_21 = 'h11;
    b_21 = 6'h22;
    b_21 = b_21 + a_21;
    `ifndef INTEL_SVA_OFF
        assert (b_21 == 6'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_21 = b_21 - a_21;
    `ifndef INTEL_SVA_OFF
        assert (b_21 == 6'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_21 = b_21 * 2'd2;
    `ifndef INTEL_SVA_OFF
        assert (b_21 == 7'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_21 = b_21 / a_21;
    `ifndef INTEL_SVA_OFF
        assert (b_21 == 3'd4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_21 = b_21 <<< (32'(a_21 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_21 == 5'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_21 = b_21 + (3'sd2 * a_21);
    `ifndef INTEL_SVA_OFF
        assert (b_21 == 6'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_21 = b_21 >>> 1'd1;
    `ifndef INTEL_SVA_OFF
        assert (b_21 == 5'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_21 = b_21 ^ 5'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_21 == 4'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_15 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_22 = 5'h11;
    b_22 = 6'h22;
    b_22 = b_22 + a_22;
    `ifndef INTEL_SVA_OFF
        assert (b_22 == 6'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_22 = b_22 - a_22;
    `ifndef INTEL_SVA_OFF
        assert (b_22 == 6'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_22 = b_22 * 2'd2;
    `ifndef INTEL_SVA_OFF
        assert (b_22 == 7'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_22 = b_22 / a_22;
    `ifndef INTEL_SVA_OFF
        assert (b_22 == 3'd4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_22 = b_22 <<< (32'(a_22 - 4'hF));
    `ifndef INTEL_SVA_OFF
        assert (b_22 == 5'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_22 = b_22 + (2'd2 * a_22);
    `ifndef INTEL_SVA_OFF
        assert (b_22 == 6'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_22 = b_22 >>> 1'd1;
    `ifndef INTEL_SVA_OFF
        assert (b_22 == 5'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_22 = b_22 ^ 5'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_22 == 4'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_16 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_23 = 5'h11;
    b_23 = 6'h22;
    b_23 = b_23 + a_23;
    `ifndef INTEL_SVA_OFF
        assert (b_23 == 6'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_23 = b_23 - a_23;
    `ifndef INTEL_SVA_OFF
        assert (b_23 == 6'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_23 = b_23 * 2'd2;
    `ifndef INTEL_SVA_OFF
        assert (b_23 == 7'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_23 = b_23 / a_23;
    `ifndef INTEL_SVA_OFF
        assert (b_23 == 3'd4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_23 = b_23 <<< (32'(a_23 - 4'hF));
    `ifndef INTEL_SVA_OFF
        assert (b_23 == 5'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_23 = b_23 + (2'd2 * a_23);
    `ifndef INTEL_SVA_OFF
        assert (b_23 == 6'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_23 = b_23 >>> 1'd1;
    `ifndef INTEL_SVA_OFF
        assert (b_23 == 5'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_23 = b_23 ^ 5'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_23 == 4'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_17 = 1;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_24 = 'h11;
    b_24 = 'h22;
    b_24 = b_24 + a_24;
    `ifndef INTEL_SVA_OFF
        assert (b_24 == 7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_24 = b_24 - a_24;
    `ifndef INTEL_SVA_OFF
        assert (b_24 == 7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_24 = b_24 * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (b_24 == 8'sh44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_24 = b_24 / a_24;
    `ifndef INTEL_SVA_OFF
        assert (b_24 == 4'sd4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_24 = b_24 <<< (32'(a_24 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_24 == 6'sh10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_24 = b_24 + (3'sd2 * a_24);
    `ifndef INTEL_SVA_OFF
        assert (b_24 == 7'sh32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_24 = b_24 >>> 2'sd1;
    `ifndef INTEL_SVA_OFF
        assert (b_24 == 6'sh19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_24 = b_24 ^ 6'sh10;
    `ifndef INTEL_SVA_OFF
        assert (b_24 == 5'sh9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (1)
    begin
        // Call neg_compound() begin
        a_25 = -6'sh11;
        b_25 = -7'sh22;
        b_25 = b_25 + a_25;
        `ifndef INTEL_SVA_OFF
            assert (b_25 == -7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_25 = b_25 - a_25;
        `ifndef INTEL_SVA_OFF
            assert (b_25 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_25 = b_25 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (b_25 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_25 = b_25 * 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_25 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_25 = b_25 + (-a_25);
        `ifndef INTEL_SVA_OFF
            assert (b_25 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_25 = b_25 / (-2'sd1);
        `ifndef INTEL_SVA_OFF
            assert (b_25 == 6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_25 = b_25 <<< 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_25 == 8'sh44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_25 = b_25 >>> 2'sd1;
        `ifndef INTEL_SVA_OFF
            assert (b_25 == 7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_25 = b_25 & 7'sh20;
        `ifndef INTEL_SVA_OFF
            assert (b_25 == 7'sh20) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_25 = b_25 | 3'sh2;
        `ifndef INTEL_SVA_OFF
            assert (b_25 == 7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        // Call neg_compound() end
    end
    // Call run_opers() end
    isSigned_18 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_26 = 5'h11;
    b_26 = 'h22;
    b_26 = b_26 + signed'({1'b0, a_26});
    `ifndef INTEL_SVA_OFF
        assert (b_26 == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_26 = b_26 - signed'({1'b0, a_26});
    `ifndef INTEL_SVA_OFF
        assert (b_26 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_26 = b_26 * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (b_26 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_26 = b_26 / signed'({1'b0, a_26});
    `ifndef INTEL_SVA_OFF
        assert (b_26 == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_26 = b_26 <<< (32'(a_26 - 4'hF));
    `ifndef INTEL_SVA_OFF
        assert (b_26 == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_26 = b_26 + (signed'({1'b0, 2'd2 * a_26}));
    `ifndef INTEL_SVA_OFF
        assert (b_26 == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_26 = b_26 >>> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_26 == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_26 = b_26 ^ 6'sh10;
    `ifndef INTEL_SVA_OFF
        assert (b_26 == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_19 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_27 = 'h11;
    b_27 = 6'h22;
    b_27 = b_27 + a_27;
    `ifndef INTEL_SVA_OFF
        assert (b_27 == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_27 = b_27 - a_27;
    `ifndef INTEL_SVA_OFF
        assert (b_27 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_27 = b_27 * 2;
    `ifndef INTEL_SVA_OFF
        assert (b_27 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_27 = b_27 / a_27;
    `ifndef INTEL_SVA_OFF
        assert (b_27 == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_27 = b_27 <<< (32'(a_27 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_27 == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_27 = b_27 + (3'sd2 * a_27);
    `ifndef INTEL_SVA_OFF
        assert (b_27 == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_27 = b_27 >>> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_27 == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_27 = b_27 ^ 'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_27 == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_20 = 1;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_28 = 'h11;
    b_28 = 'h22;
    b_28 = b_28 + a_28;
    `ifndef INTEL_SVA_OFF
        assert (b_28 == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_28 = b_28 - a_28;
    `ifndef INTEL_SVA_OFF
        assert (b_28 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_28 = b_28 * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (b_28 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_28 = b_28 / a_28;
    `ifndef INTEL_SVA_OFF
        assert (b_28 == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_28 = b_28 <<< (32'(a_28 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_28 == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_28 = b_28 + (3'sd2 * a_28);
    `ifndef INTEL_SVA_OFF
        assert (b_28 == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_28 = b_28 >>> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_28 == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_28 = b_28 ^ 6'sh10;
    `ifndef INTEL_SVA_OFF
        assert (b_28 == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (1)
    begin
        // Call neg_compound() begin
        a_29 = -6'sh11;
        b_29 = -7'sh22;
        b_29 = b_29 + a_29;
        `ifndef INTEL_SVA_OFF
            assert (b_29 == -7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_29 = b_29 - a_29;
        `ifndef INTEL_SVA_OFF
            assert (b_29 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_29 = b_29 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (b_29 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_29 = b_29 * 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_29 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_29 = b_29 + (-a_29);
        `ifndef INTEL_SVA_OFF
            assert (b_29 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_29 = b_29 / (-2'sd1);
        `ifndef INTEL_SVA_OFF
            assert (b_29 == 'h11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_29 = b_29 <<< 2;
        `ifndef INTEL_SVA_OFF
            assert (b_29 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_29 = b_29 >>> 1;
        `ifndef INTEL_SVA_OFF
            assert (b_29 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_29 = b_29 & 7'sh20;
        `ifndef INTEL_SVA_OFF
            assert (b_29 == 'h20) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_29 = b_29 | 3'sh2;
        `ifndef INTEL_SVA_OFF
            assert (b_29 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        // Call neg_compound() end
    end
    // Call run_opers() end
    isSigned_21 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_30 = 5'h11;
    b_30 = 6'h22;
    b_30 = b_30 + a_30;
    `ifndef INTEL_SVA_OFF
        assert (b_30 == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_30 = b_30 - a_30;
    `ifndef INTEL_SVA_OFF
        assert (b_30 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_30 = b_30 * 2;
    `ifndef INTEL_SVA_OFF
        assert (b_30 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_30 = b_30 / a_30;
    `ifndef INTEL_SVA_OFF
        assert (b_30 == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_30 = b_30 <<< (32'(a_30 - 4'hF));
    `ifndef INTEL_SVA_OFF
        assert (b_30 == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_30 = b_30 + (2'd2 * a_30);
    `ifndef INTEL_SVA_OFF
        assert (b_30 == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_30 = b_30 >>> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_30 == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_30 = b_30 ^ 'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_30 == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_22 = 1;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_31 = 'h11;
    b_31 = 'h22;
    b_31 = b_31 + a_31;
    `ifndef INTEL_SVA_OFF
        assert (b_31 == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_31 = b_31 - a_31;
    `ifndef INTEL_SVA_OFF
        assert (b_31 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_31 = b_31 * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (b_31 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_31 = b_31 / a_31;
    `ifndef INTEL_SVA_OFF
        assert (b_31 == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_31 = b_31 <<< (32'(a_31 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_31 == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_31 = b_31 + (3'sd2 * a_31);
    `ifndef INTEL_SVA_OFF
        assert (b_31 == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_31 = b_31 >>> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_31 == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_31 = b_31 ^ 6'sh10;
    `ifndef INTEL_SVA_OFF
        assert (b_31 == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (1)
    begin
        // Call neg_compound() begin
        a_32 = -6'sh11;
        b_32 = -7'sh22;
        b_32 = b_32 + a_32;
        `ifndef INTEL_SVA_OFF
            assert (b_32 == -7'sh33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_32 = b_32 - a_32;
        `ifndef INTEL_SVA_OFF
            assert (b_32 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_32 = b_32 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (b_32 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_32 = b_32 * 3'sd2;
        `ifndef INTEL_SVA_OFF
            assert (b_32 == -7'sh22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_32 = b_32 + (-a_32);
        `ifndef INTEL_SVA_OFF
            assert (b_32 == -6'sh11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_32 = b_32 / (-2'sd1);
        `ifndef INTEL_SVA_OFF
            assert (b_32 == 'h11) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_32 = b_32 <<< 2;
        `ifndef INTEL_SVA_OFF
            assert (b_32 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_32 = b_32 >>> 1;
        `ifndef INTEL_SVA_OFF
            assert (b_32 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_32 = b_32 & 7'sh20;
        `ifndef INTEL_SVA_OFF
            assert (b_32 == 'h20) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        b_32 = b_32 | 3'sh2;
        `ifndef INTEL_SVA_OFF
            assert (b_32 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
        `endif // INTEL_SVA_OFF
        // Call neg_compound() end
    end
    // Call run_opers() end
    isSigned_23 = 0;
    // Call run_opers() begin
    // Call pos_compound() begin
    a_33 = 6'sh11;
    b_33 = 6'h22;
    b_33 = b_33 + a_33;
    `ifndef INTEL_SVA_OFF
        assert (b_33 == 'h33) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_33 = b_33 - a_33;
    `ifndef INTEL_SVA_OFF
        assert (b_33 == 'h22) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_33 = b_33 * 2;
    `ifndef INTEL_SVA_OFF
        assert (b_33 == 'h44) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_33 = b_33 / a_33;
    `ifndef INTEL_SVA_OFF
        assert (b_33 == 4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_33 = b_33 <<< (32'(a_33 - 5'shF));
    `ifndef INTEL_SVA_OFF
        assert (b_33 == 'h10) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_33 = b_33 + (3'sd2 * a_33);
    `ifndef INTEL_SVA_OFF
        assert (b_33 == 'h32) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_33 = b_33 >>> 1;
    `ifndef INTEL_SVA_OFF
        assert (b_33 == 'h19) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    b_33 = b_33 ^ 'h10;
    `ifndef INTEL_SVA_OFF
        assert (b_33 == 'h9) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_compound() end
    if (0)
    begin
    end
    // Call run_opers() end
end

//------------------------------------------------------------------------------
// Method process: short_operations (test_const_liter_compound.cpp:307:5) 

always_comb 
begin : short_operations     // test_const_liter_compound.cpp:307:5
    logic signed [15:0] l;
    logic signed [7:0] c;
    l = 2'sd1;
    l = l + 2'sd1;
    `ifndef INTEL_SVA_OFF
        assert (l == 2) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    l = l - 3'sd3;
    `ifndef INTEL_SVA_OFF
        assert (l == -2'sd1) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    l = l * (-6'sd31);
    `ifndef INTEL_SVA_OFF
        assert (l == 31) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    c = 6'sd23;
    c = c * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (c == -7'sd46) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    c = c + 6'sd20;
    `ifndef INTEL_SVA_OFF
        assert (c == -6'sd26) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: suffixes (test_const_liter_compound.cpp:330:5) 

always_comb 
begin : suffixes     // test_const_liter_compound.cpp:330:5
    integer i;
    integer unsigned u;
    logic signed [63:0] li;
    logic [63:0] lu;
    logic signed [63:0] lli;
    logic [63:0] llu;
    i = 12;
    u = 4'd12;
    li = 12;
    lu = 4'd12;
    lli = 12;
    llu = 4'd12;
    i = ~1'd0;
    `ifndef INTEL_SVA_OFF
        assert (i == 32'hFFFFFFFF) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    u = ~1'd0;
    `ifndef INTEL_SVA_OFF
        assert (u == 32'hFFFFFFFF) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    li = ~0;
    `ifndef INTEL_SVA_OFF
        assert (li == 64'hFFFFFFFFFFFFFFFF) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    lu = ~1'd0;
    `ifndef INTEL_SVA_OFF
        assert (lu == 64'hFFFFFFFFFFFFFFFF) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    lli = ~0;
    `ifndef INTEL_SVA_OFF
        assert (lli == 64'hFFFFFFFFFFFFFFFF) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    llu = ~1'd0;
    `ifndef INTEL_SVA_OFF
        assert (llu == 64'hFFFFFFFFFFFFFFFF) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    i = -31'sd1000000000;
    `ifndef INTEL_SVA_OFF
        assert (i == -31'sh3B9ACA00) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    u = 30'd1000000000;
    `ifndef INTEL_SVA_OFF
        assert (u == 30'h3B9ACA00) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    lu = 34'h2540BE400;
    `ifndef INTEL_SVA_OFF
        assert (lu == 34'h2540BE400) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    li = 34'h2540BE400;
    `ifndef INTEL_SVA_OFF
        assert (li == 34'h2540BE400) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    i = ~12;
    `ifndef INTEL_SVA_OFF
        assert (i == 32'hFFFFFFF3) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    u = ~4'd12;
    `ifndef INTEL_SVA_OFF
        assert (u == 32'hFFFFFFF3) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    lu = ~4'd12;
    `ifndef INTEL_SVA_OFF
        assert (lu == 64'hFFFFFFFFFFFFFFF3) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    li = ~12;
    `ifndef INTEL_SVA_OFF
        assert (li == 64'hFFFFFFFFFFFFFFF3) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    llu = ~4'd12;
    `ifndef INTEL_SVA_OFF
        assert (llu == 64'hFFFFFFFFFFFFFFF3) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    lli = ~12;
    `ifndef INTEL_SVA_OFF
        assert (lli == 64'hFFFFFFFFFFFFFFF3) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    i = 5'sd12 - 6'sd24;
    `ifndef INTEL_SVA_OFF
        assert (i == -5'sd12) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    u = 4'd12 - 3'd6;
    `ifndef INTEL_SVA_OFF
        assert (u == 3'd6) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    u = 4'd12 - 5'd24;
    `ifndef INTEL_SVA_OFF
        assert (u == 32'hFFFFFFF4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    lu = 4'd12 - 3'd6;
    `ifndef INTEL_SVA_OFF
        assert (lu == 3'd6) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    lu = 4'd12 - 5'd24;
    `ifndef INTEL_SVA_OFF
        assert (lu == 64'hFFFFFFFFFFFFFFF4) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    li = 5'sd12 - 6'sd24;
    `ifndef INTEL_SVA_OFF
        assert (li == -5'sd12) else $error("Assertion failed at test_const_liter_compound.cpp:53:24>");
    `endif // INTEL_SVA_OFF
    r0 = signed'({1'b0, i + u}) + li + lu;
end

endmodule


