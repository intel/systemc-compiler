//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.20
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// Variables generated for SystemC signals
logic [37:0] a;
logic [41:0] b;
logic signed [66:0] c;
logic [110:0] d;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .a(a),
  .b(b),
  .c(c),
  .d(d)
);

endmodule



//==============================================================================
//
// Module: A (test_cast.cpp:1139:5)
//
module A // "b_mod.a_mod"
(
    input logic [37:0] a,
    input logic [41:0] b,
    input logic signed [66:0] c,
    output logic [110:0] d
);

// Variables generated for SystemC signals
logic [3:0] s;
logic t0;
logic [31:0] t1a;
logic [31:0] t1b;
logic t2;
logic t3;
logic signed [31:0] is;
logic [31:0] us;
logic [14:0] xs;
logic [31:0] t1c;
logic signed [31:0] r1;

// Local parameters generated for C++ constants
localparam logic signed [31:0] M1 = 43;
localparam logic signed [31:0] M2 = 45;
localparam logic [15:0] C1 = 14;
localparam logic [31:0] CONST_A = 1;
localparam logic [31:0] CONST_Z = '0;

//------------------------------------------------------------------------------
// Method process: literals (test_cast.cpp:75:5) 

always_comb 
begin : literals     // test_cast.cpp:75:5
    integer i;
    integer unsigned u;
    logic [15:0] x;
    logic signed [15:0] y;
    logic [14:0] bx;
    logic signed [32:0] by;
    logic signed [69:0] bres;
    i = 10;
    u = 12;
    x = 14;
    y = 11;
    bx = 13;
    by = 12;
    bres = 0;
    bres = 12;
    bres = 12;
    bres = -5'sd12;
    bres = -5'sd12;
    bres = 33'h100000001;
    bres = 33'h100000001;
    bres = -34'sh100000001;
    bres = -34'sh100000001;
    bres = 64'sh4000000000000000 + 4;
    bres = (-64'sh4000000000000000) + 4;
    bres = 64'sh4000000000000000 + i;
    bres = 64'sh4000000000000000 + y;
    bres = 64'sh4000000000000000 + by;
    bres = 64'sh4000000000000000 + signed'({1'b0, u});
    bres = 63'h4000000000000000 + x;
    bres = 64'sh4000000000000000 + signed'({1'b0, bx});
    t0 = |32'(bres);
    t0 = |32'(bx);
    t0 = |32'(by);
end

//------------------------------------------------------------------------------
// Method process: errors (test_cast.cpp:108:5) 

always_comb 
begin : errors     // test_cast.cpp:108:5
    integer i;
    logic [15:0] x;
    integer unsigned u;
    logic signed [15:0] y;
    logic [14:0] bx;
    logic signed [32:0] by;
    logic signed [65:0] bres;
    logic [7:0] cu;
    logic [15:0] su;
    i = 10;
    x = 14;
    u = 12;
    y = 11;
    bx = 13;
    by = 12;
    bres = 0;
    bres = -C1 + by;
    bres = -u;
    bres = signed'({1'b0, u}) + by;
    bres = -u + by;
    bres = signed'({1'b0, u + x}) + by;
    bres = u - x + by;
    bres = x - u + x + by;
    bres = u - x + 1;
    cu = 12;
    su = 13;
    bres = signed'({1'b0, cu}) - signed'({1'b0, su}) + 1;
    bres = by + 34'sh100000000;
    `ifndef INTEL_SVA_OFF
        assert (bres == 33'h10000000C) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = by - 34'sh100000000;
    `ifndef INTEL_SVA_OFF
        assert (bres[63 : 0] == 64'hFFFFFFFF0000000C) else $error("Assertion failed at test_cast.cpp:137:9");
    `endif // INTEL_SVA_OFF
    bres = (3 - 5) + u;
    bres = (3 - 5) + by;
    bres = (3 - 5) + u;
    bres = (3 + (-4'sd5)) + u;
    bres = (3 - 5) + by;
    bres = (3 + (-4'sd5)) + by;
    bres = (-3'sd3) + u;
    bres = (-3'sd3) + by;
    bres = (-3'sd3) + by;
    bres = (-3'sd3) + by;
    bres = 3 + by;
    bres = -(~3) + by;
    bres = (|s ? 3 : -4'sd5) + by;
    bres = (|s ? 3 : -4'sd5) + by;
    bres = (|s ? 3 : -4'sd5) + by;
    bres = (|s ? 3 : -4'sd5) + by;
    bres = signed'({1'b0, i * x}) + by;
    bres = -signed'({1'b0, bx});
    `ifndef INTEL_SVA_OFF
        assert (bres == -5'sd13) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -signed'({1'b0, bx}) + by;
    `ifndef INTEL_SVA_OFF
        assert (bres == -2'sd1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = signed'({1'b0, bx}) + by;
    bres = signed'({1'b0, bx}) - by;
    bres = signed'({1'b0, bx}) - signed'({1'b0, x});
    bres = -signed'({1'b0, bx}) + y;
    `ifndef INTEL_SVA_OFF
        assert (bres == -3'sd2) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -signed'({1'b0, bx}) + i;
    `ifndef INTEL_SVA_OFF
        assert (bres == -3'sd3) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -signed'({1'b0, bx}) + signed'({1'b0, u});
    `ifndef INTEL_SVA_OFF
        assert (bres == -2'sd1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -signed'({1'b0, bx}) / i;
    `ifndef INTEL_SVA_OFF
        assert (bres == -2'sd1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -signed'({1'b0, bx}) / y;
    `ifndef INTEL_SVA_OFF
        assert (bres == -2'sd1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -signed'({1'b0, bx}) / by;
    `ifndef INTEL_SVA_OFF
        assert (bres == -2'sd1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -signed'({1'b0, bx}) * i;
    `ifndef INTEL_SVA_OFF
        assert (bres == -9'sd130) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -signed'({1'b0, bx}) * y;
    `ifndef INTEL_SVA_OFF
        assert (bres == -9'sd143) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -x + by;
    bres = -x + y;
    bres = 34'(-x + by) / i;
    bres = 17'(-x + y) / i;
    bres = x - x;
    bres = signed'({1'b0, bx}) - signed'({1'b0, x});
    bres = signed'({1'b0, bx}) - 1;
    bres = signed'({1'b0, x}) - signed'({1'b0, bx});
    bres = bx - bx;
    bres = bx + (-x);
    bres = bx + x;
    bres = bx * x;
    bres = bx / x;
    bres = (u - x) + by;
    bres = signed'({1'b0, (u + x)}) + by;
    bres = (signed'({1'b0, u}) + y) + by;
    bres = 17'((-3'sd2) - signed'({1'b0, bx}) + y) / 2;
    bres = 1 - signed'({1'b0, bx});
    `ifndef INTEL_SVA_OFF
        assert (bres == -5'sd12) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -signed'({1'b0, bx}) + 1;
    `ifndef INTEL_SVA_OFF
        assert (bres == -5'sd12) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -signed'({1'b0, bx}) / 2;
    `ifndef INTEL_SVA_OFF
        assert (bres == -4'sd6) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = signed'({1'b0, bx}) / (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (bres == -4'sd6) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -signed'({1'b0, bx}) * 2;
    `ifndef INTEL_SVA_OFF
        assert (bres == -6'sd26) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = by - signed'({1'b0, bx});
    `ifndef INTEL_SVA_OFF
        assert (bres == -2'sd1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = -signed'({1'b0, bx}) - by;
    `ifndef INTEL_SVA_OFF
        assert (bres == -6'sd25) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = y - signed'({1'b0, bx});
    `ifndef INTEL_SVA_OFF
        assert (bres == -3'sd2) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = i - signed'({1'b0, bx});
    `ifndef INTEL_SVA_OFF
        assert (bres == -3'sd3) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: warnings (test_cast.cpp:228:5) 

always_comb 
begin : warnings     // test_cast.cpp:228:5
    integer i;
    integer unsigned u;
    logic [14:0] x;
    logic [14:0] bx;
    logic signed [14:0] y;
    logic signed [14:0] by;
    logic [63:0] ul;
    logic signed [63:0] res;
    logic signed [65:0] bres;
    i = 13;
    u = 13;
    x = 13;
    bx = 13;
    y = 13;
    by = 13;
    ul = 23;
    bres = 0;
    res = u + i;
    res = x + y;
    bres = signed'({1'b0, bx}) + by;
    u = signed'({1'b0, u}) + y;
    u = u + y;
    u = u + i;
    u = u + 12'(i);
    u = u - y;
    x = x * i;
    x = x / y;
    bx = bx % i;
    bx = bx & y;
    bx = bx | by;
    res = u / (-3'sd2);
    u = u / (-3'sd2);
    res = (-3'sd2) / ul;
    res = (-3'sd2) % x;
    x = x % (-3'sd2);
    bres = signed'({1'b0, bx}) / (-3'sd2);
    bres = 16'(signed'({1'b0, bx}) + 1) % (-3'sd2);
    i = -3'sd3;
    y = -5'sd14;
    by = -7'sd32;
    t0 = |res;
    t0 = |32'(bres);
    t0 = |32'(bx);
    t0 = |32'(by);
end

//------------------------------------------------------------------------------
// Method process: shift_signed_warnings (test_cast.cpp:288:5) 

always_comb 
begin : shift_signed_warnings     // test_cast.cpp:288:5
    integer i;
    integer unsigned u;
    logic [15:0] x;
    logic signed [15:0] y;
    logic [63:0] ures;
    i = 2;
    u = 2;
    x = 2;
    y = 2;
    ures = i >>> u;
    t1a = ures;
    ures = 32'(i) >>> u;
    t1a = ures;
    ures = y >>> x;
    t1a = ures;
    ures = 32'(y) >>> x;
    t1a = ures;
end

//------------------------------------------------------------------------------
// Method process: unary_cast (test_cast.cpp:308:5) 

always_comb 
begin : unary_cast     // test_cast.cpp:308:5
    integer i;
    integer unsigned u;
    logic [14:0] x;
    logic [14:0] bx;
    logic signed [14:0] y;
    logic signed [14:0] by;
    logic [63:0] ul;
    logic signed [63:0] res;
    logic signed [65:0] bres;
    i = 13;
    u = 13;
    x = 13;
    bx = 13;
    y = 13;
    by = 13;
    ul = 13;
    bres = 0;
    res = -5'sd10;
    res = -u;
    res = -u + u;
    res = -x;
    t1b = res;
    bres = -signed'({1'b0, bx});
    bres = -signed'({1'b0, bx}) + 1;
    bres = -signed'({1'b0, bx}) + signed'({1'b0, u});
    bres = -signed'({1'b0, bx}) + signed'({1'b0, x});
    bres = -signed'({1'b0, bx}) + y;
    bres = -signed'({1'b0, bx}) + by;
    bres = bx--;
    bres = signed'({1'b0, bx--}) + by--;
    t1b = 32'(bres);
    bres = y - signed'({1'b0, (++bx)});
    bres = y - signed'({1'b0, bx++});
    bres = signed'({1'b0, x + y}) - signed'({1'b0, bx++});
    res = 32'(u);
    res = 32'(u);
    res = -signed'(32'(u));
    res = i + signed'(32'(u));
    res = i + signed'(32'(u));
    res = i + (-signed'(32'(u)));
    res = y + signed'(32'(u));
    res = y + signed'(32'(u));
    res = y + (-signed'(32'(u)));
    t1b = res;
    bres = by + signed'(32'(u));
    bres = by + signed'(32'(u));
    bres = by + (-signed'(32'(u)));
    res = signed'({1'b0, 32'(~u)}) + y;
    bres = by - signed'({1'b0, 64'(~x)});
    res = (++i) + (u++);
    bres = signed'({1'b0, (--bx)}) + (by++);
    res = -u;
    res = i + (-u);
    ul = -u;
    ul = u + (-u);
    t1b = ul;
    by = by + (-signed'({1'b0, bx}));
    by = -signed'({1'b0, bx});
    bx = bx + (-signed'({1'b0, bx}));
    bx = -signed'({1'b0, bx});
    t1b = 32'(bx);
end

//------------------------------------------------------------------------------
// Method process: binary_comparison_pos (test_cast.cpp:378:5) 

always_comb 
begin : binary_comparison_pos     // test_cast.cpp:378:5
    integer i;
    logic [15:0] ut;
    integer unsigned u;
    logic [14:0] x;
    logic [14:0] bx;
    logic signed [14:0] y;
    logic signed [14:0] by;
    logic signed [63:0] ll;
    logic [63:0] ul;
    logic b_1;
    integer unsigned uu;
    i = 13;
    ut = 13;
    u = 13;
    x = 13;
    bx = 13;
    y = 13;
    by = 13;
    ll = 13;
    ul = 13;
    b_1 = u == 0;
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = x != 13;
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = x < 42;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = bx > 10;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = u == i;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = x == y;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = ut == u;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = bx == by;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = bx == ll;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = x == by;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = u == 32'(i);
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = x == 32'(y);
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = x == 15'(y);
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = signed'(32'(u)) == i;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = signed'(32'(x)) == y;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = signed'(15'(x)) == y;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    u++;
    `ifndef INTEL_SVA_OFF
        assert (u != by) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (ll != signed'({1'b0, u})) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (bx != u) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    by--;
    `ifndef INTEL_SVA_OFF
        assert (by != bx) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (ul != by) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (y != by) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    u = 13;
    y = 13;
    ll = 13;
    b_1 = signed'({1'b0, u}) == y;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = signed'({1'b0, u}) == ll;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    uu = signed'({1'b0, u}) + y;
    `ifndef INTEL_SVA_OFF
        assert (uu == 26) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: binary_comparison_neg (test_cast.cpp:452:5) 

always_comb 
begin : binary_comparison_neg     // test_cast.cpp:452:5
    integer i;
    logic [15:0] ut;
    integer unsigned u;
    logic [14:0] x;
    logic [14:0] bx;
    logic signed [14:0] y;
    logic signed [14:0] by;
    logic signed [63:0] ll;
    logic [63:0] ul;
    logic b_1;
    logic signed [31:0] yy;
    i = -5'sd13;
    ut = -5'sd13;
    u = -5'sd13;
    x = -5'sd13;
    bx = -5'sd13;
    y = -5'sd13;
    by = -5'sd13;
    ll = -5'sd13;
    ul = -5'sd13;
    b_1 = u == 0;
    b_1 = x != -5'sd13;
    b_1 = x > -7'sd42;
    b_1 = bx < -5'sd10;
    b_1 = u == i;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = x == i;
    b_1 = x == y;
    b_1 = x == by;
    b_1 = u == i;
    b_1 = u == by;
    b_1 = ut == u;
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = bx == by;
    b_1 = bx == ll;
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = x == by;
    b_1 = u == 32'(i);
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = x == 32'(y);
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = x == 15'(y);
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = signed'(32'(u)) == i;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = signed'(32'(x)) == y;
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = signed'(15'(x)) == y;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    u++;
    `ifndef INTEL_SVA_OFF
        assert (u != by) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (ll != signed'({1'b0, u})) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (bx != u) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    by--;
    `ifndef INTEL_SVA_OFF
        assert (by != bx) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (ul != by) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (y != by) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    ll = -5'sd13;
    yy = -5'sd13;
    u = 32'hFFFFFFF3;
    b_1 = signed'({1'b0, u}) == yy;
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = signed'({1'b0, u}) == ll;
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    u = 32'hFFFFFFFC;
    b_1 = u == 32'hFFFFFFFC;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = signed'({1'b0, u}) == 32'hFFFFFFFC;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: binary_shift (test_cast.cpp:534:5) 

always_comb 
begin : binary_shift     // test_cast.cpp:534:5
    integer i;
    integer unsigned u;
    logic [14:0] x;
    logic [14:0] bx;
    logic signed [14:0] by;
    logic signed [63:0] res;
    logic signed [63:0] res2;
    integer ires;
    integer ires2;
    i = 3;
    u = 3;
    x = 3;
    bx = 3;
    by = 3;
    res = 1 <<< u;
    res = 1 <<< x;
    res = 1 <<< 32'(bx);
    res = 1 <<< 32'(i);
    res = u <<< 32'(by);
    res = 32'(i) <<< u;
    res = 1 <<< i;
    res = 1 <<< u;
    res = (1 <<< i) + u;
    res = (1 <<< u) + u;
    u = 31;
    res = 1 <<< u;
    res2 = 1 <<< u;
    ires = 1 <<< u;
    ires2 = 1 <<< u;
    `ifndef INTEL_SVA_OFF
        assert (ires == ires2) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    t2 = |res;
    t2 = |res2;
    t2 = |ires;
end

//------------------------------------------------------------------------------
// Method process: explicit_cast_required (test_cast.cpp:574:5) 

always_comb 
begin : explicit_cast_required     // test_cast.cpp:574:5
    logic signed [63:0] res;
    logic [63:0] ures;
    integer unsigned u;
    integer i;
    u = 32'hF000A001;
    res = 32'(u);
    i = -5'sd10;
    ures = 32'(i);
    ures = 32'(i) + u;
    res = i + signed'(32'(u));
    t3 = |res;
    t3 = |ures;
    t2 = |i;
end

//------------------------------------------------------------------------------
// Method process: cast_to_unsigned (test_cast.cpp:600:5) 

always_comb 
begin : cast_to_unsigned     // test_cast.cpp:600:5
    integer i;
    logic [15:0] ut;
    integer unsigned u;
    logic [14:0] x;
    logic [14:0] bx;
    logic signed [14:0] y;
    logic signed [14:0] by;
    logic signed [63:0] ll;
    logic [63:0] ul;
    logic signed [63:0] res;
    logic signed [65:0] bres;
    i = -5'sd13;
    ut = 12;
    u = -5'sd12;
    x = 12;
    bx = 12;
    y = -5'sd13;
    by = -5'sd11;
    ll = -8'sd112;
    ul = 113;
    bres = 0;
    res = 32'(i);
    res = 12'(i);
    res = 32'(u);
    res = 6'(ul);
    res = 32'(i);
    res = 32'(y);
    res = 32'(i) + 32'(y);
    res = 32'(x);
    res = signed'(32'(u)) + signed'(32'(x));
    res = signed'(16'(x)) + 64'(y);
    res = x + 32'(i);
    res = y + signed'({1'b0, 32'(i)});
    res = i + 32'(i);
    res = u + 32'(i);
    res = ut + 32'(i);
    res = ll + signed'({1'b0, 32'(i)});
    res = 32'(u) + x;
    res = u + 32'(x);
    res = signed'(32'(u)) + y;
    res = i + signed'(32'(x));
    res = 32'(x) + x;
    res = signed'({1'b0, 32'(x)}) + i;
    res = 32'(xs) + xs;
    res = signed'({1'b0, 32'(xs)}) + is;
    res = 12'(i) + signed'({1'b0, ut});
    res = 12'(i) + signed'({1'b0, u});
    res = 12'(i) + ul;
    res = 12'(y) + x;
    res = is + us;
    res = 12'(is) + signed'({1'b0, us});
    res = 12'(is) + xs;
    res = 32'(i) + signed'({1'b0, ut});
    res = 32'(i) + u;
    res = 64'(i) + signed'({1'b0, u});
    res = 64'(i) + x;
    res = x + i;
    res = x & i;
    res = 10 - x;
    `ifndef INTEL_SVA_OFF
        assert (res == -3'sd2) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = 10 - signed'({1'b0, bx});
    `ifndef INTEL_SVA_OFF
        assert (bres == -3'sd2) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = (-5'sd10) * signed'({1'b0, bx});
    `ifndef INTEL_SVA_OFF
        assert (bres == -8'sd120) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = 10 + by;
    `ifndef INTEL_SVA_OFF
        assert (bres == -2'sd1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = 10 - x;
    `ifndef INTEL_SVA_OFF
        assert (bres[63 : 0] == 64'hFFFFFFFFFFFFFFFE) else $error("Assertion failed at test_cast.cpp:685:9");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: cast_to_unsigned32 (test_cast.cpp:688:5) 

always_comb 
begin : cast_to_unsigned32     // test_cast.cpp:688:5
    integer i;
    logic [14:0] x;
    logic [14:0] bx;
    logic signed [14:0] y;
    logic signed [14:0] by;
    logic [63:0] ul;
    integer res;
    logic signed [31:0] bres;
    i = -5'sd13;
    x = 12;
    bx = 12;
    y = -5'sd13;
    by = -5'sd11;
    ul = 113;
    bres = 0;
    res = 32'(i);
    res = 12'(i);
    res = 6'(ul);
    res = i + 1;
    res = i + 32'sd1;
    res = i + 4'sd1;
    res = y + 1;
    res = y + 4'd1;
    bres = y + 4'sd1;
    bres = y + 4'sd1;
    res = 10 - x;
    `ifndef INTEL_SVA_OFF
        assert (res == -3'sd2) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = 10 - signed'({1'b0, bx});
    `ifndef INTEL_SVA_OFF
        assert (bres == -3'sd2) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = (-5'sd10) * signed'({1'b0, bx});
    `ifndef INTEL_SVA_OFF
        assert (bres == -8'sd120) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = 10 + by;
    `ifndef INTEL_SVA_OFF
        assert (bres == -2'sd1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bres = 10 - x;
    `ifndef INTEL_SVA_OFF
        assert (bres == -3'sd2) else $error("Assertion failed at test_cast.cpp:726:9");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: cast_to_unsigned_compound (test_cast.cpp:729:5) 

always_comb 
begin : cast_to_unsigned_compound     // test_cast.cpp:729:5
    integer i;
    integer unsigned u;
    logic [14:0] x;
    logic [14:0] bx;
    logic signed [14:0] y;
    logic signed [14:0] by;
    logic signed [63:0] ll;
    i = -5'sd13;
    u = 12;
    x = 12;
    bx = 12;
    y = -5'sd13;
    by = -5'sd11;
    ll = -8'sd112;
    x = x + i;
    `ifndef INTEL_SVA_OFF
        assert (x == 32767) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    bx = bx * i;
    `ifndef INTEL_SVA_OFF
        assert (bx == 32612) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    x = x + 32'(i);
    y = y + signed'({1'b0, 32'(i)});
    i = i + signed'({1'b0, 32'(i)});
    u = u + 32'(i);
    ll = ll + signed'({1'b0, 32'(i)});
    bx = bx + 32'(i);
    x = x + 32'(u);
    bx = bx + y;
    bx = bx + x;
    bx = bx + 32'(y);
    bx = bx + signed'(32'(x));
    u = u - 32'(x);
    bx = bx - signed'({1'b0, 32'(x)});
    u = u + 12'(i);
    i = i + 12'(i);
    x = x + 12'(i);
    y = y + 12'(i);
    bx = bx + 12'(i);
    by = by + 12'(i);
    bx = bx - 64'(i);
    by = by - 64'(i);
    bx = bx - i;
    bx = signed'({1'b0, bx}) - i;
    bx = bx * by;
    bx = signed'({1'b0, bx}) * by;
    bx = bx / ll;
    by = by + signed'({1'b0, u});
    by = by + signed'({1'b0, bx});
    x = x | i;
    u = u | i;
    bx = bx & ll;
end

//------------------------------------------------------------------------------
// Method process: cast_to_unsigned_unary (test_cast.cpp:791:5) 

always_comb 
begin : cast_to_unsigned_unary     // test_cast.cpp:791:5
    integer i;
    integer unsigned u;
    logic [14:0] x;
    logic [14:0] bx;
    logic signed [14:0] by;
    logic signed [63:0] ll;
    logic signed [63:0] res;
    logic signed [65:0] bres;
    i = -5'sd13;
    u = 12;
    x = 12;
    bx = 12;
    by = -5'sd11;
    ll = -8'sd112;
    bres = 0;
    res = i;
    res = u--;
    res = (++i) + x;
    t1c = res;
    bres = (x++) + ll;
    bres = signed'({1'b0, (u--)}) + by;
    bres = signed'({1'b0, (bx--)}) + by;
    t1c = 32'(bres);
    res = 32'(i);
    res = -32'(i);
    t1c = res;
    bres = (-signed'(32'(u))) + signed'({1'b0, bx});
    bres = (-signed'(32'(u))) + by;
    t1c = 32'(bres);
end

//------------------------------------------------------------------------------
// Method process: unsigned_binary_overflow (test_cast.cpp:824:5) 

always_comb 
begin : unsigned_binary_overflow     // test_cast.cpp:824:5
    integer i;
    integer unsigned u;
    logic signed [63:0] ll;
    logic signed [63:0] res;
    i = -5'sd13;
    u = 12;
    ll = -8'sd112;
    res = i + ll;
    res = i + u;
    `ifndef INTEL_SVA_OFF
        assert (res == 32'hFFFFFFFF) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    res = 10 - u;
    res = i + u + 100;
    res = i * u;
end

//------------------------------------------------------------------------------
// Method process: const_cast_for_variable (test_cast.cpp:858:5) 

always_comb 
begin : const_cast_for_variable     // test_cast.cpp:858:5
    integer i;
    integer j;
    `ifndef INTEL_SVA_OFF
        assert (M1 == 43) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (M2 == 45) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    i = M1;
    j = 32'(i);
    r1 = j + 1;
end

//------------------------------------------------------------------------------
// Method process: cond_const (test_cast.cpp:871:5) 

always_comb 
begin : cond_const     // test_cast.cpp:871:5
    logic b_1;
    logic [7:0] c_1;
    b_1 = 1;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = 1;
    c_1 = 2;
    `ifndef INTEL_SVA_OFF
        assert (signed'({1'b0, c_1}) == 2) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    c_1 = 8'd2;
end

//------------------------------------------------------------------------------
// Method process: bool_cast (test_cast.cpp:883:5) 

always_comb 
begin : bool_cast     // test_cast.cpp:883:5
    logic b_1;
    integer i;
    b_1 = 1;
    b_1 = !b_1;
    i = 2;
    i = ~i;
    b_1 = |i;
end

//------------------------------------------------------------------------------
// Method process: const_bool_type_cast (test_cast.cpp:894:5) 

always_comb 
begin : const_bool_type_cast     // test_cast.cpp:894:5
    logic b_1;
    logic [7:0] c_1;
    integer unsigned i;
    c_1 = 2;
    b_1 = |c_1;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = 1;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    c_1 = 0;
    b_1 = |c_1;
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    i = 65536;
    b_1 = |i;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b_1 = 1;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    i = 0;
    b_1 = |i;
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: const_cpp_type_cast (test_cast.cpp:924:5) 

always_comb 
begin : const_cpp_type_cast     // test_cast.cpp:924:5
    logic [7:0] c_1;
    logic [15:0] s_1;
    integer unsigned i;
    logic [63:0] l;
    c_1 = 1;
    `ifndef INTEL_SVA_OFF
        assert (signed'({1'b0, c_1}) == 1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    s_1 = 257;
    c_1 = s_1;
    `ifndef INTEL_SVA_OFF
        assert (signed'({1'b0, c_1}) == 1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    l = 64'd1 <<< 32;
    `ifndef INTEL_SVA_OFF
        assert (l == 33'h100000000) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    i = l + 1;
    `ifndef INTEL_SVA_OFF
        assert (i == 1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    i = 1;
    `ifndef INTEL_SVA_OFF
        assert (i == 1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    i = 1;
    `ifndef INTEL_SVA_OFF
        assert (i == 1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    i = signed'({1'b0, 8'(s_1)}) + 1;
    `ifndef INTEL_SVA_OFF
        assert (i == 2) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: var_cpp_type_cast (test_cast.cpp:950:5) 

always_comb 
begin : var_cpp_type_cast     // test_cast.cpp:950:5
    logic [7:0] c_1;
    logic [15:0] s_1;
    integer unsigned i;
    logic [63:0] l;
    l = 64'hAAAABBBBCCCCDDEE;
    i = l;
    s_1 = i;
    c_1 = s_1;
    `ifndef INTEL_SVA_OFF
        assert (l == 64'hAAAABBBBCCCCDDEE) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (i == 32'hCCCCDDEE) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (signed'({1'b0, s_1}) == 'hDDEE) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (signed'({1'b0, c_1}) == 'hEE) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: const_cpp_ref_impl_cast (test_cast.cpp:968:5) 

always_comb 
begin : const_cpp_ref_impl_cast     // test_cast.cpp:968:5
    logic [15:0] s_1;
    logic [7:0] c_1;
    s_1 = 257;
    c_1 = s_1;
    `ifndef INTEL_SVA_OFF
        assert (signed'({1'b0, c_1}) == 1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (signed'({1'b0, s_1}) == 257) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    c_1 = signed'({1'b0, s_1}) + 1;
    `ifndef INTEL_SVA_OFF
        assert (signed'({1'b0, c_1}) == 2) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: const_cpp_ref_expl_cast (test_cast.cpp:981:5) 

always_comb 
begin : const_cpp_ref_expl_cast     // test_cast.cpp:981:5
    logic [15:0] s_1;
    integer unsigned j;
    s_1 = 257;
    j = 8'(s_1);
    `ifndef INTEL_SVA_OFF
        assert (j == 1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (signed'({1'b0, s_1}) == 257) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    j = signed'({1'b0, 8'(s_1)}) + 1;
    `ifndef INTEL_SVA_OFF
        assert (j == 2) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: var_cpp_expl_cast (test_cast.cpp:994:5) 

always_comb 
begin : var_cpp_expl_cast     // test_cast.cpp:994:5
    integer unsigned u;
    logic [15:0] s_1;
    logic [32:0] ux;
    logic [3:0] bu;
    logic signed [3:0] ix;
    logic signed [3:0] bi;
    integer i;
    ux = 33'h1C0000000;
    bu = 0;
    ix = 0;
    bi = 0;
    i = 32'(ux);
    `ifndef INTEL_SVA_OFF
        assert (i == 32'hC0000000) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    i = signed'({1'b0, 32'(ux)}) + 1;
    `ifndef INTEL_SVA_OFF
        assert (i == 32'hC0000001) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    i = signed'(32'(s_1)) + 1;
    i = signed'(32'(u)) + 1;
    i = signed'(32'(ux)) + signed'({1'b0, 32'(ux)}) + signed'({1'b0, 32'(bu)});
    i = 32'(ux);
    i = 32'(bu);
    i = 32'(ix) + 32'(ix) + 32'(bi);
    i = 32'(ix);
    i = 64'(ix);
    i = 64'(ix);
    i = 32'(ix);
    i = 64'(ix);
    i = 64'(ix);
    i = 32'(bi);
    i = 64'(bi);
    i = 64'(bi);
    i = 32'(bi);
    i = 64'(bi);
    i = 64'(bi);
end

//------------------------------------------------------------------------------
// Method process: const_sc_type_cast (test_cast.cpp:1033:5) 

always_comb 
begin : const_sc_type_cast     // test_cast.cpp:1033:5
    logic [3:0] x;
    logic [2:0] y;
    logic signed [4:0] sx;
    logic signed [2:0] sy;
    logic [4:0] z;
    integer unsigned i;
    logic signed [4:0] sz;
    x = 12;
    y = x;
    `ifndef INTEL_SVA_OFF
        assert (y == 4) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    sx = -4'sd7;
    sy = sx;
    `ifndef INTEL_SVA_OFF
        assert (sy == 1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    z = 3'(x);
    `ifndef INTEL_SVA_OFF
        assert (z == 4) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    z = 3'(x + 1);
    `ifndef INTEL_SVA_OFF
        assert (z == 5) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    z = 3'd13;
    `ifndef INTEL_SVA_OFF
        assert (z == 5) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    z = 2'd15;
    `ifndef INTEL_SVA_OFF
        assert (z == 3) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    i = 14;
    z = 2'(i);
    `ifndef INTEL_SVA_OFF
        assert (z == 2) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    sz = 0;
    sz = 3'(sx);
    `ifndef INTEL_SVA_OFF
        assert (sz == 1) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    sz = -3'sd13;
    `ifndef INTEL_SVA_OFF
        assert (sz == 3) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: var_sc_type_cast (test_cast.cpp:1069:5) 

always_comb 
begin : var_sc_type_cast     // test_cast.cpp:1069:5
    logic [7:0] u1;
    logic [15:0] u2;
    logic [31:0] b1;
    logic [47:0] b2;
    integer unsigned i;
    logic [63:0] l;
    u1 = 0;
    u2 = 0;
    b1 = 0;
    b2 = 0;
    i = 32'hAAAABBCD;
    l = 64'hAAAABBBBCCCCDDEE;
    u1 = i;
    `ifndef INTEL_SVA_OFF
        assert (u1 == 'hCD) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    u1 = l;
    `ifndef INTEL_SVA_OFF
        assert (u1 == 'hEE) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    u2 = i;
    `ifndef INTEL_SVA_OFF
        assert (u2 == 'hBBCD) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    u2 = l;
    `ifndef INTEL_SVA_OFF
        assert (u2 == 'hDDEE) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b1 = i;
    `ifndef INTEL_SVA_OFF
        assert (b1 == 32'hAAAABBCD) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b1 = l;
    `ifndef INTEL_SVA_OFF
        assert (b1 == 32'hCCCCDDEE) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b2 = i;
    `ifndef INTEL_SVA_OFF
        assert (b2 == 32'hAAAABBCD) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
    b2 = l;
    `ifndef INTEL_SVA_OFF
        assert (b2 == 48'hBBBBCCCCDDEE) else $error("Assertion failed at test_cast.cpp:70:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: multi_sc_type_cast (test_cast.cpp:1099:5) 
// Empty process, no code generated 

//------------------------------------------------------------------------------
// Method process: read_to_int (test_cast.cpp:1122:5) 

always_comb 
begin : read_to_int     // test_cast.cpp:1122:5
    d = signed'({1'b0, 32'(a)}) + signed'({1'b0, 32'(b)}) + 32'(c) / 4;
end

endmodule


