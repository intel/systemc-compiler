//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.25
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// Variables generated for SystemC signals
logic a;
logic b;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .a(a),
  .b(b)
);

endmodule



//==============================================================================
//
// Module: A (test_binary_signed.cpp:1243:5)
//
module A // "b_mod.a_mod"
(
    input logic a,
    output logic b
);

// Variables generated for SystemC signals
logic [31:0] s;
logic z;
logic [15:0] sa;
logic [15:0] sb;
logic signed [31:0] t0;
logic signed [31:0] t1;
logic signed [31:0] t2;
logic signed [31:0] t3;
logic signed [63:0] tt;
logic [69:0] sbu1;
logic [69:0] sbu2;
logic [31:0] tt2;

// Local parameters generated for C++ constants
localparam logic signed [31:0] S1 = 2;
localparam logic [31:0] S2 = 2;
localparam logic [31:0] U1 = 2;
localparam logic [31:0] U2 = 2;

//------------------------------------------------------------------------------
// Method process: github_16 (test_binary_signed.cpp:68:5) 

always_comb 
begin : github_16     // test_binary_signed.cpp:68:5
    logic [15:0] ua;
    logic [15:0] ub;
    logic [15:0] usa;
    logic [15:0] usb;
    logic [15:0] result;
    logic [15:0] us_result;
    usa = '0;
    usb = '0;
    us_result = '0;
    result = signed'({1'b0, ua}) - signed'({1'b0, ub});
    result = signed'({1'b0, sa}) - signed'({1'b0, sb});
    us_result = usa - usb;
    t0 = us_result;
end

//------------------------------------------------------------------------------
// Method process: liter_suff_U2 (test_binary_signed.cpp:86:5) 

always_comb 
begin : liter_suff_U2     // test_binary_signed.cpp:86:5
    logic signed [2:0] x;
    logic signed [3:0] y;
    logic signed [7:0] z_1;
    x = 2;
    t1 = x;
    y = -4'sd6;
    t1 = y;
    z_1 = '0;
    z_1 = 3'd6 / 2'd2;
    t1 = z_1;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == 3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = (-4'sd6) / 2'd2;
    t1 = z_1;
    z_1 = 4'd12 / 3'd6;
    t1 = z_1;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == 3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = 4'd12 / (-4'sd6);
    t1 = z_1;
end

//------------------------------------------------------------------------------
// Method process: liter_suff_L (test_binary_signed.cpp:111:5) 

always_comb 
begin : liter_suff_L     // test_binary_signed.cpp:111:5
    logic signed [2:0] x;
    logic signed [3:0] y;
    logic signed [7:0] z_1;
    logic signed [69:0] bz;
    x = 2;
    t2 = x;
    y = -4'sd6;
    t2 = y;
    z_1 = '0;
    bz = '0;
    z_1 = 4'sd6 / 3'sd2;
    t2 = z_1;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == 3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = (-4'sd6) / 3'sd2;
    t2 = z_1;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = 5'sd12 / 4'sd6;
    t2 = z_1;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == 3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = 5'sd12 / (-4'sd6);
    t2 = z_1;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = 1 <<< 62;
    `ifndef INTEL_SVA_OFF
        assert (bz == 63'h4000000000000000) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = (1 <<< 62) * (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (bz == -64'sh4000000000000000) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = 64'((1 <<< 62) * (-2'sd1)) / 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (bz == -63'sh2000000000000000) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = 63'sh3FFFFFFFFFFFFFFC + 4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (bz == 63'h4000000000000000) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = (-63'sh3FFFFFFFFFFFFFFC) - 4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (bz == -64'sh4000000000000000) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = (-63'sh3FFFFFFFFFFFFFFC) / 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (bz == -62'sh1FFFFFFFFFFFFFFE) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = 62'h3FFFFFFFFFFFFFFC / 2'd2;
    `ifndef INTEL_SVA_OFF
        assert (bz == 61'h1FFFFFFFFFFFFFFE) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: liter_suff_var (test_binary_signed.cpp:156:5) 

always_comb 
begin : liter_suff_var     // test_binary_signed.cpp:156:5
    integer i;
    logic signed [3:0] x;
    logic signed [4:0] y;
    logic signed [7:0] z_1;
    logic signed [69:0] bz;
    i = -4'sd6;
    x = 6;
    y = -4'sd6;
    z_1 = -4'sd6;
    bz = '0;
    bz = x / 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (bz == 3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = y / 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (bz == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = i / 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (bz == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = z_1 / 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (bz == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = 5'sd12 / x;
    `ifndef INTEL_SVA_OFF
        assert (bz == 2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = 5'sd12 / y;
    `ifndef INTEL_SVA_OFF
        assert (bz == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = 5'sd12 / i;
    `ifndef INTEL_SVA_OFF
        assert (bz == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = 5'sd12 / z_1;
    `ifndef INTEL_SVA_OFF
        assert (bz == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: liter_neg_non_div_bug (test_binary_signed.cpp:187:5) 

always_comb 
begin : liter_neg_non_div_bug     // test_binary_signed.cpp:187:5
    integer i;
    integer j;
    logic signed [15:0] z_1;
    logic [15:0] bu;
    logic signed [15:0] bz;
    logic signed [7:0] x;
    logic [3:0] ux;
    integer unsigned uu;
    j = 4;
    z_1 = '0;
    bu = 1'd1;
    bz = -4'sd5;
    x = -4'sd5;
    ux = 2'd2;
    uu = 6'd42;
    z_1 = bu + (ux + x);
    t3 = z_1;
    i = -2'sd1;
    i = j + uu * i;
    z_1 = 1;
    bz = signed'({1'b0, bu}) * bz - x;
    z_1 = (-4'sd6) / ux;
    t3 = z_1;
    bz = (-4'sd6) + ux * (-3'sd3);
    t3 = 32'(bz);
    z_1 = 35'(-uu * 3'd4) / (-3'sd2);
    t3 = z_1;
    uu = ux + (2'sd1 + 3'sd2);
    t3 = uu;
    uu = ux / (1 <<< 2);
    t3 = uu;
end

//------------------------------------------------------------------------------
// Method process: liter_neg_div (test_binary_signed.cpp:229:5) 

always_comb 
begin : liter_neg_div     // test_binary_signed.cpp:229:5
    logic signed [2:0] x;
    logic signed [3:0] y;
    logic signed [7:0] z_1;
    logic [3:0] ux;
    integer unsigned uu;
    x = 2;
    y = -4'sd6;
    z_1 = '0;
    ux = 2'd2;
    z_1 = (-4'sd6) / 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = (-4'sd6) * 3'sd2 - 3'sd3;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -5'sd15) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = 5'sd12 / (-4'sd4) + 3'sd3 * (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -4'sd6) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = 3'sd2 / (4'sd5 - 4'sd6);
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = 3'sd2 / (4'sd5 + (-4'sd6));
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = (-4'sd6) / 4'sd2;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = (-4'sd6) * 4'sd2 + 5'sd3;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -5'sd9) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = 3'sd2 / (4'sd5 - 4'sd6);
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = 3'sd2 / (4'sd5 + (-4'sd6));
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    uu = 2'd2;
    z_1 = (-4'sd6) / uu;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: liter_neg_div_part (test_binary_signed.cpp:275:5) 

always_comb 
begin : liter_neg_div_part     // test_binary_signed.cpp:275:5
    logic signed [3:0] x;
    logic signed [5:0] y;
    logic signed [7:0] z_1;
    logic signed [7:0] r;
    x = 2;
    y = -4'sd5;
    z_1 = '0;
    r = '0;
    z_1 = (-4'sd5) / 3'sd2;
    r = (-4'sd5) % 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (r == -2'sd1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = (-7'sd5) / 4'sd2;
    r = (-7'sd5) % 4'sd2;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (r == -2'sd1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: liter_neg_non_div (test_binary_signed.cpp:295:5) 

always_comb 
begin : liter_neg_non_div     // test_binary_signed.cpp:295:5
    integer i;
    logic signed [15:0] z_1;
    logic signed [15:0] bz;
    logic [3:0] ux;
    integer unsigned uu;
    z_1 = '0;
    bz = '0;
    ux = 2'd2;
    uu = 2'd2;
    i = (-2'sd1) * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (i == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    i = (-8'sd111) + 5'sd11;
    `ifndef INTEL_SVA_OFF
        assert (i == -8'sd100) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = (-4'sd6) * 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -5'sd12) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = 4'sd4 * (-8'sd121);
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -10'sd484) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = (-5'sd10) - 6'sd20;
    `ifndef INTEL_SVA_OFF
        assert (bz == -6'sd30) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = (-4'sd4) + (-5'sd8) - 3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (bz == -5'sd14) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    i = (-4'sd6) * ux;
    `ifndef INTEL_SVA_OFF
        assert (i == -5'sd12) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = (-4'sd6) * ux;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -5'sd12) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = (-3'sd3) + ux;
    `ifndef INTEL_SVA_OFF
        assert (bz == -2'sd1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = (-4'sd6) + ux * (-3'sd3);
    `ifndef INTEL_SVA_OFF
        assert (bz == -5'sd12) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    i = (-4'sd6) * uu;
    `ifndef INTEL_SVA_OFF
        assert (i == -5'sd12) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = (-4'sd6) * signed'({1'b0, uu});
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -5'sd12) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = (-4'sd6) + uu * (-3'sd3);
    `ifndef INTEL_SVA_OFF
        assert (bz == -5'sd12) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: cpp_type_neg_div (test_binary_signed.cpp:338:5) 

always_comb 
begin : cpp_type_neg_div     // test_binary_signed.cpp:338:5
    integer x;
    integer y;
    integer z_1;
    integer r;
    x = 2;
    y = -4'sd5;
    z_1 = y / x;
    r = y % x;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (r == -2'sd1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: sc_type_neg_div (test_binary_signed.cpp:360:5) 

always_comb 
begin : sc_type_neg_div     // test_binary_signed.cpp:360:5
    logic signed [4:0] x;
    logic signed [6:0] y;
    logic signed [7:0] z_1;
    logic [3:0] ux;
    integer i;
    integer unsigned uu;
    x = 2;
    y = -4'sd6;
    z_1 = '0;
    z_1 = y / x;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    ux = 2'd2;
    z_1 = y / ux;
    i = -4'sd6;
    z_1 = i / ux;
    uu = 2'd2;
    z_1 = y / signed'({1'b0, uu});
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = i / uu;
end

//------------------------------------------------------------------------------
// Method process: sc_bigint_type_neg_div (test_binary_signed.cpp:393:5) 

always_comb 
begin : sc_bigint_type_neg_div     // test_binary_signed.cpp:393:5
    logic signed [8:0] y;
    logic signed [4:0] x;
    logic signed [10:0] z_1;
    logic [3:0] ux;
    logic [4:0] bux;
    integer unsigned uu;
    y = -4'sd7;
    x = 2;
    z_1 = '0;
    z_1 = y / x;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    ux = 2'd2;
    z_1 = y / signed'({1'b0, ux});
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bux = 2'd2;
    z_1 = y / signed'({1'b0, bux});
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    uu = 2'd2;
    z_1 = y / signed'({1'b0, uu});
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = y / 4'sd2;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: sc_biguint_type_neg_div (test_binary_signed.cpp:424:5) 

always_comb 
begin : sc_biguint_type_neg_div     // test_binary_signed.cpp:424:5
    logic [8:0] y;
    logic signed [4:0] x;
    logic signed [10:0] z_1;
    logic signed [63:0] li;
    logic signed [4:0] bx;
    logic [3:0] ux;
    y = 4'd14;
    x = -3'sd3;
    z_1 = '0;
    z_1 = signed'({1'b0, y}) / x;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -4'sd4) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    li = -3'sd3;
    z_1 = signed'({1'b0, y}) / li;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -4'sd4) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bx = -3'sd3;
    z_1 = signed'({1'b0, y}) / bx;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -4'sd4) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    ux = 3'd5;
    z_1 = y / (x + ux);
    z_1 = signed'({1'b0, y}) / (bx + signed'({1'b0, ux}));
    `ifndef INTEL_SVA_OFF
        assert (z_1 == 4'sd7) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = signed'({1'b0, y}) * (bx - signed'({1'b0, ux})) + 2'sd1;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -8'sd111) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = (bx / signed'({1'b0, ux})) * signed'({1'b0, y}) + signed'({1'b0, y});
    `ifndef INTEL_SVA_OFF
        assert (z_1 == 5'sd14) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: sc_type_pos_div_rem (test_binary_signed.cpp:459:5) 

always_comb 
begin : sc_type_pos_div_rem     // test_binary_signed.cpp:459:5
    logic signed [2:0] x;
    logic signed [4:0] y;
    logic signed [7:0] z_1;
    logic signed [7:0] r;
    logic [3:0] ux;
    logic [3:0] uy;
    logic signed [3:0] bx;
    logic signed [3:0] by;
    logic [3:0] bux;
    logic [3:0] buy;
    x = 2;
    y = 5;
    z_1 = '0;
    r = '0;
    z_1 = y / x;
    r = y % x;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == 3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (r == 2'sd1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    ux = 2'd2;
    z_1 = y / ux;
    r = y % ux;
    uy = 3'd5;
    z_1 = uy / ux;
    r = uy % ux;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == 3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (r == 2'sd1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bx = 2;
    by = 5;
    z_1 = by / bx;
    r = by % bx;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == 3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (r == 2'sd1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bux = 2'd2;
    buy = 3'd5;
    z_1 = buy / bux;
    r = buy % bux;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == 3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (r == 2'sd1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: sc_type_neg_div2 (test_binary_signed.cpp:504:5) 

always_comb 
begin : sc_type_neg_div2     // test_binary_signed.cpp:504:5
    logic signed [5:0] x;
    logic signed [5:0] y;
    logic signed [5:0] z_1;
    logic signed [5:0] r;
    logic signed [5:0] ux;
    x = 2;
    y = -4'sd5;
    z_1 = '0;
    z_1 = y / x;
    r = y % x;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (r == -2'sd1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    y = -5'sd12;
    ux = 3;
    z_1 = y / ux;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -4'sd4) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: expl_sign_cast (test_binary_signed.cpp:525:5) 

always_comb 
begin : expl_sign_cast     // test_binary_signed.cpp:525:5
    integer i;
    logic signed [15:0] z_1;
    logic signed [15:0] bz;
    logic signed [5:0] x;
    logic signed [5:0] bx;
    logic [3:0] ux;
    logic [7:0] bux;
    integer unsigned uu;
    i = 42;
    z_1 = '0;
    bz = '0;
    x = -4'sd5;
    bx = -4'sd5;
    ux = 2'd2;
    bux = 2'd2;
    uu = 2'd2;
    z_1 = x + 7'(x);
    z_1 = x + signed'(7'(x + ux));
    z_1 = x + ux;
    z_1 = x + 6'(ux);
    z_1 = x + signed'(7'(ux));
    z_1 = x + signed'(8'(ux));
    z_1 = x + signed'({1'b0, 9'(ux)});
    z_1 = x + 7'(ux);
    z_1 = x + signed'(32'(ux));
    z_1 = x + signed'({1'b0, 32'(ux)});
    bz = bx + 7'(x);
    bz = bx + signed'(7'(x + ux));
    bz = bx + signed'(7'(ux));
    bz = bx + signed'(8'(ux));
    bz = bx + signed'({1'b0, 9'(ux)});
    bz = bx + signed'({1'b0, 7'(ux)});
    bz = bx + signed'(32'(ux));
    bz = bx + signed'({1'b0, 32'(ux)});
    bz = signed'({1'b0, bux}) + 7'(x);
    bz = signed'({1'b0, bux}) + i;
    bz = signed'({1'b0, bux}) + signed'(7'(ux));
    bz = signed'({1'b0, bux}) + signed'(8'(ux));
    bz = signed'({1'b0, bux}) + signed'(32'(ux));
    bz = bux + 32'(ux);
    bux = bux + i;
    bux = bux + 7'(x);
    bux = bux + signed'(8'(ux));
    bux = bux + bux;
    bux = bux + signed'(8'(bux));
    bux = bux + 9'(bux);
    bz = -4'sd5;
    bz = bz + signed'({1'b0, uu});
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = -4'sd5;
    bz = bz + signed'(7'(uu));
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = -4'sd5;
    bz = bz + signed'({1'b0, ux});
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = -4'sd5;
    bz = bz + signed'(7'(ux));
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bz = -4'sd5;
    bz = bz + signed'(7'(bux));
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bx = -signed'({1'b0, bux});
    bx = -signed'({1'b0, bux}) + i;
    bx = -signed'(4'(bux)) + i;
    bx = -signed'(8'(bux)) + x;
    bx = -signed'({1'b0, 9'(bux)}) + x;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = x - signed'(32'(ux)) + 2'sd1;
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -4'sd6) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = x * signed'(32'(ux)) + ux;
    z_1 = 13'(x) / signed'(15'(ux));
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = signed'(64'(ux)) / (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -3'sd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: sc_types_64bit (test_binary_signed.cpp:650:5) 

always_comb 
begin : sc_types_64bit     // test_binary_signed.cpp:650:5
    logic signed [63:0] x;
    logic [63:0] ux;
    integer i;
    integer unsigned uu;
    logic [59:0] y;
    logic signed [79:0] z_1;
    x = -4'sd5;
    ux = 2'd3;
    i = -4'sd5;
    uu = 2'd3;
    y = 2'd3;
    z_1 = '0;
    z_1 = x * ux;
    z_1 = x * signed'(64'(ux));
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -5'sd15) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = x / ux;
    z_1 = x / signed'(64'(ux));
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -2'sd1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = x * signed'({1'b0, uu});
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -5'sd15) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = x / signed'({1'b0, uu});
    `ifndef INTEL_SVA_OFF
        assert (z_1 == -2'sd1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    z_1 = i * ux;
    z_1 = i / ux;
end

//------------------------------------------------------------------------------
// Method process: sc_type_neg_comp (test_binary_signed.cpp:610:5) 

always_comb 
begin : sc_type_neg_comp     // test_binary_signed.cpp:610:5
    integer i;
    integer unsigned uu;
    logic signed [3:0] x;
    logic signed [4:0] y;
    logic [3:0] ux;
    logic b_1;
    i = 2;
    uu = 2'd2;
    x = 2;
    y = 2;
    ux = 2'd2;
    b_1 = x == y;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    b_1 = ux == y;
    b_1 = i == y;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    b_1 = i == x;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    b_1 = i == uu;
    b_1 = x == signed'({1'b0, uu});
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    b_1 = ux == uu;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    x = -4'sd5;
    y = -4'sd5;
    i = -4'sd5;
    b_1 = x == y;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    b_1 = i == y;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    b_1 = i == ux;
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    b_1 = y == ux;
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: cpp_sc_type_mix (test_binary_signed.cpp:715:5) 

always_comb 
begin : cpp_sc_type_mix     // test_binary_signed.cpp:715:5
    integer div;
    integer rem;
    integer mul;
    integer sub;
    integer add;
    logic doDiv;
    integer x;
    integer i;
    integer z_1;
    integer div_1;
    integer rem_1;
    integer mul_1;
    integer sub_1;
    integer add_1;
    logic doDiv_1;
    integer unsigned x_1;
    integer i_1;
    integer z_2;
    integer div_2;
    integer rem_2;
    integer mul_2;
    integer sub_2;
    integer add_2;
    logic doDiv_2;
    integer unsigned x_2;
    logic signed [7:0] i_2;
    integer z_3;
    integer div_3;
    integer rem_3;
    integer mul_3;
    integer sub_3;
    integer add_3;
    logic doDiv_3;
    integer unsigned x_3;
    logic signed [7:0] i_3;
    logic signed [15:0] z_4;
    integer div_4;
    integer rem_4;
    integer mul_4;
    integer sub_4;
    integer add_4;
    logic doDiv_4;
    integer unsigned x_4;
    logic signed [32:0] i_4;
    logic signed [63:0] z_5;
    integer div_5;
    integer rem_5;
    integer mul_5;
    integer sub_5;
    integer add_5;
    logic doDiv_5;
    logic [7:0] x_5;
    integer i_5;
    integer z_6;
    integer div_6;
    integer rem_6;
    integer mul_6;
    integer sub_6;
    integer add_6;
    logic doDiv_6;
    logic [7:0] x_6;
    logic signed [7:0] i_6;
    integer z_7;
    integer div_7;
    integer rem_7;
    integer mul_7;
    integer sub_7;
    integer add_7;
    logic doDiv_7;
    logic [7:0] x_7;
    logic signed [7:0] i_7;
    logic signed [7:0] z_8;
    integer div_8;
    integer rem_8;
    integer mul_8;
    integer sub_8;
    integer add_8;
    logic doDiv_8;
    logic [7:0] x_8;
    logic signed [7:0] i_8;
    logic signed [15:0] z_9;
    integer div_9;
    integer rem_9;
    integer mul_9;
    integer sub_9;
    integer add_9;
    logic doDiv_9;
    logic [7:0] x_9;
    logic signed [32:0] i_9;
    logic signed [63:0] z_10;
    integer div_10;
    integer rem_10;
    integer mul_10;
    integer sub_10;
    integer add_10;
    logic doDiv_10;
    logic [32:0] x_10;
    logic signed [32:0] i_10;
    logic signed [63:0] z_11;
    integer div_11;
    integer rem_11;
    integer mul_11;
    integer sub_11;
    integer add_11;
    logic doDiv_11;
    logic [7:0] x_11;
    logic signed [32:0] i_11;
    logic signed [63:0] z_12;
    integer div_12;
    integer rem_12;
    integer mul_12;
    integer sub_12;
    integer add_12;
    logic doDiv_12;
    logic [32:0] x_12;
    logic signed [32:0] i_12;
    logic signed [63:0] z_13;
    integer div_13;
    integer rem_13;
    integer mul_13;
    integer sub_13;
    integer add_13;
    logic doDiv_13;
    logic [7:0] x_13;
    integer i_13;
    logic signed [15:0] z_14;
    integer div_14;
    integer rem_14;
    integer mul_14;
    integer sub_14;
    integer add_14;
    logic doDiv_14;
    logic [7:0] x_14;
    logic signed [7:0] i_14;
    logic signed [15:0] z_15;
    integer div_15;
    integer rem_15;
    integer mul_15;
    integer sub_15;
    integer add_15;
    logic doDiv_15;
    logic [7:0] x_15;
    logic signed [7:0] i_15;
    logic signed [15:0] z_16;
    integer div_16;
    integer rem_16;
    integer mul_16;
    integer sub_16;
    integer add_16;
    logic doDiv_16;
    logic [7:0] x_16;
    logic signed [32:0] i_16;
    logic signed [64:0] z_17;
    integer div_17;
    integer rem_17;
    integer mul_17;
    integer sub_17;
    integer add_17;
    logic doDiv_17;
    logic [32:0] x_17;
    logic signed [32:0] i_17;
    logic signed [64:0] z_18;
    div = -3'sd3; rem = -2'sd1; mul = -6'sd30; sub = -5'sd13; add = -4'sd7; doDiv = 1;
    // Call cpp_sc_type_mix() begin
    x = 3;
    i = -5'sd10;
    if (1)
    begin
        z_1 = i / x;
        `ifndef INTEL_SVA_OFF
            assert (z_1 == div) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
        z_1 = i % x;
        `ifndef INTEL_SVA_OFF
            assert (z_1 == rem) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
    end
    z_1 = i * x;
    z_1 = i - x;
    z_1 = i + x;
    // Call cpp_sc_type_mix() end
    div_1 = 1431655762; rem_1 = 0; mul_1 = -6'sd30; sub_1 = -5'sd13; add_1 = -4'sd7; doDiv_1 = 0;
    // Call cpp_sc_type_mix() begin
    x_1 = 2'd3;
    i_1 = -5'sd10;
    if (0)
    begin
    end
    z_2 = i_1 * x_1;
    z_2 = i_1 - x_1;
    z_2 = i_1 + x_1;
    // Call cpp_sc_type_mix() end
    div_2 = -3'sd3; rem_2 = -2'sd1; mul_2 = -6'sd30; sub_2 = -5'sd13; add_2 = -4'sd7; doDiv_2 = 1;
    // Call cpp_sc_type_mix() begin
    x_2 = 2'd3;
    i_2 = -5'sd10;
    if (1)
    begin
        z_3 = i_2 / signed'({1'b0, x_2});
        `ifndef INTEL_SVA_OFF
            assert (z_3 == div_2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
        z_3 = i_2 % signed'({1'b0, x_2});
        `ifndef INTEL_SVA_OFF
            assert (z_3 == rem_2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
    end
    z_3 = i_2 * signed'({1'b0, x_2});
    z_3 = i_2 - signed'({1'b0, x_2});
    z_3 = i_2 + signed'({1'b0, x_2});
    // Call cpp_sc_type_mix() end
    div_3 = -3'sd3; rem_3 = -2'sd1; mul_3 = -6'sd30; sub_3 = -5'sd13; add_3 = -4'sd7; doDiv_3 = 1;
    // Call cpp_sc_type_mix() begin
    x_3 = 2'd3;
    i_3 = -5'sd10;
    z_4 = '0;
    if (1)
    begin
        z_4 = i_3 / signed'({1'b0, x_3});
        `ifndef INTEL_SVA_OFF
            assert (z_4 == div_3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
        z_4 = i_3 % signed'({1'b0, x_3});
        `ifndef INTEL_SVA_OFF
            assert (z_4 == rem_3) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
    end
    z_4 = i_3 * signed'({1'b0, x_3});
    z_4 = i_3 - signed'({1'b0, x_3});
    z_4 = i_3 + signed'({1'b0, x_3});
    // Call cpp_sc_type_mix() end
    div_4 = -3'sd3; rem_4 = -2'sd1; mul_4 = -6'sd30; sub_4 = -5'sd13; add_4 = -4'sd7; doDiv_4 = 1;
    // Call cpp_sc_type_mix() begin
    x_4 = 2'd3;
    i_4 = -5'sd10;
    z_5 = '0;
    if (1)
    begin
        z_5 = i_4 / signed'({1'b0, x_4});
        `ifndef INTEL_SVA_OFF
            assert (z_5 == div_4) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
        z_5 = i_4 % signed'({1'b0, x_4});
        `ifndef INTEL_SVA_OFF
            assert (z_5 == rem_4) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
    end
    z_5 = i_4 * signed'({1'b0, x_4});
    z_5 = i_4 - signed'({1'b0, x_4});
    z_5 = i_4 + signed'({1'b0, x_4});
    // Call cpp_sc_type_mix() end
    div_5 = 1431655762; rem_5 = 0; mul_5 = -6'sd30; sub_5 = -5'sd13; add_5 = -4'sd7; doDiv_5 = 0;
    // Call cpp_sc_type_mix() begin
    x_5 = 2'd3;
    i_5 = -5'sd10;
    if (0)
    begin
    end
    z_6 = i_5 * x_5;
    z_6 = i_5 - x_5;
    z_6 = i_5 + x_5;
    // Call cpp_sc_type_mix() end
    div_6 = 1431655762; rem_6 = 0; mul_6 = -6'sd30; sub_6 = -5'sd13; add_6 = -4'sd7; doDiv_6 = 0;
    // Call cpp_sc_type_mix() begin
    x_6 = 2'd3;
    i_6 = -5'sd10;
    if (0)
    begin
    end
    z_7 = i_6 * x_6;
    z_7 = i_6 - x_6;
    z_7 = i_6 + x_6;
    // Call cpp_sc_type_mix() end
    div_7 = 82; rem_7 = 0; mul_7 = -6'sd30; sub_7 = -5'sd13; add_7 = -4'sd7; doDiv_7 = 0;
    // Call cpp_sc_type_mix() begin
    x_7 = 2'd3;
    i_7 = -5'sd10;
    z_8 = '0;
    if (0)
    begin
    end
    z_8 = i_7 * x_7;
    z_8 = i_7 - x_7;
    z_8 = i_7 + x_7;
    // Call cpp_sc_type_mix() end
    div_8 = -3'sd3; rem_8 = -2'sd1; mul_8 = -6'sd30; sub_8 = -5'sd13; add_8 = -4'sd7; doDiv_8 = 1;
    // Call cpp_sc_type_mix() begin
    x_8 = 2'd3;
    i_8 = -5'sd10;
    z_9 = '0;
    if (1)
    begin
        z_9 = i_8 / signed'({1'b0, x_8});
        `ifndef INTEL_SVA_OFF
            assert (z_9 == div_8) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
        z_9 = i_8 % signed'({1'b0, x_8});
        `ifndef INTEL_SVA_OFF
            assert (z_9 == rem_8) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
    end
    z_9 = i_8 * signed'({1'b0, x_8});
    z_9 = i_8 - signed'({1'b0, x_8});
    z_9 = i_8 + signed'({1'b0, x_8});
    // Call cpp_sc_type_mix() end
    div_9 = -3'sd3; rem_9 = -2'sd1; mul_9 = -6'sd30; sub_9 = -5'sd13; add_9 = -4'sd7; doDiv_9 = 0;
    // Call cpp_sc_type_mix() begin
    x_9 = 2'd3;
    i_9 = -5'sd10;
    z_10 = '0;
    if (0)
    begin
    end
    z_10 = i_9 * x_9;
    z_10 = i_9 - x_9;
    z_10 = i_9 + x_9;
    // Call cpp_sc_type_mix() end
    div_10 = -3'sd3; rem_10 = -2'sd1; mul_10 = -6'sd30; sub_10 = -5'sd13; add_10 = -4'sd7; doDiv_10 = 0;
    // Call cpp_sc_type_mix() begin
    x_10 = 2'd3;
    i_10 = -5'sd10;
    z_11 = '0;
    if (0)
    begin
    end
    z_11 = i_10 * x_10;
    z_11 = i_10 - x_10;
    z_11 = i_10 + x_10;
    // Call cpp_sc_type_mix() end
    div_11 = -3'sd3; rem_11 = -2'sd1; mul_11 = -6'sd30; sub_11 = -5'sd13; add_11 = -4'sd7; doDiv_11 = 1;
    // Call cpp_sc_type_mix() begin
    x_11 = 2'd3;
    i_11 = -5'sd10;
    z_12 = '0;
    if (1)
    begin
        z_12 = i_11 / signed'({1'b0, x_11});
        `ifndef INTEL_SVA_OFF
            assert (z_12 == div_11) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
        z_12 = i_11 % signed'({1'b0, x_11});
        `ifndef INTEL_SVA_OFF
            assert (z_12 == rem_11) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
    end
    z_12 = i_11 * signed'({1'b0, x_11});
    z_12 = i_11 - signed'({1'b0, x_11});
    z_12 = i_11 + signed'({1'b0, x_11});
    // Call cpp_sc_type_mix() end
    div_12 = -3'sd3; rem_12 = -2'sd1; mul_12 = -6'sd30; sub_12 = -5'sd13; add_12 = -4'sd7; doDiv_12 = 1;
    // Call cpp_sc_type_mix() begin
    x_12 = 2'd3;
    i_12 = -5'sd10;
    z_13 = '0;
    if (1)
    begin
        z_13 = i_12 / signed'({1'b0, x_12});
        `ifndef INTEL_SVA_OFF
            assert (z_13 == div_12) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
        z_13 = i_12 % signed'({1'b0, x_12});
        `ifndef INTEL_SVA_OFF
            assert (z_13 == rem_12) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
    end
    z_13 = i_12 * signed'({1'b0, x_12});
    z_13 = i_12 - signed'({1'b0, x_12});
    z_13 = i_12 + signed'({1'b0, x_12});
    // Call cpp_sc_type_mix() end
    div_13 = -3'sd3; rem_13 = -2'sd1; mul_13 = -6'sd30; sub_13 = -5'sd13; add_13 = -4'sd7; doDiv_13 = 1;
    // Call cpp_sc_type_mix() begin
    x_13 = 2'd3;
    i_13 = -5'sd10;
    z_14 = '0;
    if (1)
    begin
        z_14 = i_13 / signed'({1'b0, x_13});
        `ifndef INTEL_SVA_OFF
            assert (z_14 == div_13) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
        z_14 = i_13 % signed'({1'b0, x_13});
        `ifndef INTEL_SVA_OFF
            assert (z_14 == rem_13) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
    end
    z_14 = i_13 * signed'({1'b0, x_13});
    z_14 = i_13 - signed'({1'b0, x_13});
    z_14 = i_13 + signed'({1'b0, x_13});
    // Call cpp_sc_type_mix() end
    div_14 = -3'sd3; rem_14 = -2'sd1; mul_14 = -6'sd30; sub_14 = -5'sd13; add_14 = -4'sd7; doDiv_14 = 1;
    // Call cpp_sc_type_mix() begin
    x_14 = 2'd3;
    i_14 = -5'sd10;
    z_15 = '0;
    if (1)
    begin
        z_15 = i_14 / signed'({1'b0, x_14});
        `ifndef INTEL_SVA_OFF
            assert (z_15 == div_14) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
        z_15 = i_14 % signed'({1'b0, x_14});
        `ifndef INTEL_SVA_OFF
            assert (z_15 == rem_14) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
    end
    z_15 = i_14 * signed'({1'b0, x_14});
    z_15 = i_14 - signed'({1'b0, x_14});
    z_15 = i_14 + signed'({1'b0, x_14});
    // Call cpp_sc_type_mix() end
    div_15 = -3'sd3; rem_15 = -2'sd1; mul_15 = -6'sd30; sub_15 = -5'sd13; add_15 = -4'sd7; doDiv_15 = 1;
    // Call cpp_sc_type_mix() begin
    x_15 = 2'd3;
    i_15 = -5'sd10;
    z_16 = '0;
    if (1)
    begin
        z_16 = i_15 / signed'({1'b0, x_15});
        `ifndef INTEL_SVA_OFF
            assert (z_16 == div_15) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
        z_16 = i_15 % signed'({1'b0, x_15});
        `ifndef INTEL_SVA_OFF
            assert (z_16 == rem_15) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
    end
    z_16 = i_15 * signed'({1'b0, x_15});
    z_16 = i_15 - signed'({1'b0, x_15});
    z_16 = i_15 + signed'({1'b0, x_15});
    // Call cpp_sc_type_mix() end
    div_16 = -3'sd3; rem_16 = -2'sd1; mul_16 = -6'sd30; sub_16 = -5'sd13; add_16 = -4'sd7; doDiv_16 = 1;
    // Call cpp_sc_type_mix() begin
    x_16 = 2'd3;
    i_16 = -5'sd10;
    z_17 = '0;
    if (1)
    begin
        z_17 = i_16 / signed'({1'b0, x_16});
        `ifndef INTEL_SVA_OFF
            assert (z_17 == div_16) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
        z_17 = i_16 % signed'({1'b0, x_16});
        `ifndef INTEL_SVA_OFF
            assert (z_17 == rem_16) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
    end
    z_17 = i_16 * signed'({1'b0, x_16});
    z_17 = i_16 - signed'({1'b0, x_16});
    z_17 = i_16 + signed'({1'b0, x_16});
    // Call cpp_sc_type_mix() end
    div_17 = -3'sd3; rem_17 = -2'sd1; mul_17 = -6'sd30; sub_17 = -5'sd13; add_17 = -4'sd7; doDiv_17 = 1;
    // Call cpp_sc_type_mix() begin
    x_17 = 2'd3;
    i_17 = -5'sd10;
    z_18 = '0;
    if (1)
    begin
        z_18 = i_17 / signed'({1'b0, x_17});
        `ifndef INTEL_SVA_OFF
            assert (z_18 == div_17) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
        z_18 = i_17 % signed'({1'b0, x_17});
        `ifndef INTEL_SVA_OFF
            assert (z_18 == rem_17) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
        `endif // INTEL_SVA_OFF
    end
    z_18 = i_17 * signed'({1'b0, x_17});
    z_18 = i_17 - signed'({1'b0, x_17});
    z_18 = i_17 + signed'({1'b0, x_17});
    // Call cpp_sc_type_mix() end
end

//------------------------------------------------------------------------------
// Method process: compl_expr_mix (test_binary_signed.cpp:775:5) 

always_comb 
begin : compl_expr_mix     // test_binary_signed.cpp:775:5
    integer div;
    integer mul;
    integer add;
    integer sub;
    integer add2;
    logic doDiv;
    integer x;
    integer y;
    integer unsigned z_1;
    integer r;
    integer div_1;
    integer mul_1;
    integer add_1;
    integer sub_1;
    integer add2_1;
    logic doDiv_1;
    logic signed [7:0] x_1;
    logic signed [7:0] y_1;
    integer unsigned z_2;
    integer r_1;
    integer div_2;
    integer mul_2;
    integer add_2;
    integer sub_2;
    integer add2_2;
    logic doDiv_2;
    logic signed [7:0] x_2;
    logic signed [32:0] y_2;
    integer unsigned z_3;
    integer r_2;
    integer div_3;
    integer mul_3;
    integer add_3;
    integer sub_3;
    integer add2_3;
    logic doDiv_3;
    logic signed [7:0] x_3;
    logic signed [7:0] y_3;
    logic [63:0] z_4;
    integer r_3;
    integer div_4;
    integer mul_4;
    integer add_4;
    integer sub_4;
    integer add2_4;
    logic doDiv_4;
    logic signed [7:0] x_4;
    logic signed [7:0] y_4;
    integer unsigned z_5;
    logic signed [15:0] r_4;
    integer div_5;
    integer mul_5;
    integer add_5;
    integer sub_5;
    integer add2_5;
    logic doDiv_5;
    logic signed [32:0] x_5;
    logic signed [32:0] y_5;
    integer unsigned z_6;
    logic signed [64:0] r_5;
    integer div_6;
    integer mul_6;
    integer add_6;
    integer sub_6;
    integer add2_6;
    logic doDiv_6;
    logic signed [7:0] x_6;
    integer y_6;
    integer unsigned z_7;
    integer r_6;
    integer div_7;
    integer mul_7;
    integer add_7;
    integer sub_7;
    integer add2_7;
    logic doDiv_7;
    logic signed [7:0] x_7;
    logic signed [7:0] y_7;
    integer unsigned z_8;
    logic signed [15:0] r_7;
    integer div_8;
    integer mul_8;
    integer add_8;
    integer sub_8;
    integer add2_8;
    logic doDiv_8;
    integer x_8;
    integer y_8;
    logic [7:0] z_9;
    integer r_8;
    integer div_9;
    integer mul_9;
    integer add_9;
    integer sub_9;
    integer add2_9;
    logic doDiv_9;
    integer x_9;
    integer y_9;
    logic [32:0] z_10;
    integer r_9;
    integer div_10;
    integer mul_10;
    integer add_10;
    integer sub_10;
    integer add2_10;
    logic doDiv_10;
    logic signed [7:0] x_10;
    logic signed [7:0] y_10;
    logic [7:0] z_11;
    integer r_10;
    integer div_11;
    integer mul_11;
    integer add_11;
    integer sub_11;
    integer add2_11;
    logic doDiv_11;
    logic signed [7:0] x_11;
    logic signed [7:0] y_11;
    logic [7:0] z_12;
    logic signed [15:0] r_11;
    integer div_12;
    integer mul_12;
    integer add_12;
    integer sub_12;
    integer add2_12;
    logic doDiv_12;
    logic signed [7:0] x_12;
    integer y_12;
    logic [7:0] z_13;
    integer r_12;
    integer div_13;
    integer mul_13;
    integer add_13;
    integer sub_13;
    integer add2_13;
    logic doDiv_13;
    logic signed [32:0] x_13;
    integer y_13;
    logic [7:0] z_14;
    integer r_13;
    integer div_14;
    integer mul_14;
    integer add_14;
    integer sub_14;
    integer add2_14;
    logic doDiv_14;
    logic signed [7:0] x_14;
    logic signed [7:0] y_14;
    logic [7:0] z_15;
    logic signed [15:0] r_14;
    integer div_15;
    integer mul_15;
    integer add_15;
    integer sub_15;
    integer add2_15;
    logic doDiv_15;
    integer x_15;
    integer y_15;
    logic [7:0] z_16;
    logic signed [15:0] r_15;
    integer div_16;
    integer mul_16;
    integer add_16;
    integer sub_16;
    integer add2_16;
    logic doDiv_16;
    logic signed [7:0] x_16;
    logic signed [7:0] y_16;
    logic [7:0] z_17;
    logic signed [15:0] r_16;
    integer div_17;
    integer mul_17;
    integer add_17;
    integer sub_17;
    integer add2_17;
    logic doDiv_17;
    logic signed [7:0] x_17;
    logic signed [7:0] y_17;
    logic [7:0] z_18;
    logic signed [15:0] r_17;
    integer div_18;
    integer mul_18;
    integer add_18;
    integer sub_18;
    integer add2_18;
    logic doDiv_18;
    logic signed [7:0] x_18;
    integer y_18;
    logic [7:0] z_19;
    logic signed [15:0] r_18;
    integer div_19;
    integer mul_19;
    integer add_19;
    integer sub_19;
    integer add2_19;
    logic doDiv_19;
    logic signed [7:0] x_19;
    logic signed [7:0] y_19;
    logic [7:0] z_20;
    logic signed [15:0] r_19;
    integer div_20;
    integer mul_20;
    integer add_20;
    integer sub_20;
    integer add2_20;
    logic doDiv_20;
    logic signed [32:0] x_20;
    logic signed [64:0] y_20;
    logic [64:0] z_21;
    logic signed [64:0] r_20;
    div = 2147483646; mul = 2147483576; add = 2147483639; sub = -4'sd6; add2 = -9'sd142; doDiv = 0;
    // Call compl_expr() begin
    x = -6'sd24;
    y = 6;
    z_1 = 2'd2;
    if (0)
    begin
    end
    r = (x * y) + z_1;
    // Call compl_expr() end
    div_1 = -3'sd2; mul_1 = -8'sd72; add_1 = -5'sd9; sub_1 = -4'sd6; add2_1 = -9'sd142; doDiv_1 = 1;
    // Call compl_expr() begin
    x_1 = -6'sd24;
    y_1 = 6;
    z_2 = 2'd2;
    if (1)
    begin
        r_1 = (x_1 / y_1) / signed'({1'b0, z_2});
        r_1 = 16'(x_1 * y_1) / signed'({1'b0, z_2});
        r_1 = 9'(x_1 + y_1) / signed'({1'b0, z_2});
        r_1 = (x_1 / y_1) - signed'({1'b0, z_2});
    end
    r_1 = (x_1 * y_1) + signed'({1'b0, z_2});
    // Call compl_expr() end
    div_2 = -3'sd2; mul_2 = -8'sd72; add_2 = -5'sd9; sub_2 = -4'sd6; add2_2 = -9'sd142; doDiv_2 = 1;
    // Call compl_expr() begin
    x_2 = -6'sd24;
    y_2 = 6;
    z_3 = 2'd2;
    if (1)
    begin
        r_2 = (x_2 / y_2) / signed'({1'b0, z_3});
        r_2 = 41'(x_2 * y_2) / signed'({1'b0, z_3});
        r_2 = 34'(x_2 + y_2) / signed'({1'b0, z_3});
        r_2 = (x_2 / y_2) - signed'({1'b0, z_3});
    end
    r_2 = (x_2 * y_2) + signed'({1'b0, z_3});
    // Call compl_expr() end
    div_3 = -3'sd2; mul_3 = -8'sd72; add_3 = -5'sd9; sub_3 = -4'sd6; add2_3 = -9'sd142; doDiv_3 = 1;
    // Call compl_expr() begin
    x_3 = -6'sd24;
    y_3 = 6;
    z_4 = 2'd2;
    if (1)
    begin
        r_3 = (x_3 / y_3) / z_4;
        r_3 = 16'(x_3 * y_3) / z_4;
        r_3 = 9'(x_3 + y_3) / z_4;
        r_3 = (x_3 / y_3) - z_4;
    end
    r_3 = (x_3 * y_3) + z_4;
    // Call compl_expr() end
    div_4 = -3'sd2; mul_4 = -8'sd72; add_4 = -5'sd9; sub_4 = -4'sd6; add2_4 = -9'sd142; doDiv_4 = 1;
    // Call compl_expr() begin
    x_4 = -6'sd24;
    y_4 = 6;
    z_5 = 2'd2;
    r_4 = '0;
    if (1)
    begin
        r_4 = (x_4 / y_4) / signed'({1'b0, z_5});
        r_4 = 16'(x_4 * y_4) / signed'({1'b0, z_5});
        r_4 = 9'(x_4 + y_4) / signed'({1'b0, z_5});
        r_4 = (x_4 / y_4) - signed'({1'b0, z_5});
    end
    r_4 = (x_4 * y_4) + signed'({1'b0, z_5});
    // Call compl_expr() end
    div_5 = -3'sd2; mul_5 = -8'sd72; add_5 = -5'sd9; sub_5 = -4'sd6; add2_5 = -9'sd142; doDiv_5 = 1;
    // Call compl_expr() begin
    x_5 = -6'sd24;
    y_5 = 6;
    z_6 = 2'd2;
    r_5 = '0;
    if (1)
    begin
        r_5 = (x_5 / y_5) / signed'({1'b0, z_6});
        r_5 = 66'(x_5 * y_5) / signed'({1'b0, z_6});
        r_5 = 34'(x_5 + y_5) / signed'({1'b0, z_6});
        r_5 = (x_5 / y_5) - signed'({1'b0, z_6});
    end
    r_5 = (x_5 * y_5) + signed'({1'b0, z_6});
    // Call compl_expr() end
    div_6 = -3'sd2; mul_6 = -8'sd72; add_6 = -5'sd9; sub_6 = -4'sd6; add2_6 = -9'sd142; doDiv_6 = 1;
    // Call compl_expr() begin
    x_6 = -6'sd24;
    y_6 = 6;
    z_7 = 2'd2;
    if (1)
    begin
        r_6 = (x_6 / y_6) / signed'({1'b0, z_7});
        r_6 = 40'(x_6 * y_6) / signed'({1'b0, z_7});
        r_6 = 33'(x_6 + y_6) / signed'({1'b0, z_7});
        r_6 = (x_6 / y_6) - signed'({1'b0, z_7});
    end
    r_6 = (x_6 * y_6) + signed'({1'b0, z_7});
    // Call compl_expr() end
    div_7 = -3'sd2; mul_7 = -8'sd72; add_7 = -5'sd9; sub_7 = -4'sd6; add2_7 = -9'sd142; doDiv_7 = 1;
    // Call compl_expr() begin
    x_7 = -6'sd24;
    y_7 = 6;
    z_8 = 2'd2;
    r_7 = '0;
    if (1)
    begin
        r_7 = (x_7 / y_7) / signed'({1'b0, z_8});
        r_7 = 16'(x_7 * y_7) / signed'({1'b0, z_8});
        r_7 = 9'(x_7 + y_7) / signed'({1'b0, z_8});
        r_7 = (x_7 / y_7) - signed'({1'b0, z_8});
    end
    r_7 = (x_7 * y_7) + signed'({1'b0, z_8});
    // Call compl_expr() end
    div_8 = -3'sd2; mul_8 = -8'sd72; add_8 = -5'sd9; sub_8 = -4'sd6; add2_8 = -9'sd142; doDiv_8 = 1;
    // Call compl_expr() begin
    x_8 = -6'sd24;
    y_8 = 6;
    z_9 = 2'd2;
    if (1)
    begin
        r_8 = (x_8 / y_8) / z_9;
        r_8 = 64'(x_8 * y_8) / z_9;
        r_8 = 33'(x_8 + y_8) / z_9;
        r_8 = (x_8 / y_8) - z_9;
    end
    r_8 = (x_8 * y_8) + z_9;
    // Call compl_expr() end
    div_9 = -3'sd2; mul_9 = -8'sd72; add_9 = -5'sd9; sub_9 = -4'sd6; add2_9 = -9'sd142; doDiv_9 = 1;
    // Call compl_expr() begin
    x_9 = -6'sd24;
    y_9 = 6;
    z_10 = 2'd2;
    if (1)
    begin
        r_9 = (x_9 / y_9) / z_10;
        r_9 = 64'(x_9 * y_9) / z_10;
        r_9 = 33'(x_9 + y_9) / z_10;
        r_9 = (x_9 / y_9) - z_10;
    end
    r_9 = (x_9 * y_9) + z_10;
    // Call compl_expr() end
    div_10 = -3'sd2; mul_10 = -8'sd72; add_10 = -5'sd9; sub_10 = -4'sd6; add2_10 = -9'sd142; doDiv_10 = 1;
    // Call compl_expr() begin
    x_10 = -6'sd24;
    y_10 = 6;
    z_11 = 2'd2;
    if (1)
    begin
        r_10 = (x_10 / y_10) / z_11;
        r_10 = 16'(x_10 * y_10) / z_11;
        r_10 = 9'(x_10 + y_10) / z_11;
        r_10 = (x_10 / y_10) - z_11;
    end
    r_10 = (x_10 * y_10) + z_11;
    // Call compl_expr() end
    div_11 = -3'sd2; mul_11 = -8'sd72; add_11 = -5'sd9; sub_11 = -4'sd6; add2_11 = -9'sd142; doDiv_11 = 1;
    // Call compl_expr() begin
    x_11 = -6'sd24;
    y_11 = 6;
    z_12 = 2'd2;
    r_11 = '0;
    if (1)
    begin
        r_11 = (x_11 / y_11) / signed'({1'b0, z_12});
        r_11 = 16'(x_11 * y_11) / signed'({1'b0, z_12});
        r_11 = 9'(x_11 + y_11) / signed'({1'b0, z_12});
        r_11 = (x_11 / y_11) - signed'({1'b0, z_12});
    end
    r_11 = (x_11 * y_11) + signed'({1'b0, z_12});
    // Call compl_expr() end
    div_12 = -3'sd2; mul_12 = -8'sd72; add_12 = -5'sd9; sub_12 = -4'sd6; add2_12 = -9'sd142; doDiv_12 = 1;
    // Call compl_expr() begin
    x_12 = -6'sd24;
    y_12 = 6;
    z_13 = 2'd2;
    if (1)
    begin
        r_12 = (x_12 / y_12) / z_13;
        r_12 = 40'(x_12 * y_12) / z_13;
        r_12 = 33'(x_12 + y_12) / z_13;
        r_12 = (x_12 / y_12) - z_13;
    end
    r_12 = (x_12 * y_12) + z_13;
    // Call compl_expr() end
    div_13 = -3'sd2; mul_13 = -8'sd72; add_13 = -5'sd9; sub_13 = -4'sd6; add2_13 = -9'sd142; doDiv_13 = 1;
    // Call compl_expr() begin
    x_13 = -6'sd24;
    y_13 = 6;
    z_14 = 2'd2;
    if (1)
    begin
        r_13 = (x_13 / y_13) / z_14;
        r_13 = 65'(x_13 * y_13) / z_14;
        r_13 = 34'(x_13 + y_13) / z_14;
        r_13 = (x_13 / y_13) - z_14;
    end
    r_13 = (x_13 * y_13) + z_14;
    // Call compl_expr() end
    div_14 = -3'sd2; mul_14 = -8'sd72; add_14 = -5'sd9; sub_14 = -4'sd6; add2_14 = -9'sd142; doDiv_14 = 1;
    // Call compl_expr() begin
    x_14 = -6'sd24;
    y_14 = 6;
    z_15 = 2'd2;
    r_14 = '0;
    if (1)
    begin
        r_14 = (x_14 / y_14) / signed'({1'b0, z_15});
        r_14 = 16'(x_14 * y_14) / signed'({1'b0, z_15});
        r_14 = 9'(x_14 + y_14) / signed'({1'b0, z_15});
        r_14 = (x_14 / y_14) - signed'({1'b0, z_15});
    end
    r_14 = (x_14 * y_14) + signed'({1'b0, z_15});
    // Call compl_expr() end
    div_15 = -3'sd2; mul_15 = -8'sd72; add_15 = -5'sd9; sub_15 = -4'sd6; add2_15 = -9'sd142; doDiv_15 = 1;
    // Call compl_expr() begin
    x_15 = -6'sd24;
    y_15 = 6;
    z_16 = 2'd2;
    r_15 = '0;
    if (1)
    begin
        r_15 = (x_15 / y_15) / signed'({1'b0, z_16});
        r_15 = 64'(x_15 * y_15) / signed'({1'b0, z_16});
        r_15 = 33'(x_15 + y_15) / signed'({1'b0, z_16});
        r_15 = (x_15 / y_15) - signed'({1'b0, z_16});
    end
    r_15 = (x_15 * y_15) + signed'({1'b0, z_16});
    // Call compl_expr() end
    div_16 = -3'sd2; mul_16 = -8'sd72; add_16 = -5'sd9; sub_16 = -4'sd6; add2_16 = -9'sd142; doDiv_16 = 1;
    // Call compl_expr() begin
    x_16 = -6'sd24;
    y_16 = 6;
    z_17 = 2'd2;
    r_16 = '0;
    if (1)
    begin
        r_16 = (x_16 / y_16) / signed'({1'b0, z_17});
        r_16 = 16'(x_16 * y_16) / signed'({1'b0, z_17});
        r_16 = 9'(x_16 + y_16) / signed'({1'b0, z_17});
        r_16 = (x_16 / y_16) - signed'({1'b0, z_17});
    end
    r_16 = (x_16 * y_16) + signed'({1'b0, z_17});
    // Call compl_expr() end
    div_17 = -3'sd2; mul_17 = -8'sd72; add_17 = -5'sd9; sub_17 = -4'sd6; add2_17 = -9'sd142; doDiv_17 = 1;
    // Call compl_expr() begin
    x_17 = -6'sd24;
    y_17 = 6;
    z_18 = 2'd2;
    r_17 = '0;
    if (1)
    begin
        r_17 = (x_17 / y_17) / signed'({1'b0, z_18});
        r_17 = 16'(x_17 * y_17) / signed'({1'b0, z_18});
        r_17 = 9'(x_17 + y_17) / signed'({1'b0, z_18});
        r_17 = (x_17 / y_17) - signed'({1'b0, z_18});
    end
    r_17 = (x_17 * y_17) + signed'({1'b0, z_18});
    // Call compl_expr() end
    div_18 = -3'sd2; mul_18 = -8'sd72; add_18 = -5'sd9; sub_18 = -4'sd6; add2_18 = -9'sd142; doDiv_18 = 1;
    // Call compl_expr() begin
    x_18 = -6'sd24;
    y_18 = 6;
    z_19 = 2'd2;
    r_18 = '0;
    if (1)
    begin
        r_18 = (x_18 / y_18) / signed'({1'b0, z_19});
        r_18 = 40'(x_18 * y_18) / signed'({1'b0, z_19});
        r_18 = 33'(x_18 + y_18) / signed'({1'b0, z_19});
        r_18 = (x_18 / y_18) - signed'({1'b0, z_19});
    end
    r_18 = (x_18 * y_18) + signed'({1'b0, z_19});
    // Call compl_expr() end
    div_19 = -3'sd2; mul_19 = -8'sd72; add_19 = -5'sd9; sub_19 = -4'sd6; add2_19 = -9'sd142; doDiv_19 = 1;
    // Call compl_expr() begin
    x_19 = -6'sd24;
    y_19 = 6;
    z_20 = 2'd2;
    r_19 = '0;
    if (1)
    begin
        r_19 = (x_19 / y_19) / signed'({1'b0, z_20});
        r_19 = 16'(x_19 * y_19) / signed'({1'b0, z_20});
        r_19 = 9'(x_19 + y_19) / signed'({1'b0, z_20});
        r_19 = (x_19 / y_19) - signed'({1'b0, z_20});
    end
    r_19 = (x_19 * y_19) + signed'({1'b0, z_20});
    // Call compl_expr() end
    div_20 = -3'sd2; mul_20 = -8'sd72; add_20 = -5'sd9; sub_20 = -4'sd6; add2_20 = -9'sd142; doDiv_20 = 1;
    // Call compl_expr() begin
    x_20 = -6'sd24;
    y_20 = 6;
    z_21 = 2'd2;
    r_20 = '0;
    if (1)
    begin
        r_20 = (x_20 / y_20) / signed'({1'b0, z_21});
        r_20 = 98'(x_20 * y_20) / signed'({1'b0, z_21});
        r_20 = 66'(x_20 + y_20) / signed'({1'b0, z_21});
        r_20 = (x_20 / y_20) - signed'({1'b0, z_21});
    end
    r_20 = (x_20 * y_20) + signed'({1'b0, z_21});
    // Call compl_expr() end
end

//------------------------------------------------------------------------------
// Method process: liter_suff_U (test_binary_signed.cpp:850:5) 

always_comb 
begin : liter_suff_U     // test_binary_signed.cpp:850:5
    logic x;
    logic y;
    integer x_1;
    integer unsigned x_2;
    logic signed [63:0] x_3;
    logic [63:0] x_4;
    logic signed [63:0] x_5;
    logic [63:0] x_6;
    y = '0;
    // Call liter_suff_U_T() begin
    x_1 = '0;
    x_1 = 1;
    x_1 = -3'sd3;
    x_1 = 3;
    x_1 = x_1 + 3'sd3;
    x_1 = 3 > x_1;
    x_1 = -4'sd4;
    x_1 = 4'sd4;
    x_1 = x_1 + 3'd4;
    x_1 = 3'd4 > x_1;
    x_1 = -4'sd5;
    x_1 = 8'd5;
    x_1 = 8'd5 + x_1;
    x_1 = 8'd5 > x_1;
    x_1 = -8'sd6;
    x_1 = 8'd6;
    x_1 = 8'sd6 + x_1;
    x_1 = 8'd6 > x_1;
    x_1 = 5'd10;
    x_1 = 2'(U1 - 1'd1 - 1'd0);
    x_1 = 2'(U1 - 1'd1 - 1'd0) > x_1;
    x_1 = signed'({1'b0, U1 + U2}) + S1 + S2;
    tt = 64'(x_1);
    // Call liter_suff_U_T() end
    // Call liter_suff_U_T() begin
    x_2 = '0;
    x_2 = 1'd1;
    x_2 = -3'sd3;
    x_2 = 2'd3;
    x_2 = x_2 + 2'd3;
    x_2 = 2'd3 > x_2;
    x_2 = -4'sd4;
    x_2 = 3'd4;
    x_2 = x_2 + 3'd4;
    x_2 = 3'd4 > x_2;
    x_2 = -4'sd5;
    x_2 = 8'd5;
    x_2 = 8'd5 + x_2;
    x_2 = 8'd5 > x_2;
    x_2 = -8'sd6;
    x_2 = 8'd6;
    x_2 = 8'sd6 + signed'({1'b0, x_2});
    x_2 = 8'd6 > signed'({1'b0, x_2});
    x_2 = 5'd10;
    x_2 = 2'(U1 - 1'd1 - 1'd0);
    x_2 = 2'(U1 - 1'd1 - 1'd0) > x_2;
    x_2 = signed'({1'b0, U1 + U2}) + S1 + S2;
    tt = 64'(x_2);
    // Call liter_suff_U_T() end
    // Call liter_suff_U_T() begin
    x_3 = '0;
    x_3 = '0;
    x_3 = 1;
    x_3 = -3'sd3;
    x_3 = 3;
    x_3 = x_3 + 3'sd3;
    x_3 = 3'sd3 > x_3;
    x_3 = -4'sd4;
    x_3 = 3'd4;
    x_3 = x_3 + 4'sd4;
    x_3 = 4'sd4 > x_3;
    x_3 = -4'sd5;
    x_3 = 8'd5;
    x_3 = 8'd5 + x_3;
    x_3 = 8'd5 > x_3;
    x_3 = -8'sd6;
    x_3 = 8'd6;
    x_3 = 8'sd6 + x_3;
    x_3 = 8'd6 > x_3;
    x_3 = 5'd10;
    x_3 = 2'(U1 - 1'd1 - 1'd0);
    x_3 = 2'(U1 - 1'd1 - 1'd0) > x_3;
    x_3 = signed'({1'b0, U1 + U2}) + S1 + S2;
    tt = 64'(x_3);
    // Call liter_suff_U_T() end
    // Call liter_suff_U_T() begin
    x_4 = '0;
    x_4 = '0;
    x_4 = 1;
    x_4 = -3'sd3;
    x_4 = 3;
    x_4 = x_4 + 2'd3;
    x_4 = 2'd3 > x_4;
    x_4 = -4'sd4;
    x_4 = 3'd4;
    x_4 = x_4 + 3'd4;
    x_4 = 3'd4 > x_4;
    x_4 = -4'sd5;
    x_4 = 8'd5;
    x_4 = 8'd5 + x_4;
    x_4 = 8'd5 > x_4;
    x_4 = -8'sd6;
    x_4 = 8'd6;
    x_4 = 8'd6 + x_4;
    x_4 = 8'd6 > x_4;
    x_4 = 5'd10;
    x_4 = 2'(U1 - 1'd1 - 1'd0);
    x_4 = 2'(U1 - 1'd1 - 1'd0) > x_4;
    x_4 = signed'({1'b0, U1 + U2}) + S1 + S2;
    tt = 64'(x_4);
    // Call liter_suff_U_T() end
    // Call liter_suff_U_T() begin
    x_5 = '0;
    x_5 = '0;
    x_5 = 1;
    x_5 = -3'sd3;
    x_5 = 3;
    x_5 = x_5 + 3'sd3;
    x_5 = 3 > x_5;
    x_5 = -4'sd4;
    x_5 = 3'd4;
    x_5 = x_5 + 4'sd4;
    x_5 = 3'd4 > x_5;
    x_5 = -4'sd5;
    x_5 = 8'd5;
    x_5 = 8'sd5 + x_5;
    x_5 = 8'd5 > x_5;
    x_5 = -8'sd6;
    x_5 = 8'd6;
    x_5 = 8'sd6 + x_5;
    x_5 = 8'd6 > x_5;
    x_5 = 5'd10;
    x_5 = 2'(U1 - 1'd1 - 1'd0);
    x_5 = 2'(U1 - 1'd1 - 1'd0) > x_5;
    x_5 = signed'({1'b0, U1 + U2}) + S1 + S2;
    tt = 64'(x_5);
    // Call liter_suff_U_T() end
    // Call liter_suff_U_T() begin
    x_6 = '0;
    x_6 = '0;
    x_6 = 1;
    x_6 = -3'sd3;
    x_6 = 3;
    x_6 = signed'({1'b0, x_6}) + 3'sd3;
    x_6 = 3 > x_6;
    x_6 = -4'sd4;
    x_6 = 3'd4;
    x_6 = x_6 + 3'd4;
    x_6 = 3'd4 > x_6;
    x_6 = -4'sd5;
    x_6 = 8'd5;
    x_6 = 8'd5 + x_6;
    x_6 = 8'd5 > x_6;
    x_6 = -8'sd6;
    x_6 = 8'd6;
    x_6 = 8'sd6 + signed'({1'b0, x_6});
    x_6 = 8'd6 > x_6;
    x_6 = 5'd10;
    x_6 = 2'(U1 - 1'd1 - 1'd0);
    x_6 = 2'(U1 - 1'd1 - 1'd0) > x_6;
    x_6 = signed'({1'b0, U1 + U2}) + S1 + S2;
    tt = 64'(x_6);
    // Call liter_suff_U_T() end
    tt = x + y;
end

//------------------------------------------------------------------------------
// Method process: self_determined_expr (test_binary_signed.cpp:866:5) 

always_comb 
begin : self_determined_expr     // test_binary_signed.cpp:866:5
    logic k;
    logic [1:0] i;
    logic [2:0] j;
    logic [64:0] bi;
    logic [64:0] bj;
    integer unsigned res;
    logic bres;
    integer x1;
    integer x2;
    logic [66:0] wres;
    logic s_1;
    integer unsigned u;
    k = '0;
    i = 2'd3;
    j = 3'd5;
    bi = 65'h10000000000000000;
    bj = 65'h10000000000000000;
    res = 1'd1 <<< 4'(i + j);
    `ifndef INTEL_SVA_OFF
        assert (res == 9'd256) else $error("Assertion failed at test_binary_signed.cpp:878:9");
    `endif // INTEL_SVA_OFF
    res = 13'h1000 >>> 4'(i + j);
    `ifndef INTEL_SVA_OFF
        assert (res == 5'd16) else $error("Assertion failed at test_binary_signed.cpp:882:9");
    `endif // INTEL_SVA_OFF
    k = 1;
    res = (i + j) + k;
    `ifndef INTEL_SVA_OFF
        assert (res == 4'd9) else $error("Assertion failed at test_binary_signed.cpp:887:9");
    `endif // INTEL_SVA_OFF
    k = '0;
    x1 = 1 <<< 3'(2'd2 + 2'd2);
    `ifndef INTEL_SVA_OFF
        assert (x1 == 16) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    x2 = 1 <<< 4'(2'd2 * 2'd2);
    `ifndef INTEL_SVA_OFF
        assert (x2 == 16) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bres = 4'(i + j) == k;
    `ifndef INTEL_SVA_OFF
        assert (!bres) else $error("Assertion failed at test_binary_signed.cpp:902:9");
    `endif // INTEL_SVA_OFF
    bres = 3'(2'd2 + 2'd2) == k;
    `ifndef INTEL_SVA_OFF
        assert (!bres) else $error("Assertion failed at test_binary_signed.cpp:906:9");
    `endif // INTEL_SVA_OFF
    bres = 4'(i + j) > z;
    `ifndef INTEL_SVA_OFF
        assert (bres) else $error("Assertion failed at test_binary_signed.cpp:910:9");
    `endif // INTEL_SVA_OFF
    bres = 66'(bi + bj) == k;
    `ifndef INTEL_SVA_OFF
        assert (!bres) else $error("Assertion failed at test_binary_signed.cpp:914:9");
    `endif // INTEL_SVA_OFF
    bres = 66'(bi + bj) > z;
    `ifndef INTEL_SVA_OFF
        assert (bres) else $error("Assertion failed at test_binary_signed.cpp:918:9");
    `endif // INTEL_SVA_OFF
    res = |5'(i + j + z) ? 1 : 2;
    `ifndef INTEL_SVA_OFF
        assert (res == 1'd1) else $error("Assertion failed at test_binary_signed.cpp:924:9");
    `endif // INTEL_SVA_OFF
    res = |4'(2'd2 + 2'd2 + z) ? 1 : 2;
    `ifndef INTEL_SVA_OFF
        assert (res == 1'd1) else $error("Assertion failed at test_binary_signed.cpp:928:9");
    `endif // INTEL_SVA_OFF
    if (|5'(i + j + z))
    begin
        res = 1'd1;
    end else begin
        res = 2'd2;
    end
    `ifndef INTEL_SVA_OFF
        assert (res == 1'd1) else $error("Assertion failed at test_binary_signed.cpp:933:9");
    `endif // INTEL_SVA_OFF
    bres = |5'(i + j + z);
    `ifndef INTEL_SVA_OFF
        assert (bres) else $error("Assertion failed at test_binary_signed.cpp:938:9");
    `endif // INTEL_SVA_OFF
    bres = |4'(2'd2 + 2'd2 + z);
    `ifndef INTEL_SVA_OFF
        assert (bres) else $error("Assertion failed at test_binary_signed.cpp:942:9");
    `endif // INTEL_SVA_OFF
    res = |4'(i + j) + 2'sd1;
    `ifndef INTEL_SVA_OFF
        assert (res == 2'd2) else $error("Assertion failed at test_binary_signed.cpp:947:9");
    `endif // INTEL_SVA_OFF
    bres = |4'(i + 2'd2 + z) && |4'(i + j);
    `ifndef INTEL_SVA_OFF
        assert (bres) else $error("Assertion failed at test_binary_signed.cpp:953:9");
    `endif // INTEL_SVA_OFF
    bres = !(!(|5'(i + j + z)) || !(|4'(2'd2 + j)));
    `ifndef INTEL_SVA_OFF
        assert (bres) else $error("Assertion failed at test_binary_signed.cpp:957:9");
    `endif // INTEL_SVA_OFF
    res = 5'(i + j + z) | 4'(i + j);
    `ifndef INTEL_SVA_OFF
        assert (|res) else $error("Assertion failed at test_binary_signed.cpp:962:9");
    `endif // INTEL_SVA_OFF
    wres = 67'(bi + bj + z) | 66'(bi + bj);
    `ifndef INTEL_SVA_OFF
        assert (wres == 66'h20000000000000000) else $error("Assertion failed at test_binary_signed.cpp:966:9");
    `endif // INTEL_SVA_OFF
    s_1 = i + j + z;
    `ifndef INTEL_SVA_OFF
        assert (s_1 == 1'd0) else $error("Assertion failed at test_binary_signed.cpp:971:9");
    `endif // INTEL_SVA_OFF
    i = 3;
    bres = ++i == k;
    `ifndef INTEL_SVA_OFF
        assert (bres) else $error("Assertion failed at test_binary_signed.cpp:977:9");
    `endif // INTEL_SVA_OFF
    u = '0;
    bres = --u == k;
    `ifndef INTEL_SVA_OFF
        assert (!bres) else $error("Assertion failed at test_binary_signed.cpp:982:9");
    `endif // INTEL_SVA_OFF
    i = 3;
    res = 1 <<< 3'(i + 1'd1);
    `ifndef INTEL_SVA_OFF
        assert (res == 5'd16) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    res = 1 <<< 4'(i * 2'd2);
    `ifndef INTEL_SVA_OFF
        assert (res == 7'd64) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    res = 1 <<< 6'(2'd2 * i + j - 1'd1);
    `ifndef INTEL_SVA_OFF
        assert (res == 11'd1024) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    j = 7;
    res = (j + 1'd1) + (i * 2'd2);
    `ifndef INTEL_SVA_OFF
        assert (res == 4'd14) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    bres = (4'(j + 1'd1) == 1'd0) || (4'(i * 2'd2) == 1'd0);
    `ifndef INTEL_SVA_OFF
        assert (!bres) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: cpp_overflow (test_binary_signed.cpp:1026:5) 

always_comb 
begin : cpp_overflow     // test_binary_signed.cpp:1026:5
    integer unsigned i1;
    integer unsigned i2;
    integer si1;
    integer si2;
    logic [63:0] y1;
    logic [63:0] y2;
    logic signed [63:0] sy1;
    logic signed [63:0] sy2;
    logic [63:0] x1;
    logic [63:0] x2;
    logic signed [63:0] sx1;
    logic signed [63:0] sx2;
    logic [67:0] x3;
    logic signed [67:0] sx3;
    i1 = 1'd1 <<< 31;
    i2 = 2'd2;
    si1 = 1'd1 <<< 31;
    si2 = -3'sd2;
    y1 = 1'd1 <<< 63;
    y2 = 2'd2;
    sy1 = 1'd1 <<< 63;
    sy2 = -3'sd2;
    x1 = 1'd1 <<< 63;
    x2 = 2'd2;
    sx1 = 1'd1 <<< 63;
    sx2 = -3'sd2;
    x3 = '0;
    sx3 = '0;
    x3 = i1 * i2;
    x3 = si1 * si2;
    x3 = i1 * si2;
    x3 = y1 * y2;
    x3 = sy1 * sy2;
    x3 = y1 * sy2;
    x3 = x1 * x2;
    `ifndef INTEL_SVA_OFF
        assert (x3 == 68'h10000000000000000) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    sx3 = sx1 * sx2;
    `ifndef INTEL_SVA_OFF
        assert (sx3 == 68'h10000000000000000) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    sx3 = signed'({1'b0, x1}) * sx2;
    `ifndef INTEL_SVA_OFF
        assert (x3 == 68'h10000000000000000) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    i1 = 32'hFFFFFFFF;
    si1 = -33'sh80000000;
    x3 = ++i1;
    x3 = --si1;
    y1 = 64'hFFFFFFFFFFFFFFFF;
    sy1 = -65'sh8000000000000000;
    x3 = ++y1;
    x3 = --sy1;
end

//------------------------------------------------------------------------------
// Method process: cpp_overflow2 (test_binary_signed.cpp:1105:5) 

always_comb 
begin : cpp_overflow2     // test_binary_signed.cpp:1105:5
    integer unsigned i1;
    integer unsigned i2;
    integer si1;
    integer si2;
    logic [15:0] y1;
    logic [15:0] y2;
    logic signed [15:0] sy;
    logic signed [15:0] sy1;
    logic signed [15:0] sy2;
    logic [15:0] x1;
    logic [15:0] x2;
    logic signed [15:0] sx1;
    logic signed [15:0] sx2;
    logic [41:0] x3;
    logic signed [41:0] sx3;
    i1 = 1'd1 <<< 31;
    i2 = 2'd2;
    si1 = 1'd1 <<< 31;
    si2 = -3'sd2;
    y1 = 2'd3;
    y2 = 2'd2;
    sy = 3;
    sy1 = -3'sd3;
    sy2 = -3'sd2;
    x1 = 2'd3;
    x2 = 2'd2;
    sx1 = -3'sd3;
    sx2 = -3'sd2;
    x3 = '0;
    sx3 = '0;
    x3 = y1 + sy2;
    x3 = y2 + sy2;
    x3 = sy + sy2;
    `ifndef INTEL_SVA_OFF
        assert (x3 == 1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    sx3 = y2 + sy2;
    x3 = signed'({1'b0, x1}) + sx2;
    `ifndef INTEL_SVA_OFF
        assert (x3 == 1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    sx3 = signed'({1'b0, x2}) + sx1;
    `ifndef INTEL_SVA_OFF
        assert (sx3 == -2'sd1) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    x3 = signed'({1'b0, x2}) + sx2;
    `ifndef INTEL_SVA_OFF
        assert (x3 == 0) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    sx3 = signed'({1'b0, x2}) + sx2;
    `ifndef INTEL_SVA_OFF
        assert (sx3 == 0) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: cpp_overflow3 (test_binary_signed.cpp:1158:5) 

always_comb 
begin : cpp_overflow3     // test_binary_signed.cpp:1158:5
    logic [6:0] k;
    logic [6:0] m;
    logic [7:0] res;
    integer unsigned u;
    k = '0;
    m = '0;
    k = 41;
    m = 42;
    res = '0;
    res = 8'(k - m) % 4'd11;
    res = 8'(k - m) % 4'd11;
    `ifndef INTEL_SVA_OFF
        assert (res == 2'd2) else $error("Assertion failed at test_binary_signed.cpp:62:24>");
    `endif // INTEL_SVA_OFF
    u = 1'd1;
    res = u <<< 32;
end

//------------------------------------------------------------------------------
// Method process: sc_unsigned_error (test_binary_signed.cpp:1008:5) 

always_comb 
begin : sc_unsigned_error     // test_binary_signed.cpp:1008:5
    logic [64:0] bi;
    logic [64:0] bj;
    bi = '0;
    bj = '0;
    bi = sbu1 <<< sbu2;
    bj = s | bi;
    tt2 = 32'(bj);
end

//------------------------------------------------------------------------------
// Method process: others (test_binary_signed.cpp:1179:5) 

always_comb 
begin : others     // test_binary_signed.cpp:1179:5
    integer a_1;
    integer unsigned u;
    logic c;
    logic k;
    logic [1:0] i;
    logic [2:0] j;
    logic [64:0] bi;
    logic [64:0] bj;
    logic [65:0] res;
    integer unsigned m0;
    a_1 = -4'sd5;
    u = 1'd1;
    k = '0;
    i = 2'd3;
    j = 3'd5;
    bi = 65'h10000000000000000;
    bj = 65'h10000000000000000;
    res = '0;
    c = 4'(i + j) == k;
    `ifndef INTEL_SVA_OFF
        assert (!c) else $error("Assertion failed at test_binary_signed.cpp:1194:9");
    `endif // INTEL_SVA_OFF
    c = 66'(bi + bj) == k;
    `ifndef INTEL_SVA_OFF
        assert (!c) else $error("Assertion failed at test_binary_signed.cpp:1199:9");
    `endif // INTEL_SVA_OFF
    m0 = 5'd31;
    c = |32'(1'd1 <<< m0);
    m0 = 7'd64;
    c = |64'(1'd1 <<< m0);
    m0 = 6'd32;
    res = 1'd1 <<< m0;
    m0 = 6'd32;
    res = 32'd1 <<< m0;
    c = |64'(32'd1 <<< m0);
    `ifndef INTEL_SVA_OFF
        assert (c) else $error("Assertion failed at test_binary_signed.cpp:1222:9");
    `endif // INTEL_SVA_OFF
    m0 = 7'd64;
    res = 66'd1 <<< m0;
    c = res != 0;
    `ifndef INTEL_SVA_OFF
        assert (c) else $error("Assertion failed at test_binary_signed.cpp:1228:9");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: assign_s (test_binary_signed.cpp:1231:5) 

assign s = '0;
assign z = '0;

endmodule


