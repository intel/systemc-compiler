//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "top_inst"
(
);

// Variables generated for SystemC signals
logic last_beat_resp;
logic [1:0] active_trans[2];
logic beat_extra_tags[2][4];
logic master_resp_tag;
logic [41:0] resp_fifo_out;

// Local parameters generated for C++ constants
localparam logic USE_TRANS_INTERLEAVE_F = 0;
localparam logic USE_TRANS_INTERLEAVE_T = 1;
localparam logic [31:0] EXTRA_TAG_WIDTH = 4;
localparam logic [31:0] TAG_WIDTH = 4;
localparam logic [31:0] REORDER_TAG_WIDTH = 1;
localparam logic [31:0] ACTIVE_BEAT_NUM_WIDTH = 2;

//------------------------------------------------------------------------------
// Method process: parseResponseProc0 (test_const_compl_cond.cpp:60:5) 

always_comb 
begin : parseResponseProc0     // test_const_compl_cond.cpp:60:5
    if (0)
    begin
    end else begin
        last_beat_resp = '0;
    end
end

//------------------------------------------------------------------------------
// Method process: parseResponseProc1 (test_const_compl_cond.cpp:70:5) 

always_comb 
begin : parseResponseProc1     // test_const_compl_cond.cpp:70:5
    if (1)
    begin
        last_beat_resp = 1'd1;
    end
end

//------------------------------------------------------------------------------
// Method process: parseResponseProc2 (test_const_compl_cond.cpp:85:5) 

always_comb 
begin : parseResponseProc2     // test_const_compl_cond.cpp:85:5
    logic [3:0] respTag;
    logic transIndex;
    logic transId;
    logic extraTag;
    logic [1:0] beatId;
    respTag = 4'(resp_fifo_out[5 : 2]);
    transIndex = respTag[3 : 2];
    transId = active_trans[transIndex][0 : 0];
    extraTag = '0;
    if (1)
    begin
        beatId = respTag[1 : 0];
        extraTag = beat_extra_tags[transIndex][beatId];
        master_resp_tag = {extraTag, transId};
    end
    if (1)
    begin
        last_beat_resp = 1'd1;
    end
end

endmodule


