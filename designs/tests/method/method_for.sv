//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// Variables generated for SystemC signals
logic a;
logic b;
logic c;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .a(a),
  .b(b),
  .c(c)
);

endmodule



//==============================================================================
//
// Module: A (test_for.cpp:317:5)
//
module A // "b_mod.a_mod"
(
    input logic a,
    output logic b,
    output logic c
);

// Variables generated for SystemC signals
logic [7:0] s2;
logic signed [31:0] r0a;
logic signed [31:0] r0;
logic signed [31:0] r1;
logic signed [31:0] r2;

// Local parameters generated for C++ constants
localparam logic signed [31:0] m = 11;
localparam logic [31:0] PORT_NUM = 1;

//------------------------------------------------------------------------------
// Method process: requestProc (test_for.cpp:69:5) 

always_comb 
begin : requestProc     // test_for.cpp:69:5
    logic reqReady;
    reqReady = 1'd1;
    for (int port = 0; port < PORT_NUM; port++)
    begin
        reqReady = reqReady && a;
    end
    for (int port_1 = 0; port_1 < PORT_NUM; port_1++)
    begin
        reqReady = reqReady || a;
    end
end

//------------------------------------------------------------------------------
// Method process: for_stmt_empty (test_for.cpp:82:5) 
// Empty process, no code generated 

//------------------------------------------------------------------------------
// Method process: for_stmt1 (test_for.cpp:88:5) 
// Empty process, no code generated 

//------------------------------------------------------------------------------
// Method process: for_stmt2 (test_for.cpp:100:5) 

always_comb 
begin : for_stmt2     // test_for.cpp:100:5
    integer j;
    integer l;
    integer l_1;
    j = a;
    for (int i = 0; i < 2; i++)
    begin
        j = j + 2'sd1;
        l = 3'sd2 * j;
        if (a)
        begin
            l_1 = 3'sd3 * j;
            b = |l_1;
        end
        b = |l;
    end
    b = |j;
end

//------------------------------------------------------------------------------
// Method process: for_stmt3 (test_for.cpp:117:5) 

always_comb 
begin : for_stmt3     // test_for.cpp:117:5
end

//------------------------------------------------------------------------------
// Method process: for_stmt3a (test_for.cpp:130:5) 

always_comb 
begin : for_stmt3a     // test_for.cpp:130:5
end

//------------------------------------------------------------------------------
// Method process: for_stmt4 (test_for.cpp:147:5) 

always_comb 
begin : for_stmt4     // test_for.cpp:147:5
    integer i;
    i = '0;
    for (; i < 2; i++)
    begin
    end
end

//------------------------------------------------------------------------------
// Method process: for_stmt5 (test_for.cpp:163:5) 

always_comb 
begin : for_stmt5     // test_for.cpp:163:5
    integer i;
    i = '0;
    for (; i < 2; i++)
    begin
    end
end

//------------------------------------------------------------------------------
// Method process: for_stmt6 (test_for.cpp:177:5) 

always_comb 
begin : for_stmt6     // test_for.cpp:177:5
    integer k_1;
    k_1 = '0;
    for (int i = 0; i < 2; i++)
    begin
        for (int j = 0; j < 3; j++)
        begin
            k_1 = k_1 + 2'sd1;
        end
    end
end

//------------------------------------------------------------------------------
// Method process: for_stmt7 (test_for.cpp:189:5) 

always_comb 
begin : for_stmt7     // test_for.cpp:189:5
    integer k_1;
    k_1 = '0;
    for (int i = 0; i < 2; i++)
    begin
        for (int j = 0; j < 3; j++)
        begin
            k_1 = k_1 + i;
        end
    end
end

//------------------------------------------------------------------------------
// Method process: for_stmt8 (test_for.cpp:202:5) 

always_comb 
begin : for_stmt8     // test_for.cpp:202:5
    s2 = '0;
    for (int i = 0; i < 2; i++)
    begin
        for (int j = 0; j < 3; j++)
        begin
            if (a)
            begin
                for (int k_1 = 0; k_1 < 3; k_1++)
                begin
                    s2 = k_1 + 2'sd1;
                end
            end
            for (int k_2 = 0; k_2 < 3; k_2++)
            begin
                if (a)
                begin
                    s2 = k_2 + 3'sd2;
                end
            end
        end
    end
end

//------------------------------------------------------------------------------
// Method process: sc_type_for (test_for.cpp:226:5) 

always_comb 
begin : sc_type_for     // test_for.cpp:226:5
    integer a_1[8];
    for (logic [3:0] i = 1'd0; i < 8; i++)
    begin
        a_1[i] = i;
    end
    r0a = a_1[1];
end

//------------------------------------------------------------------------------
// Method process: for_false (test_for.cpp:237:5) 

always_comb 
begin : for_false     // test_for.cpp:237:5
    integer k_1;
    k_1 = '0;
    r0 = k_1;
end

//------------------------------------------------------------------------------
// Method process: for_false_extr1 (test_for.cpp:247:5) 

always_comb 
begin : for_false_extr1     // test_for.cpp:247:5
    integer k_1;
    integer i;
    k_1 = '0;
    i = 10;
    r1 = k_1 + i;
end

//------------------------------------------------------------------------------
// Method process: for_false_extr2 (test_for.cpp:258:5) 

always_comb 
begin : for_false_extr2     // test_for.cpp:258:5
    integer k_1;
    integer i;
    k_1 = '0;
    i = 10;
    r2 = k_1 + i;
end

endmodule


