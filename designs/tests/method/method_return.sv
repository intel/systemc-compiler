//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: test ()
//
module test // "t_inst"
(
);

// Variables generated for SystemC signals
logic [2:0] s;
logic t;
logic signed [31:0] t0;
logic signed [31:0] t1;
logic signed [31:0] t2;
logic signed [31:0] t3;
logic signed [31:0] t4;

//------------------------------------------------------------------------------
// Method process: return_method1 (test_return.cpp:52:5) 

always_comb 
begin : return_method1     // test_return.cpp:52:5
    integer x;
    x = '0;
    t0 = '0;
    if (|s)
    begin
    end else begin
        x = 1;
        t0 = x;
    end
end

//------------------------------------------------------------------------------
// Method process: return_func1 (test_return.cpp:77:5) 

always_comb 
begin : return_func1     // test_return.cpp:77:5
    logic [3:0] TMP_0;
    logic [3:0] res;
    logic [3:0] a;
    logic TMP_2;
    logic [3:0] TMP_3;
    logic b;
    // Call f1() begin
    res = s;
    TMP_0 = res;
    // Call f1() end
    a = TMP_0;
    // Call f2() begin
    // Call f1() begin
    res = s;
    TMP_3 = res;
    // Call f1() end
    TMP_2 = s == 1'd1 || |TMP_3;
    // Call f2() end
    b = TMP_2;
    t1 = a + b;
end

//------------------------------------------------------------------------------
// Method process: return_func2 (test_return.cpp:106:5) 

always_comb 
begin : return_func2     // test_return.cpp:106:5
    logic signed [7:0] val1;
    logic signed [7:0] val2;
    logic signed [7:0] TMP_0;
    logic signed [7:0] par1;
    integer c;
    val1 = '0;
    val2 = '0;
    par1 = val1;
    // Call f3() begin
    if (s == 1'd1)
    begin
        TMP_0 = par1;
    end else begin
        if (s == 2'd2)
        begin
            if (s == 2'd3)
            begin
                if (s == 3'd4)
                begin
                    TMP_0 = 1;
                end else begin
                    TMP_0 = 2;
                end
            end else begin
                TMP_0 = val2;
            end
        end else begin
            TMP_0 = val1;
        end
    end
    // Call f3() end
    c = TMP_0;
    t2 = c;
end

//------------------------------------------------------------------------------
// Method process: return_func3 (test_return.cpp:132:5) 

always_comb 
begin : return_func3     // test_return.cpp:132:5
    logic [7:0] val3;
    logic [7:0] val4;
    logic [7:0] TMP_0;
    logic [7:0] par1;
    integer unsigned d;
    val3 = '0;
    val4 = '0;
    par1 = val3;
    // Call f4() begin
    if (s == 1'd1)
    begin
        TMP_0 = par1;
    end else begin
        if (s == 2'd2)
        begin
            TMP_0 = val4 + 1'd1;
        end else begin
            if (s == 2'd3)
            begin
                TMP_0 = val3;
            end else begin
                TMP_0 = val4;
            end
        end
    end
    // Call f4() end
    d = TMP_0;
    t3 = d;
end

//------------------------------------------------------------------------------
// Method process: return_func4 (test_return.cpp:153:5) 

always_comb 
begin : return_func4     // test_return.cpp:153:5
    logic TMP_0;
    logic i;
    // Call f5() begin
    if (|s)
    begin
        TMP_0 = t;
    end else begin
        if (t)
        begin
            TMP_0 = t;
        end else begin
            TMP_0 = s != 1'd0 ? 1 : t;
        end
    end
    // Call f5() end
    i = TMP_0;
    t4 = i;
end

//------------------------------------------------------------------------------
// Method process: return_empty (test_return.cpp:177:5) 

always_comb 
begin : return_empty     // test_return.cpp:177:5
    logic par;
    par = t;
end

//------------------------------------------------------------------------------
// Method process: return_switch1 (test_return.cpp:195:5) 

always_comb 
begin : return_switch1     // test_return.cpp:195:5
    integer unsigned TMP_0;
    // Call sw1() begin
    case (s)
    1 : begin
        TMP_0 = 2'd2;
    end
    2 : begin
        TMP_0 = 2'd3;
    end
    default : begin
        TMP_0 = '0;
    end
    endcase
    // Call sw1() end
end

//------------------------------------------------------------------------------
// Method process: return_switch2 (test_return.cpp:210:5) 

always_comb 
begin : return_switch2     // test_return.cpp:210:5
    logic [7:0] val1;
    logic [7:0] val2;
    integer unsigned TMP_0;
    logic [7:0] par1;
    val1 = s;
    val2 = '0;
    par1 = val1 + 1'd1;
    // Call sw2() begin
    case (par1)
    1 : begin
        TMP_0 = par1;
    end
    2 : begin
        TMP_0 = val2;
    end
    3 : begin  // Empty case without break
        TMP_0 = par1 + val2;
    end
    default : begin
        TMP_0 = par1 + val2;
    end
    endcase
    // Call sw2() end
end

endmodule


