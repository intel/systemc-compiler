//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a_mod"
(
    input logic clk
);

// Variables generated for SystemC signals
logic r;
logic [2:0] s;
logic signed [31:0] t0;
logic [7:0] c1;
logic signed [15:0] c2;
logic [65:0] c3;
logic signed [69:0] c4;
logic [3:0] byte_enbl;

// Local parameters generated for C++ constants
localparam logic [15:0] C1 = 42;
localparam logic [31:0] C2 = 41;
localparam logic [3:0] SU = 4;
localparam logic signed [3:0] SI = -4'sd4;
localparam logic [31:0] BYTE_NUMBER = 4;
localparam logic [31:0] PORT_NUM = 1;
localparam logic [31:0] DATA_WIDTH = 8;
localparam logic [31:0] U = 4;
localparam logic signed [31:0] I = -4'sd4;

//------------------------------------------------------------------------------
// Method process: zeroAssign (test_const_liter.cpp:76:5) 

always_comb 
begin : zeroAssign     // test_const_liter.cpp:76:5
    logic [3:0] u1;
    logic [7:0] u2;
    u1 = '0;
    u2 = u1;
    u2 = '0;
    t0 = u2;
end

//------------------------------------------------------------------------------
// Method process: literSignedWarning (test_const_liter.cpp:86:5) 

always_comb 
begin : literSignedWarning     // test_const_liter.cpp:86:5
    logic [3:0] a;
    integer i;
    logic b;
    logic [3:0] c;
    a = '0;
    i = 1;
    b = |(a & i);
    b = |(a & 1'd1);
    c = a & 2'd3;
    c = a | i;
end

//------------------------------------------------------------------------------
// Method process: boolAsSigned (test_const_liter.cpp:96:5) 

always_comb 
begin : boolAsSigned     // test_const_liter.cpp:96:5
    logic [3:0] a;
    logic b;
    logic [3:0] c;
    logic d;
    a = s;
    b = r;
    c = |a || b;
    d = b && a == 1'd1;
    d = |a && b || c != 2'd2;
end

//------------------------------------------------------------------------------
// Method process: sc_shift_type_extension_channel (test_const_liter.cpp:112:5) 

always_comb 
begin : sc_shift_type_extension_channel     // test_const_liter.cpp:112:5
    logic [7:0] a;
    logic [65:0] x;
    a = '0;
    x = '0;
    a = 17'(c1 + c2) >>> 8;
    a = 24'(c1 * c2) >>> 8;
    x = 137'(signed'({1'b0, c3}) * c4 - c2) >>> 17'(c1 + c2);
end

//------------------------------------------------------------------------------
// Method process: smemByte2Bit (test_const_liter.cpp:139:5) 

always_comb 
begin : smemByte2Bit     // test_const_liter.cpp:139:5
    logic [31:0] TMP_0;
    logic [31:0] bitEn;
    integer i;
    logic [31:0] biten;
    // Call byteEn2bitEn() begin
    bitEn = '0;
    for (int i_1 = 32'(BYTE_NUMBER - 1); i_1 >= 0; --i_1)
    begin
        bitEn = 40'(bitEn <<< 8) | (byte_enbl[i_1] ? 'hFF : 0);
    end
    TMP_0 = bitEn;
    // Call byteEn2bitEn() end
    biten = TMP_0;
end

//------------------------------------------------------------------------------
// Method process: extra_signed_remove (test_const_liter.cpp:154:5) 

// Process-local variables
logic arr[10];

always_comb 
begin : extra_signed_remove     // test_const_liter.cpp:154:5
    logic [15:0] d;
    integer unsigned e;
    logic [4:0] ee;
    logic [3:0] dd;
    logic signed [3:0] c;
    integer unsigned uu;
    integer unsigned u;
    integer ww;
    integer w;
    integer j;
    integer unsigned jj;
    logic [15:0] a;
    integer k;
    logic k_1;
    logic b;
    integer k_2;
    d = 9'd257;
    e = signed'({1'b0, 8'(d)}) + 2'sd1;
    `ifndef INTEL_SVA_OFF
        assert (e == 2'd2) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    e = signed'({1'b0, d}) - 2'sd1;
    e = signed'({1'b0, d}) * 2'sd1;
    e = signed'({1'b0, d}) & 2'sd1;
    e = d >>> 1;
    ee = '0;
    dd = 4'd14;
    ee = dd * 2'd3;
    `ifndef INTEL_SVA_OFF
        assert (ee == 4'd10) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    ee = dd + 6'd42;
    `ifndef INTEL_SVA_OFF
        assert (ee == 5'd24) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    ee = dd <<< 2;
    `ifndef INTEL_SVA_OFF
        assert (ee == 5'd24) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    ee = dd - 3'd4;
    `ifndef INTEL_SVA_OFF
        assert (ee == 4'd10) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = -4'sd5;
    uu = 1'd1;
    u = signed'({1'b0, uu}) + c;
    `ifndef INTEL_SVA_OFF
        assert (signed'({1'b0, u}) == 32'hFFFFFFFC) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    ww = -7'sd42;
    w = ww + u;
    `ifndef INTEL_SVA_OFF
        assert (w == -7'sd46) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    j = -C1;
    `ifndef INTEL_SVA_OFF
        assert (j == -7'sd42) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    j = j + (-C2);
    `ifndef INTEL_SVA_OFF
        assert (j == -8'sd83) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    j = j - C2;
    `ifndef INTEL_SVA_OFF
        assert (j == -8'sd124) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    j--;
    `ifndef INTEL_SVA_OFF
        assert (j == -8'sd125) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    jj = C1;
    jj = jj + C1;
    jj = jj + (-5'sd10);
    `ifndef INTEL_SVA_OFF
        assert (jj == 7'd74) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    jj = (-5'sd10) + jj;
    `ifndef INTEL_SVA_OFF
        assert (jj == 7'd64) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    jj = jj - C1;
    `ifndef INTEL_SVA_OFF
        assert (jj == 5'd22) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    a = '0;
    for (int i = 0; i < 2; i++)
    begin
        k = a[i * DATA_WIDTH +: 2];
        k = a[i + DATA_WIDTH + PORT_NUM + 1];
    end
    for (int i_1 = 0; i_1 < 2; i_1++)
    begin
        k_1 = arr[i_1 + 1 + PORT_NUM];
    end
    b = r;
    if (b == r)
    begin
        k_2 = 1;
    end
end

//------------------------------------------------------------------------------
// Method process: signed_unsigned (test_const_liter.cpp:547:5) 

always_comb 
begin : signed_unsigned     // test_const_liter.cpp:547:5
    integer a;
    integer i;
    integer unsigned u;
    logic [3:0] su;
    logic [3:0] si;
    logic [3:0] bu;
    logic signed [3:0] bi;
    logic c;
    logic signed [3:0] a_1;
    integer i_1;
    integer unsigned u_1;
    logic [3:0] su_1;
    logic [3:0] si_1;
    logic [3:0] bu_1;
    logic signed [3:0] bi_1;
    logic c_1;
    logic signed [3:0] a_2;
    integer i_2;
    integer unsigned u_2;
    logic [3:0] su_2;
    logic [3:0] si_2;
    logic [3:0] bu_2;
    logic signed [3:0] bi_2;
    logic c_2;
    integer unsigned ua;
    logic [3:0] sua;
    logic [3:0] bua;
    integer i_3;
    integer unsigned u_3;
    logic [3:0] su_3;
    logic signed [3:0] si_3;
    logic [3:0] bu_3;
    logic signed [3:0] bi_3;
    logic c_3;
    logic [7:0] ssu;
    logic [7:0] buu;
    integer i_4;
    integer unsigned u_4;
    logic [7:0] su_4;
    logic signed [7:0] si_4;
    logic [7:0] bu_4;
    logic signed [7:0] bi_4;
    integer unsigned la;
    logic signed [7:0] lb;
    logic signed [15:0] lc;
    logic signed [63:0] ld;
    logic [7:0] le;
    logic [15:0] lf;
    logic signed [15:0] lfs;
    logic signed [7:0] si_5;
    logic [7:0] su_5;
    logic signed [7:0] sii;
    logic [7:0] suu;
    integer i_5;
    integer unsigned u_5;
    logic [34:0] llf;
    logic [15:0] lf_1;
    logic signed [15:0] lfs_1;
    logic signed [7:0] si_6;
    logic [7:0] su_6;
    logic signed [7:0] sii_1;
    logic [7:0] suu_1;
    integer i_6;
    integer unsigned u_6;
    logic [34:0] llf_1;
    logic signed [11:0] si2;
    logic [15:0] lf_2;
    logic signed [15:0] lfs_2;
    logic signed [7:0] si_7;
    logic [7:0] su_7;
    logic signed [7:0] sii_2;
    logic [7:0] suu_2;
    integer i_7;
    integer unsigned u_7;
    logic [34:0] llf_2;
    // Call neg_sign_binary() begin
    a = -4'sd5;
    i = 1;
    u = 1'd1;
    su = 2'd2;
    si = -3'sd2;
    bu = 2'd3;
    bi = -3'sd3;
    c = 32'(a + 2'sd1) == -4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (c) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = 33'(a + 4'sd1) == -4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (c) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = 33'(a + 4'd1) == -4'sd4;
    c = 33'(a + 4'sd1) == -4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (c) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = 33'(a + 4'sd1) == -4'sd4;
    c = 32'(a + i) == -4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (c) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = 32'(a + u) == -4'sd4;
    c = 33'(a + su) == -3'sd3;
    c = 33'(a + signed'({1'b0, bu})) == -3'sd2;
    c = 32'(a + U) == -2'sd1;
    c = 32'(a + I) == -5'sd9;
    `ifndef INTEL_SVA_OFF
        assert (c) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = 33'(a + SU) == -2'sd1;
    c = 33'(a + SI) == -5'sd9;
    `ifndef INTEL_SVA_OFF
        assert (c) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call neg_sign_binary() end
    // Call neg_sign_binary() begin
    a_1 = -4'sd5;
    i_1 = 1;
    u_1 = 1'd1;
    su_1 = 2'd2;
    si_1 = -3'sd2;
    bu_1 = 2'd3;
    bi_1 = -3'sd3;
    c_1 = 5'(a_1 + 2'sd1) == -4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (c_1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c_1 = 5'(a_1 + 4'sd1) == -4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (c_1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c_1 = 5'(a_1 + 4'd1) == -4'sd4;
    c_1 = 5'(a_1 + 4'sd1) == -4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (c_1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c_1 = 5'(a_1 + 4'sd1) == -4'sd4;
    c_1 = 33'(a_1 + i_1) == -4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (c_1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c_1 = 33'(a_1 + signed'({1'b0, u_1})) == -4'sd4;
    c_1 = 5'(a_1 + su_1) == -3'sd3;
    c_1 = 5'(a_1 + signed'({1'b0, bu_1})) == -3'sd2;
    c_1 = 33'(a_1 + signed'({1'b0, U})) == -2'sd1;
    c_1 = 33'(a_1 + I) == -5'sd9;
    `ifndef INTEL_SVA_OFF
        assert (c_1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c_1 = 5'(a_1 + SU) == -2'sd1;
    c_1 = 5'(a_1 + SI) == -5'sd9;
    `ifndef INTEL_SVA_OFF
        assert (c_1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call neg_sign_binary() end
    // Call neg_sign_binary() begin
    a_2 = -4'sd5;
    i_2 = 1;
    u_2 = 1'd1;
    su_2 = 2'd2;
    si_2 = -3'sd2;
    bu_2 = 2'd3;
    bi_2 = -3'sd3;
    c_2 = 5'(a_2 + 2'sd1) == -4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (c_2) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c_2 = 5'(a_2 + 4'sd1) == -4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (c_2) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c_2 = 5'(a_2 + 4'sd1) == -4'sd4;
    c_2 = 5'(a_2 + 4'sd1) == -4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (c_2) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c_2 = 5'(a_2 + 4'sd1) == -4'sd4;
    c_2 = 33'(a_2 + i_2) == -4'sd4;
    `ifndef INTEL_SVA_OFF
        assert (c_2) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c_2 = 33'(a_2 + signed'({1'b0, u_2})) == -4'sd4;
    c_2 = 5'(a_2 + signed'({1'b0, su_2})) == -3'sd3;
    c_2 = 5'(a_2 + signed'({1'b0, bu_2})) == -3'sd2;
    c_2 = 33'(a_2 + signed'({1'b0, U})) == -2'sd1;
    c_2 = 33'(a_2 + I) == -5'sd9;
    `ifndef INTEL_SVA_OFF
        assert (c_2) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c_2 = 5'(a_2 + signed'({1'b0, SU})) == -2'sd1;
    c_2 = 5'(a_2 + SI) == -5'sd9;
    `ifndef INTEL_SVA_OFF
        assert (c_2) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call neg_sign_binary() end
    // Call assign_sign_unsign() begin
    ua = -2'sd1;
    `ifndef INTEL_SVA_OFF
        assert (ua == 32'hFFFFFFFF) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    sua = -3'sd2;
    `ifndef INTEL_SVA_OFF
        assert (sua == 4'hE) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    bua = -3'sd3;
    `ifndef INTEL_SVA_OFF
        assert (bua == 'hD) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    i_3 = 1;
    u_3 = 1'd1;
    su_3 = 2'd2;
    si_3 = -3'sd2;
    bu_3 = 2'd3;
    bi_3 = -3'sd3;
    u_3 = i_3 + I;
    `ifndef INTEL_SVA_OFF
        assert (u_3 == 32'hFFFFFFFD) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    u_3 = si_3 + SI;
    `ifndef INTEL_SVA_OFF
        assert (u_3 == 32'hFFFFFFFA) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    su_3 = i_3 + I;
    `ifndef INTEL_SVA_OFF
        assert (su_3 == 4'hD) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    ssu = si_3 + SI;
    `ifndef INTEL_SVA_OFF
        assert (ssu == 8'hFA) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    ssu = bi_3 + 2'sd1;
    `ifndef INTEL_SVA_OFF
        assert (ssu == 8'hFE) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    bu_3 = i_3 + I;
    `ifndef INTEL_SVA_OFF
        assert (bu_3 == 'hD) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    buu = si_3 + SI;
    `ifndef INTEL_SVA_OFF
        assert (buu == 'hFA) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    buu = bi_3 + 2'sd1;
    `ifndef INTEL_SVA_OFF
        assert (buu == 'hFE) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    u_3 = 3'd5;
    bu_3 = u_3 + I;
    `ifndef INTEL_SVA_OFF
        assert (bu_3 == 1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    su_3 = 4;
    u_3 = su_3 + I;
    `ifndef INTEL_SVA_OFF
        assert (u_3 == 1'd0) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    i_3 = 1;
    bu_3 = i_3 + SU;
    `ifndef INTEL_SVA_OFF
        assert (bu_3 == 5) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    i_3 = u_3;
    si_3 = u_3;
    bi_3 = u_3;
    si_3 = su_3;
    bi_3 = su_3;
    bi_3 = bu_3;
    // Call assign_sign_unsign() end
    // Call sign_unsign_var() begin
    i_4 = 1;
    u_4 = -2'sd1;
    su_4 = 2'd2;
    si_4 = -3'sd2;
    bu_4 = 2'd3;
    bi_4 = -3'sd3;
    i_4 = u_4;
    si_4 = u_4;
    bi_4 = u_4;
    si_4 = su_4;
    bi_4 = su_4;
    bi_4 = bu_4;
    i_4 = -4'sd5;
    u_4 = 3'd4;
    si_4 = -5'sd9;
    su_4 = 10;
    la = i_4 + u_4;
    `ifndef INTEL_SVA_OFF
        assert (la == 32'hFFFFFFFF) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lb = si_4 + i_4;
    `ifndef INTEL_SVA_OFF
        assert (lb == -5'sd14) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lb = si_4 - i_4;
    `ifndef INTEL_SVA_OFF
        assert (lb == -4'sd4) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lb = i_4 - si_4;
    `ifndef INTEL_SVA_OFF
        assert (lb == 4'sd4) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lc = si_4 + signed'({1'b0, u_4});
    `ifndef INTEL_SVA_OFF
        assert (lc == -4'sd5) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lc = si_4 - signed'({1'b0, u_4});
    `ifndef INTEL_SVA_OFF
        assert (lc == -5'sd13) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lc = signed'({1'b0, u_4}) - si_4;
    `ifndef INTEL_SVA_OFF
        assert (lc == 5'sd13) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    ld = si_4 + signed'({1'b0, u_4});
    `ifndef INTEL_SVA_OFF
        assert (ld == -4'sd5) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    ld = si_4 + si_4;
    `ifndef INTEL_SVA_OFF
        assert (ld == -6'sd18) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    ld = si_4 - (si_4 + 2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (ld == -2'sd1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    le = si_4 + su_4;
    `ifndef INTEL_SVA_OFF
        assert (le == 1'd1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call sign_unsign_var() end
    // Call sign_unsign_var2() begin
    lf = '0;
    lfs = '0;
    si_5 = -5'sd9;
    su_5 = 4'd10;
    sii = 10;
    suu = -5'sd9;
    i_5 = -5'sd9;
    u_5 = 4'd10;
    llf = i_5 + u_5;
    llf = i_5 + 5'sd10;
    `ifndef INTEL_SVA_OFF
        assert (llf == 1'd1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    llf = i_5 - 5'sd10;
    `ifndef INTEL_SVA_OFF
        assert (llf == 35'h7FFFFFFED) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lf = si_5 + signed'({1'b0, u_5});
    `ifndef INTEL_SVA_OFF
        assert (lf == 1'd1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lf = si_5 + sii;
    `ifndef INTEL_SVA_OFF
        assert (lf == 1'd1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lf = su_5 + suu;
    `ifndef INTEL_SVA_OFF
        assert (lf == 9'd257) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lf = si_5 + su_5;
    lfs = si_5 + su_5;
    si_5 = -5'sd9;
    su_5 = 8;
    lf = si_5 + su_5;
    lfs = si_5 + su_5;
    lf = si_5 + sii + su_5;
    lfs = si_5 + sii + su_5;
    // Call sign_unsign_var2() end
    // Call sign_unsign_bitwise_var_pos() begin
    lf_1 = '0;
    lfs_1 = '0;
    si_6 = 'h55;
    su_6 = 8'hCC;
    sii_1 = 'hCC;
    suu_1 = 7'h55;
    i_6 = 'h55;
    u_6 = 8'hCC;
    llf_1 = i_6 | u_6;
    `ifndef INTEL_SVA_OFF
        assert (llf_1 == 8'hDD) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    llf_1 = i_6 | 9'shCC;
    `ifndef INTEL_SVA_OFF
        assert (llf_1 == 8'hDD) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    llf_1 = i_6 ^ 9'shCC;
    `ifndef INTEL_SVA_OFF
        assert (llf_1 == 8'h99) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lf_1 = si_6 | signed'({1'b0, u_6});
    `ifndef INTEL_SVA_OFF
        assert (lf_1 == 8'hDD) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lf_1 = si_6 | sii_1;
    `ifndef INTEL_SVA_OFF
        assert (lf_1 == 16'hFFDD) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lf_1 = su_6 | suu_1;
    `ifndef INTEL_SVA_OFF
        assert (lf_1 == 8'hDD) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lf_1 = si_6 | su_6;
    `ifndef INTEL_SVA_OFF
        assert (lf_1 == 8'hDD) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    si2 = 'h555;
    su_6 = 'hBB;
    lf_1 = si2 | su_6;
    `ifndef INTEL_SVA_OFF
        assert (lf_1 == 11'h5FF) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lf_1 = si2 ^ sii_1 | su_6;
    // Call sign_unsign_bitwise_var_pos() end
    // Call sign_unsign_bitwise_var_neg() begin
    lf_2 = '0;
    lfs_2 = '0;
    si_7 = -5'sd9;
    su_7 = 4'd10;
    sii_2 = 10;
    suu_2 = -5'sd9;
    i_7 = -5'sd9;
    u_7 = 4'd10;
    llf_2 = i_7 | u_7;
    llf_2 = i_7 | 5'sd10;
    `ifndef INTEL_SVA_OFF
        assert (llf_2 == 35'h7FFFFFFFF) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    llf_2 = i_7 ^ 5'sd10;
    `ifndef INTEL_SVA_OFF
        assert (llf_2 == 35'h7FFFFFFFD) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lf_2 = si_7 | signed'({1'b0, u_7});
    `ifndef INTEL_SVA_OFF
        assert (lf_2 == 16'hFFFF) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    lf_2 = si_7 | sii_2;
    lf_2 = su_7 | suu_2;
    lf_2 = si_7 | su_7;
    si_7 = -5'sd9;
    su_7 = 8;
    lf_2 = si_7 | su_7;
    lf_2 = si_7 ^ sii_2 | su_7;
    // Call sign_unsign_bitwise_var_neg() end
end

//------------------------------------------------------------------------------
// Method process: liter_trunc (test_const_liter.cpp:564:5) 

always_comb 
begin : liter_trunc     // test_const_liter.cpp:564:5
    logic signed [2:0] a1;
    logic signed [2:0] a2;
    logic signed [7:0] b;
    logic signed [7:0] c;
    logic signed [15:0] d;
    logic signed [15:0] e;
    integer f;
    integer g;
    a1 = -6'sh11;
    a2 = -6'sh11;
    b = -10'sh111;
    c = -10'sh111;
    d = -18'sh11111;
    e = -18'sh11111;
    f = -34'sh111111111;
    g = -34'sh111111111;
end

//------------------------------------------------------------------------------
// Method process: liter_extend_zero_init (test_const_liter.cpp:831:5) 

always_comb 
begin : liter_extend_zero_init     // test_const_liter.cpp:831:5
    integer ci;
    integer unsigned cu;
    logic signed [15:0] i;
    logic [15:0] u;
    logic [15:0] bu;
    logic [15:0] bi;
    ci = '0;
    cu = '0;
    i = '0;
    u = '0;
    bu = '0;
    bi = '0;
end

//------------------------------------------------------------------------------
// Method process: liter_extend_assign (test_const_liter.cpp:589:5) 

always_comb 
begin : liter_extend_assign     // test_const_liter.cpp:589:5
    logic signed [15:0] a1;
    logic signed [15:0] a2;
    logic signed [15:0] b1;
    logic signed [15:0] b2;
    logic [15:0] u1;
    logic signed [7:0] b;
    logic signed [7:0] c;
    logic signed [15:0] d;
    logic signed [15:0] e;
    integer f;
    integer g;
    a1 = 'h11;
    a2 = -6'sh11;
    b1 = 'h11;
    b2 = -6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (a1 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (a2 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (b1 == 'h11) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (b2 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    u1 = -6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (u1 == 16'hFFEF) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    b = -2'sh1;
    c = -2'sh1;
    d = -6'sh11;
    e = -6'sh11;
    f = -6'sh11;
    g = -6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (b == -2'sh1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (c == -2'sh1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (d == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (e == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (f == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    `ifndef INTEL_SVA_OFF
        assert (g == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
end

//------------------------------------------------------------------------------
// Method process: liter_overflow_oper (test_const_liter.cpp:635:5) 

always_comb 
begin : liter_overflow_oper     // test_const_liter.cpp:635:5
    logic [1:0] val1;
    logic [1:0] val2;
    integer mres;
    logic [1:0] a;
    logic [1:0] b;
    logic [127:0] c;
    logic [1:0] val1_1;
    logic [1:0] val2_1;
    integer mres_1;
    logic [1:0] a_1;
    logic [1:0] b_1;
    logic [127:0] c_1;
    logic [1:0] val1_2;
    logic [1:0] val2_2;
    integer mres_2;
    logic [1:0] a_2;
    logic [1:0] b_2;
    logic [127:0] c_2;
    logic [31:0] val1_3;
    logic [31:0] val2_3;
    logic [63:0] mres_3;
    logic [31:0] a_3;
    logic [31:0] b_3;
    logic [127:0] c_3;
    logic [31:0] val1_4;
    logic [31:0] val2_4;
    logic [63:0] mres_4;
    logic [31:0] a_4;
    logic [31:0] b_4;
    logic [127:0] c_4;
    logic [31:0] val1_5;
    logic [31:0] val2_5;
    logic [63:0] mres_5;
    logic [31:0] a_5;
    logic [31:0] b_5;
    logic [127:0] c_5;
    val1 = 2'd3; val2 = 2'd3; mres = 9;
    // Call pos_overflow_mul() begin
    a = val1;
    b = val2;
    c = a * b;
    `ifndef INTEL_SVA_OFF
        assert (c == mres) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_overflow_mul() end
    val1_1 = 2'd3; val2_1 = 2'd3; mres_1 = 9;
    // Call pos_overflow_mul() begin
    a_1 = val1_1;
    b_1 = val2_1;
    c_1 = a_1 * b_1;
    `ifndef INTEL_SVA_OFF
        assert (c_1 == mres_1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_overflow_mul() end
    val1_2 = 2'd3; val2_2 = 2'd3; mres_2 = 9;
    // Call pos_overflow_mul() begin
    a_2 = val1_2;
    b_2 = val2_2;
    c_2 = a_2 * b_2;
    `ifndef INTEL_SVA_OFF
        assert (c_2 == mres_2) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_overflow_mul() end
    val1_3 = 1'd1 <<< 31; val2_3 = 2'd2; mres_3 = 1'd1 <<< 32;
    // Call pos_overflow_mul() begin
    a_3 = val1_3;
    b_3 = val2_3;
    c_3 = a_3 * b_3;
    `ifndef INTEL_SVA_OFF
        assert (c_3 == mres_3) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_overflow_mul() end
    val1_4 = 1'd1 <<< 31; val2_4 = 2'd2; mres_4 = 1'd1 <<< 32;
    // Call pos_overflow_mul() begin
    a_4 = val1_4;
    b_4 = val2_4;
    c_4 = a_4 * b_4;
    `ifndef INTEL_SVA_OFF
        assert (c_4 == mres_4) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_overflow_mul() end
    val1_5 = 1'd1 <<< 31; val2_5 = 1'd1 <<< 31; mres_5 = 1'd1 <<< 62;
    // Call pos_overflow_mul() begin
    a_5 = val1_5;
    b_5 = val2_5;
    c_5 = a_5 * b_5;
    `ifndef INTEL_SVA_OFF
        assert (c_5 == mres_5) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_overflow_mul() end
end

//------------------------------------------------------------------------------
// Method process: liter_overflow_oper64 (test_const_liter.cpp:648:5) 

always_comb 
begin : liter_overflow_oper64     // test_const_liter.cpp:648:5
    logic [64:0] A;
    logic [69:0] B;
    logic signed [127:0] RES;
    integer unsigned UI;
    logic [15:0] C;
    logic signed [127:0] c;
    logic [64:0] val1;
    logic [64:0] val2;
    logic signed [127:0] mres;
    logic [64:0] a;
    logic [64:0] b;
    logic [127:0] c_1;
    logic [65:0] val1_1;
    integer unsigned val2_1;
    logic signed [127:0] mres_1;
    logic [65:0] a_1;
    integer unsigned b_1;
    logic [127:0] c_2;
    integer unsigned val1_2;
    logic [65:0] val2_2;
    logic signed [127:0] mres_2;
    integer unsigned a_2;
    logic [65:0] b_2;
    logic [127:0] c_3;
    logic [64:0] val1_3;
    logic [69:0] val2_3;
    logic signed [127:0] mres_3;
    logic [64:0] a_3;
    logic [69:0] b_3;
    logic [127:0] c_4;
    A = 1'd1;
    B = 1'd1;
    RES = 1;
    UI = 9'd420;
    C = 7'd105;
    c = '0;
    c = C * UI;
    `ifndef INTEL_SVA_OFF
        assert (c == 44100) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = C + UI;
    `ifndef INTEL_SVA_OFF
        assert (c == 525) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = signed'({1'b0, UI}) - signed'({1'b0, C});
    `ifndef INTEL_SVA_OFF
        assert (c == 315) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = UI / C;
    `ifndef INTEL_SVA_OFF
        assert (c == 4) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = UI % C;
    `ifndef INTEL_SVA_OFF
        assert (c == 0) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = UI | C;
    `ifndef INTEL_SVA_OFF
        assert (c == 493) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = C >>> 3;
    `ifndef INTEL_SVA_OFF
        assert (c == 13) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    c = C <<< 40;
    `ifndef INTEL_SVA_OFF
        assert (c == 47'h690000000000) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    A = A <<< 64;
    RES = RES <<< 65;
    val1 = A; val2 = 2'd2; mres = RES;
    // Call pos_overflow_mul() begin
    a = val1;
    b = val2;
    c_1 = a * b;
    `ifndef INTEL_SVA_OFF
        assert (c_1 == mres) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_overflow_mul() end
    val1_1 = A; val2_1 = 2'd2; mres_1 = RES;
    // Call pos_overflow_mul() begin
    a_1 = val1_1;
    b_1 = val2_1;
    c_2 = a_1 * b_1;
    `ifndef INTEL_SVA_OFF
        assert (c_2 == mres_1) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_overflow_mul() end
    val1_2 = 2'd2; val2_2 = A; mres_2 = RES;
    // Call pos_overflow_mul() begin
    a_2 = val1_2;
    b_2 = val2_2;
    c_3 = a_2 * b_2;
    `ifndef INTEL_SVA_OFF
        assert (c_3 == mres_2) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_overflow_mul() end
    A = 41;
    A = A <<< 58;
    B = 11;
    B = B <<< 65;
    RES = 'h18;
    RES = RES <<< 120;
    val1_3 = A; val2_3 = B; mres_3 = RES;
    // Call pos_overflow_mul() begin
    a_3 = val1_3;
    b_3 = val2_3;
    c_4 = a_3 * b_3;
    `ifndef INTEL_SVA_OFF
        assert (c_4 == mres_3) else $error("Assertion failed at test_const_liter.cpp:71:24>");
    `endif // INTEL_SVA_OFF
    // Call pos_overflow_mul() end
end

//------------------------------------------------------------------------------
// Method process: liter_extend_oper (test_const_liter.cpp:778:5) 

always_comb 
begin : liter_extend_oper     // test_const_liter.cpp:778:5
    logic isSigned;
    logic signed [7:0] a;
    logic signed [15:0] b;
    logic signed [15:0] c;
    logic signed [15:0] d;
    logic signed [15:0] e;
    logic signed [15:0] f;
    logic signed [15:0] g;
    logic signed [7:0] a_1;
    logic signed [15:0] b_1;
    logic signed [15:0] c_1;
    logic signed [15:0] d_1;
    logic signed [15:0] e_1;
    logic signed [15:0] f_1;
    logic signed [7:0] a_2;
    logic signed [15:0] b_2;
    logic signed [15:0] c_2;
    logic signed [15:0] d_2;
    logic signed [15:0] e_2;
    logic signed [15:0] f_2;
    logic signed [15:0] g_1;
    logic isSigned_1;
    logic [7:0] a_3;
    logic [15:0] b_3;
    logic [15:0] c_3;
    logic [15:0] d_3;
    logic [15:0] e_3;
    logic [15:0] f_3;
    logic [15:0] g_2;
    logic [7:0] a_4;
    logic [15:0] b_4;
    logic [15:0] c_4;
    logic [15:0] d_4;
    logic [15:0] e_4;
    logic [15:0] f_4;
    logic isSigned_2;
    logic [23:0] a_5;
    logic [41:0] b_5;
    logic [41:0] c_5;
    logic [41:0] d_5;
    logic [41:0] e_5;
    logic [41:0] f_5;
    logic [41:0] g_3;
    logic [23:0] a_6;
    logic [41:0] b_6;
    logic [41:0] c_6;
    logic [41:0] d_6;
    logic [41:0] e_6;
    logic [41:0] f_6;
    logic isSigned_3;
    logic [10:0] a_7;
    logic [32:0] b_7;
    logic [32:0] c_7;
    logic [32:0] d_7;
    logic [32:0] e_7;
    logic [32:0] f_7;
    logic [32:0] g_4;
    logic [10:0] a_8;
    logic [32:0] b_8;
    logic [32:0] c_8;
    logic [32:0] d_8;
    logic [32:0] e_8;
    logic [32:0] f_8;
    logic isSigned_4;
    logic [36:0] a_9;
    logic [65:0] b_9;
    logic [65:0] c_9;
    logic [65:0] d_9;
    logic [65:0] e_9;
    logic [65:0] f_9;
    logic [65:0] g_5;
    logic [36:0] a_10;
    logic [65:0] b_10;
    logic [65:0] c_10;
    logic [65:0] d_10;
    logic [65:0] e_10;
    logic [65:0] f_10;
    logic isSigned_5;
    logic [64:0] a_11;
    logic [172:0] b_11;
    logic [172:0] c_11;
    logic [172:0] d_11;
    logic [172:0] e_11;
    logic [172:0] f_11;
    logic [172:0] g_6;
    logic [64:0] a_12;
    logic [172:0] b_12;
    logic [172:0] c_12;
    logic [172:0] d_12;
    logic [172:0] e_12;
    logic [172:0] f_12;
    logic isSigned_6;
    logic signed [7:0] a_13;
    logic signed [15:0] b_13;
    logic signed [15:0] c_13;
    logic signed [15:0] d_13;
    logic signed [15:0] e_13;
    logic signed [15:0] f_13;
    logic signed [15:0] g_7;
    logic signed [7:0] a_14;
    logic signed [15:0] b_14;
    logic signed [15:0] c_14;
    logic signed [15:0] d_14;
    logic signed [15:0] e_14;
    logic signed [15:0] f_14;
    logic signed [7:0] a_15;
    logic signed [15:0] b_15;
    logic signed [15:0] c_15;
    logic signed [15:0] d_15;
    logic signed [15:0] e_15;
    logic signed [15:0] f_15;
    logic signed [15:0] g_8;
    logic isSigned_7;
    logic signed [32:0] a_16;
    logic signed [63:0] b_16;
    logic signed [63:0] c_16;
    logic signed [63:0] d_16;
    logic signed [63:0] e_16;
    logic signed [63:0] f_16;
    logic signed [63:0] g_9;
    logic signed [32:0] a_17;
    logic signed [63:0] b_17;
    logic signed [63:0] c_17;
    logic signed [63:0] d_17;
    logic signed [63:0] e_17;
    logic signed [63:0] f_17;
    logic signed [32:0] a_18;
    logic signed [63:0] b_18;
    logic signed [63:0] c_18;
    logic signed [63:0] d_18;
    logic signed [63:0] e_18;
    logic signed [63:0] f_18;
    logic signed [63:0] g_10;
    logic isSigned_8;
    logic signed [63:0] a_19;
    logic signed [126:0] b_19;
    logic signed [126:0] c_19;
    logic signed [126:0] d_19;
    logic signed [126:0] e_19;
    logic signed [126:0] f_19;
    logic signed [126:0] g_11;
    logic signed [63:0] a_20;
    logic signed [126:0] b_20;
    logic signed [126:0] c_20;
    logic signed [126:0] d_20;
    logic signed [126:0] e_20;
    logic signed [126:0] f_20;
    logic signed [63:0] a_21;
    logic signed [126:0] b_21;
    logic signed [126:0] c_21;
    logic signed [126:0] d_21;
    logic signed [126:0] e_21;
    logic signed [126:0] f_21;
    logic signed [126:0] g_12;
    logic isSigned_9;
    logic signed [44:0] a_22;
    logic signed [131:0] b_22;
    logic signed [131:0] c_22;
    logic signed [131:0] d_22;
    logic signed [131:0] e_22;
    logic signed [131:0] f_22;
    logic signed [131:0] g_13;
    logic signed [44:0] a_23;
    logic signed [131:0] b_23;
    logic signed [131:0] c_23;
    logic signed [131:0] d_23;
    logic signed [131:0] e_23;
    logic signed [131:0] f_23;
    logic signed [44:0] a_24;
    logic signed [131:0] b_24;
    logic signed [131:0] c_24;
    logic signed [131:0] d_24;
    logic signed [131:0] e_24;
    logic signed [131:0] f_24;
    logic signed [131:0] g_14;
    logic isSigned_10;
    integer a_25;
    integer b_25;
    integer c_25;
    integer d_25;
    integer e_25;
    integer f_25;
    integer g_15;
    integer a_26;
    integer b_26;
    integer c_26;
    integer d_26;
    integer e_26;
    integer f_26;
    integer a_27;
    integer b_27;
    integer c_27;
    integer d_27;
    integer e_27;
    integer f_27;
    integer g_16;
    logic isSigned_11;
    logic signed [15:0] a_28;
    integer unsigned b_28;
    integer unsigned c_28;
    integer unsigned d_28;
    integer unsigned e_28;
    integer unsigned f_28;
    integer unsigned g_17;
    logic signed [15:0] a_29;
    integer unsigned b_29;
    integer unsigned c_29;
    integer unsigned d_29;
    integer unsigned e_29;
    integer unsigned f_29;
    logic isSigned_12;
    logic signed [63:0] a_30;
    logic signed [63:0] b_30;
    logic signed [63:0] c_30;
    logic signed [63:0] d_30;
    logic signed [63:0] e_30;
    logic signed [63:0] f_30;
    logic signed [63:0] g_18;
    logic signed [63:0] a_31;
    logic signed [63:0] b_31;
    logic signed [63:0] c_31;
    logic signed [63:0] d_31;
    logic signed [63:0] e_31;
    logic signed [63:0] f_31;
    logic signed [63:0] a_32;
    logic signed [63:0] b_32;
    logic signed [63:0] c_32;
    logic signed [63:0] d_32;
    logic signed [63:0] e_32;
    logic signed [63:0] f_32;
    logic signed [63:0] g_19;
    logic isSigned_13;
    logic signed [15:0] a_33;
    logic [63:0] b_33;
    logic [63:0] c_33;
    logic [63:0] d_33;
    logic [63:0] e_33;
    logic [63:0] f_33;
    logic [63:0] g_20;
    logic signed [15:0] a_34;
    logic [63:0] b_34;
    logic [63:0] c_34;
    logic [63:0] d_34;
    logic [63:0] e_34;
    logic [63:0] f_34;
    logic isSigned_14;
    integer a_35;
    logic [15:0] b_35;
    logic [15:0] c_35;
    logic [15:0] d_35;
    logic [15:0] e_35;
    logic [15:0] f_35;
    logic [15:0] g_21;
    integer a_36;
    logic [15:0] b_36;
    logic [15:0] c_36;
    logic [15:0] d_36;
    logic [15:0] e_36;
    logic [15:0] f_36;
    logic isSigned_15;
    integer unsigned a_37;
    logic [29:0] b_37;
    logic [29:0] c_37;
    logic [29:0] d_37;
    logic [29:0] e_37;
    logic [29:0] f_37;
    logic [29:0] g_22;
    integer unsigned a_38;
    logic [29:0] b_38;
    logic [29:0] c_38;
    logic [29:0] d_38;
    logic [29:0] e_38;
    logic [29:0] f_38;
    logic isSigned_16;
    integer unsigned a_39;
    logic [62:0] b_39;
    logic [62:0] c_39;
    logic [62:0] d_39;
    logic [62:0] e_39;
    logic [62:0] f_39;
    logic [62:0] g_23;
    integer unsigned a_40;
    logic [62:0] b_40;
    logic [62:0] c_40;
    logic [62:0] d_40;
    logic [62:0] e_40;
    logic [62:0] f_40;
    logic isSigned_17;
    integer a_41;
    logic signed [63:0] b_41;
    logic signed [63:0] c_41;
    logic signed [63:0] d_41;
    logic signed [63:0] e_41;
    logic signed [63:0] f_41;
    logic signed [63:0] g_24;
    integer a_42;
    logic signed [63:0] b_42;
    logic signed [63:0] c_42;
    logic signed [63:0] d_42;
    logic signed [63:0] e_42;
    logic signed [63:0] f_42;
    integer a_43;
    logic signed [63:0] b_43;
    logic signed [63:0] c_43;
    logic signed [63:0] d_43;
    logic signed [63:0] e_43;
    logic signed [63:0] f_43;
    logic signed [63:0] g_25;
    logic isSigned_18;
    integer unsigned a_44;
    logic signed [17:0] b_44;
    logic signed [17:0] c_44;
    logic signed [17:0] d_44;
    logic signed [17:0] e_44;
    logic signed [17:0] f_44;
    logic signed [17:0] g_26;
    integer unsigned a_45;
    logic signed [17:0] b_45;
    logic signed [17:0] c_45;
    logic signed [17:0] d_45;
    logic signed [17:0] e_45;
    logic signed [17:0] f_45;
    logic isSigned_19;
    integer a_46;
    logic [31:0] b_46;
    logic [31:0] c_46;
    logic [31:0] d_46;
    logic [31:0] e_46;
    logic [31:0] f_46;
    logic [31:0] g_27;
    integer a_47;
    logic [31:0] b_47;
    logic [31:0] c_47;
    logic [31:0] d_47;
    logic [31:0] e_47;
    logic [31:0] f_47;
    logic isSigned_20;
    integer a_48;
    logic signed [66:0] b_48;
    logic signed [66:0] c_48;
    logic signed [66:0] d_48;
    logic signed [66:0] e_48;
    logic signed [66:0] f_48;
    logic signed [66:0] g_28;
    integer a_49;
    logic signed [66:0] b_49;
    logic signed [66:0] c_49;
    logic signed [66:0] d_49;
    logic signed [66:0] e_49;
    logic signed [66:0] f_49;
    integer a_50;
    logic signed [66:0] b_50;
    logic signed [66:0] c_50;
    logic signed [66:0] d_50;
    logic signed [66:0] e_50;
    logic signed [66:0] f_50;
    logic signed [66:0] g_29;
    logic isSigned_21;
    integer unsigned a_51;
    logic [67:0] b_51;
    logic [67:0] c_51;
    logic [67:0] d_51;
    logic [67:0] e_51;
    logic [67:0] f_51;
    logic [67:0] g_30;
    integer unsigned a_52;
    logic [67:0] b_52;
    logic [67:0] c_52;
    logic [67:0] d_52;
    logic [67:0] e_52;
    logic [67:0] f_52;
    logic isSigned_22;
    integer a_53;
    logic signed [99:0] b_53;
    logic signed [99:0] c_53;
    logic signed [99:0] d_53;
    logic signed [99:0] e_53;
    logic signed [99:0] f_53;
    logic signed [99:0] g_31;
    integer a_54;
    logic signed [99:0] b_54;
    logic signed [99:0] c_54;
    logic signed [99:0] d_54;
    logic signed [99:0] e_54;
    logic signed [99:0] f_54;
    integer a_55;
    logic signed [99:0] b_55;
    logic signed [99:0] c_55;
    logic signed [99:0] d_55;
    logic signed [99:0] e_55;
    logic signed [99:0] f_55;
    logic signed [99:0] g_32;
    logic isSigned_23;
    logic signed [63:0] a_56;
    logic [64:0] b_56;
    logic [64:0] c_56;
    logic [64:0] d_56;
    logic [64:0] e_56;
    logic [64:0] f_56;
    logic [64:0] g_33;
    logic signed [63:0] a_57;
    logic [64:0] b_57;
    logic [64:0] c_57;
    logic [64:0] d_57;
    logic [64:0] e_57;
    logic [64:0] f_57;
    isSigned = 1;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a = 'h11;
    b = 'h22;
    c = b + a;
    `ifndef INTEL_SVA_OFF
        assert (c == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d = b - a;
    `ifndef INTEL_SVA_OFF
        assert (d == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e = b + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f = b - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g = b - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_1 = 2;
    b_1 = 'h22;
    c_1 = b_1 <<< a_1;
    `ifndef INTEL_SVA_OFF
        assert (c_1 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_1 = b_1 >>> a_1;
    `ifndef INTEL_SVA_OFF
        assert (d_1 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_1 = b_1 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_1 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_1 = b_1 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_1 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (1)
    begin
        // Call neg_add_sub() begin
        a_2 = -6'sh11;
        b_2 = -7'sh22;
        c_2 = b_2 + a_2;
        `ifndef INTEL_SVA_OFF
            assert (c_2 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:724:9");
        `endif // INTEL_SVA_OFF
        d_2 = b_2 - a_2;
        `ifndef INTEL_SVA_OFF
            assert (d_2 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:728:9");
        `endif // INTEL_SVA_OFF
        e_2 = b_2 + (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (e_2 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:732:9");
        `endif // INTEL_SVA_OFF
        f_2 = b_2 - 6'sh11;
        `ifndef INTEL_SVA_OFF
            assert (f_2 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:736:9");
        `endif // INTEL_SVA_OFF
        g_1 = b_2 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (g_1 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:740:9");
        `endif // INTEL_SVA_OFF
        // Call neg_add_sub() end
    end
    // Call run_opers() end
    isSigned_1 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_3 = 5'h11;
    b_3 = 6'h22;
    c_3 = b_3 + a_3;
    `ifndef INTEL_SVA_OFF
        assert (c_3 == 6'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_3 = b_3 - a_3;
    `ifndef INTEL_SVA_OFF
        assert (d_3 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_3 = b_3 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_3 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_3 = b_3 - 5'h11;
    `ifndef INTEL_SVA_OFF
        assert (f_3 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_2 = b_3 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_2 == 7'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_4 = 2'd2;
    b_4 = 6'h22;
    c_4 = b_4 <<< a_4;
    `ifndef INTEL_SVA_OFF
        assert (c_4 == 8'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_4 = b_4 >>> a_4;
    `ifndef INTEL_SVA_OFF
        assert (d_4 == 4'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_4 = b_4 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_4 == 9'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_4 = b_4 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_4 == 3'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_2 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_5 = 5'h11;
    b_5 = 6'h22;
    c_5 = b_5 + a_5;
    `ifndef INTEL_SVA_OFF
        assert (c_5 == 6'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_5 = b_5 - a_5;
    `ifndef INTEL_SVA_OFF
        assert (d_5 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_5 = b_5 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_5 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_5 = b_5 - 5'h11;
    `ifndef INTEL_SVA_OFF
        assert (f_5 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_3 = b_5 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_3 == 7'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_6 = 2'd2;
    b_6 = 6'h22;
    c_6 = b_6 <<< a_6;
    `ifndef INTEL_SVA_OFF
        assert (c_6 == 8'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_6 = b_6 >>> a_6;
    `ifndef INTEL_SVA_OFF
        assert (d_6 == 4'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_6 = b_6 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_6 == 9'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_6 = b_6 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_6 == 3'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_3 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_7 = 5'h11;
    b_7 = 6'h22;
    c_7 = b_7 + a_7;
    `ifndef INTEL_SVA_OFF
        assert (c_7 == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_7 = b_7 - a_7;
    `ifndef INTEL_SVA_OFF
        assert (d_7 == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_7 = signed'({1'b0, b_7}) + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_7 == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_7 = signed'({1'b0, b_7}) - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_7 == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_4 = signed'({1'b0, b_7}) - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_4 == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_8 = 2'd2;
    b_8 = 6'h22;
    c_8 = b_8 <<< a_8;
    `ifndef INTEL_SVA_OFF
        assert (c_8 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_8 = b_8 >>> a_8;
    `ifndef INTEL_SVA_OFF
        assert (d_8 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_8 = b_8 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_8 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_8 = b_8 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_8 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_4 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_9 = 5'h11;
    b_9 = 6'h22;
    c_9 = b_9 + a_9;
    `ifndef INTEL_SVA_OFF
        assert (c_9 == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_9 = b_9 - a_9;
    `ifndef INTEL_SVA_OFF
        assert (d_9 == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_9 = signed'({1'b0, b_9}) + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_9 == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_9 = signed'({1'b0, b_9}) - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_9 == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_5 = signed'({1'b0, b_9}) - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_5 == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_10 = 2'd2;
    b_10 = 6'h22;
    c_10 = b_10 <<< a_10;
    `ifndef INTEL_SVA_OFF
        assert (c_10 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_10 = b_10 >>> a_10;
    `ifndef INTEL_SVA_OFF
        assert (d_10 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_10 = b_10 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_10 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_10 = b_10 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_10 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_5 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_11 = 5'h11;
    b_11 = 6'h22;
    c_11 = b_11 + a_11;
    `ifndef INTEL_SVA_OFF
        assert (c_11 == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_11 = b_11 - a_11;
    `ifndef INTEL_SVA_OFF
        assert (d_11 == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_11 = signed'({1'b0, b_11}) + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_11 == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_11 = signed'({1'b0, b_11}) - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_11 == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_6 = signed'({1'b0, b_11}) - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_6 == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_12 = 2'd2;
    b_12 = 6'h22;
    c_12 = b_12 <<< a_12;
    `ifndef INTEL_SVA_OFF
        assert (c_12 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_12 = b_12 >>> a_12;
    `ifndef INTEL_SVA_OFF
        assert (d_12 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_12 = b_12 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_12 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_12 = b_12 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_12 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_6 = 1;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_13 = 'h11;
    b_13 = 'h22;
    c_13 = b_13 + a_13;
    `ifndef INTEL_SVA_OFF
        assert (c_13 == 7'sh33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_13 = b_13 - a_13;
    `ifndef INTEL_SVA_OFF
        assert (d_13 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_13 = b_13 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_13 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_13 = b_13 - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_13 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_7 = b_13 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_7 == 8'sh44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_14 = 2;
    b_14 = 'h22;
    c_14 = b_14 <<< a_14;
    `ifndef INTEL_SVA_OFF
        assert (c_14 == 9'sh88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_14 = b_14 >>> a_14;
    `ifndef INTEL_SVA_OFF
        assert (d_14 == 5'sh8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_14 = b_14 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_14 == 10'sh110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_14 = b_14 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_14 == 4'sh4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (1)
    begin
        // Call neg_add_sub() begin
        a_15 = -6'sh11;
        b_15 = -7'sh22;
        c_15 = b_15 + a_15;
        `ifndef INTEL_SVA_OFF
            assert (c_15 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:724:9");
        `endif // INTEL_SVA_OFF
        d_15 = b_15 - a_15;
        `ifndef INTEL_SVA_OFF
            assert (d_15 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:728:9");
        `endif // INTEL_SVA_OFF
        e_15 = b_15 + (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (e_15 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:732:9");
        `endif // INTEL_SVA_OFF
        f_15 = b_15 - 6'sh11;
        `ifndef INTEL_SVA_OFF
            assert (f_15 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:736:9");
        `endif // INTEL_SVA_OFF
        g_8 = b_15 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (g_8 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:740:9");
        `endif // INTEL_SVA_OFF
        // Call neg_add_sub() end
    end
    // Call run_opers() end
    isSigned_7 = 1;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_16 = 'h11;
    b_16 = 'h22;
    c_16 = b_16 + a_16;
    `ifndef INTEL_SVA_OFF
        assert (c_16 == 7'sh33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_16 = b_16 - a_16;
    `ifndef INTEL_SVA_OFF
        assert (d_16 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_16 = b_16 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_16 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_16 = b_16 - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_16 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_9 = b_16 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_9 == 8'sh44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_17 = 2;
    b_17 = 'h22;
    c_17 = b_17 <<< a_17;
    `ifndef INTEL_SVA_OFF
        assert (c_17 == 9'sh88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_17 = b_17 >>> a_17;
    `ifndef INTEL_SVA_OFF
        assert (d_17 == 5'sh8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_17 = b_17 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_17 == 10'sh110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_17 = b_17 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_17 == 4'sh4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (1)
    begin
        // Call neg_add_sub() begin
        a_18 = -6'sh11;
        b_18 = -7'sh22;
        c_18 = b_18 + a_18;
        `ifndef INTEL_SVA_OFF
            assert (c_18 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:724:9");
        `endif // INTEL_SVA_OFF
        d_18 = b_18 - a_18;
        `ifndef INTEL_SVA_OFF
            assert (d_18 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:728:9");
        `endif // INTEL_SVA_OFF
        e_18 = b_18 + (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (e_18 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:732:9");
        `endif // INTEL_SVA_OFF
        f_18 = b_18 - 6'sh11;
        `ifndef INTEL_SVA_OFF
            assert (f_18 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:736:9");
        `endif // INTEL_SVA_OFF
        g_10 = b_18 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (g_10 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:740:9");
        `endif // INTEL_SVA_OFF
        // Call neg_add_sub() end
    end
    // Call run_opers() end
    isSigned_8 = 1;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_19 = 'h11;
    b_19 = 'h22;
    c_19 = b_19 + a_19;
    `ifndef INTEL_SVA_OFF
        assert (c_19 == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_19 = b_19 - a_19;
    `ifndef INTEL_SVA_OFF
        assert (d_19 == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_19 = b_19 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_19 == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_19 = b_19 - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_19 == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_11 = b_19 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_11 == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_20 = 2;
    b_20 = 'h22;
    c_20 = b_20 <<< a_20;
    `ifndef INTEL_SVA_OFF
        assert (c_20 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_20 = b_20 >>> a_20;
    `ifndef INTEL_SVA_OFF
        assert (d_20 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_20 = b_20 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_20 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_20 = b_20 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_20 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (1)
    begin
        // Call neg_add_sub() begin
        a_21 = -6'sh11;
        b_21 = -7'sh22;
        c_21 = b_21 + a_21;
        `ifndef INTEL_SVA_OFF
            assert (c_21 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:724:9");
        `endif // INTEL_SVA_OFF
        d_21 = b_21 - a_21;
        `ifndef INTEL_SVA_OFF
            assert (d_21 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:728:9");
        `endif // INTEL_SVA_OFF
        e_21 = b_21 + (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (e_21 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:732:9");
        `endif // INTEL_SVA_OFF
        f_21 = b_21 - 6'sh11;
        `ifndef INTEL_SVA_OFF
            assert (f_21 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:736:9");
        `endif // INTEL_SVA_OFF
        g_12 = b_21 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (g_12 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:740:9");
        `endif // INTEL_SVA_OFF
        // Call neg_add_sub() end
    end
    // Call run_opers() end
    isSigned_9 = 1;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_22 = 'h11;
    b_22 = 'h22;
    c_22 = b_22 + a_22;
    `ifndef INTEL_SVA_OFF
        assert (c_22 == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_22 = b_22 - a_22;
    `ifndef INTEL_SVA_OFF
        assert (d_22 == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_22 = b_22 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_22 == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_22 = b_22 - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_22 == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_13 = b_22 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_13 == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_23 = 2;
    b_23 = 'h22;
    c_23 = b_23 <<< a_23;
    `ifndef INTEL_SVA_OFF
        assert (c_23 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_23 = b_23 >>> a_23;
    `ifndef INTEL_SVA_OFF
        assert (d_23 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_23 = b_23 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_23 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_23 = b_23 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_23 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (1)
    begin
        // Call neg_add_sub() begin
        a_24 = -6'sh11;
        b_24 = -7'sh22;
        c_24 = b_24 + a_24;
        `ifndef INTEL_SVA_OFF
            assert (c_24 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:724:9");
        `endif // INTEL_SVA_OFF
        d_24 = b_24 - a_24;
        `ifndef INTEL_SVA_OFF
            assert (d_24 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:728:9");
        `endif // INTEL_SVA_OFF
        e_24 = b_24 + (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (e_24 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:732:9");
        `endif // INTEL_SVA_OFF
        f_24 = b_24 - 6'sh11;
        `ifndef INTEL_SVA_OFF
            assert (f_24 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:736:9");
        `endif // INTEL_SVA_OFF
        g_14 = b_24 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (g_14 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:740:9");
        `endif // INTEL_SVA_OFF
        // Call neg_add_sub() end
    end
    // Call run_opers() end
    isSigned_10 = 1;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_25 = 'h11;
    b_25 = 'h22;
    c_25 = b_25 + a_25;
    `ifndef INTEL_SVA_OFF
        assert (c_25 == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_25 = b_25 - a_25;
    `ifndef INTEL_SVA_OFF
        assert (d_25 == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_25 = b_25 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_25 == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_25 = b_25 - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_25 == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_15 = b_25 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_15 == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_26 = 2;
    b_26 = 'h22;
    c_26 = b_26 <<< a_26;
    `ifndef INTEL_SVA_OFF
        assert (c_26 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_26 = b_26 >>> a_26;
    `ifndef INTEL_SVA_OFF
        assert (d_26 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_26 = b_26 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_26 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_26 = b_26 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_26 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (1)
    begin
        // Call neg_add_sub() begin
        a_27 = -6'sh11;
        b_27 = -7'sh22;
        c_27 = b_27 + a_27;
        `ifndef INTEL_SVA_OFF
            assert (c_27 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:724:9");
        `endif // INTEL_SVA_OFF
        d_27 = b_27 - a_27;
        `ifndef INTEL_SVA_OFF
            assert (d_27 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:728:9");
        `endif // INTEL_SVA_OFF
        e_27 = b_27 + (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (e_27 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:732:9");
        `endif // INTEL_SVA_OFF
        f_27 = b_27 - 6'sh11;
        `ifndef INTEL_SVA_OFF
            assert (f_27 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:736:9");
        `endif // INTEL_SVA_OFF
        g_16 = b_27 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (g_16 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:740:9");
        `endif // INTEL_SVA_OFF
        // Call neg_add_sub() end
    end
    // Call run_opers() end
    isSigned_11 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_28 = 6'sh11;
    b_28 = 6'h22;
    c_28 = b_28 + a_28;
    `ifndef INTEL_SVA_OFF
        assert (c_28 == 6'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_28 = b_28 - a_28;
    `ifndef INTEL_SVA_OFF
        assert (d_28 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_28 = b_28 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_28 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_28 = b_28 - 5'h11;
    `ifndef INTEL_SVA_OFF
        assert (f_28 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_17 = b_28 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_17 == 7'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_29 = 3'sd2;
    b_29 = 6'h22;
    c_29 = b_29 <<< a_29;
    `ifndef INTEL_SVA_OFF
        assert (c_29 == 8'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_29 = b_29 >>> a_29;
    `ifndef INTEL_SVA_OFF
        assert (d_29 == 4'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_29 = b_29 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_29 == 9'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_29 = b_29 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_29 == 3'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_12 = 1;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_30 = 6'sh11;
    b_30 = 7'sh22;
    c_30 = b_30 + a_30;
    `ifndef INTEL_SVA_OFF
        assert (c_30 == 7'sh33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_30 = b_30 - a_30;
    `ifndef INTEL_SVA_OFF
        assert (d_30 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_30 = b_30 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_30 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_30 = b_30 - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_30 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_18 = b_30 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_18 == 8'sh44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_31 = 3'sd2;
    b_31 = 7'sh22;
    c_31 = b_31 <<< a_31;
    `ifndef INTEL_SVA_OFF
        assert (c_31 == 9'sh88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_31 = b_31 >>> a_31;
    `ifndef INTEL_SVA_OFF
        assert (d_31 == 5'sh8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_31 = b_31 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_31 == 10'sh110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_31 = b_31 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_31 == 4'sh4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (1)
    begin
        // Call neg_add_sub() begin
        a_32 = -6'sh11;
        b_32 = -7'sh22;
        c_32 = b_32 + a_32;
        `ifndef INTEL_SVA_OFF
            assert (c_32 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:724:9");
        `endif // INTEL_SVA_OFF
        d_32 = b_32 - a_32;
        `ifndef INTEL_SVA_OFF
            assert (d_32 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:728:9");
        `endif // INTEL_SVA_OFF
        e_32 = b_32 + (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (e_32 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:732:9");
        `endif // INTEL_SVA_OFF
        f_32 = b_32 - 6'sh11;
        `ifndef INTEL_SVA_OFF
            assert (f_32 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:736:9");
        `endif // INTEL_SVA_OFF
        g_19 = b_32 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (g_19 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:740:9");
        `endif // INTEL_SVA_OFF
        // Call neg_add_sub() end
    end
    // Call run_opers() end
    isSigned_13 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_33 = 6'sh11;
    b_33 = 6'h22;
    c_33 = b_33 + a_33;
    `ifndef INTEL_SVA_OFF
        assert (c_33 == 6'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_33 = b_33 - a_33;
    `ifndef INTEL_SVA_OFF
        assert (d_33 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_33 = b_33 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_33 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_33 = b_33 - 5'h11;
    `ifndef INTEL_SVA_OFF
        assert (f_33 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_20 = b_33 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_20 == 7'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_34 = 3'sd2;
    b_34 = 6'h22;
    c_34 = b_34 <<< a_34;
    `ifndef INTEL_SVA_OFF
        assert (c_34 == 8'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_34 = b_34 >>> a_34;
    `ifndef INTEL_SVA_OFF
        assert (d_34 == 4'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_34 = b_34 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_34 == 9'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_34 = b_34 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_34 == 3'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_14 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_35 = 'h11;
    b_35 = 6'h22;
    c_35 = b_35 + a_35;
    `ifndef INTEL_SVA_OFF
        assert (c_35 == 6'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_35 = b_35 - a_35;
    `ifndef INTEL_SVA_OFF
        assert (d_35 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_35 = b_35 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_35 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_35 = b_35 - 5'h11;
    `ifndef INTEL_SVA_OFF
        assert (f_35 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_21 = b_35 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_21 == 7'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_36 = 2;
    b_36 = 6'h22;
    c_36 = b_36 <<< a_36;
    `ifndef INTEL_SVA_OFF
        assert (c_36 == 8'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_36 = b_36 >>> a_36;
    `ifndef INTEL_SVA_OFF
        assert (d_36 == 4'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_36 = b_36 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_36 == 9'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_36 = b_36 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_36 == 3'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_15 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_37 = 5'h11;
    b_37 = 6'h22;
    c_37 = b_37 + a_37;
    `ifndef INTEL_SVA_OFF
        assert (c_37 == 6'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_37 = b_37 - a_37;
    `ifndef INTEL_SVA_OFF
        assert (d_37 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_37 = b_37 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_37 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_37 = b_37 - 5'h11;
    `ifndef INTEL_SVA_OFF
        assert (f_37 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_22 = b_37 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_22 == 7'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_38 = 2'd2;
    b_38 = 6'h22;
    c_38 = b_38 <<< a_38;
    `ifndef INTEL_SVA_OFF
        assert (c_38 == 8'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_38 = b_38 >>> a_38;
    `ifndef INTEL_SVA_OFF
        assert (d_38 == 4'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_38 = b_38 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_38 == 9'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_38 = b_38 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_38 == 3'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_16 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_39 = 5'h11;
    b_39 = 6'h22;
    c_39 = b_39 + a_39;
    `ifndef INTEL_SVA_OFF
        assert (c_39 == 6'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_39 = b_39 - a_39;
    `ifndef INTEL_SVA_OFF
        assert (d_39 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_39 = b_39 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_39 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_39 = b_39 - 5'h11;
    `ifndef INTEL_SVA_OFF
        assert (f_39 == 5'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_23 = b_39 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_23 == 7'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_40 = 2'd2;
    b_40 = 6'h22;
    c_40 = b_40 <<< a_40;
    `ifndef INTEL_SVA_OFF
        assert (c_40 == 8'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_40 = b_40 >>> a_40;
    `ifndef INTEL_SVA_OFF
        assert (d_40 == 4'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_40 = b_40 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_40 == 9'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_40 = b_40 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_40 == 3'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_17 = 1;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_41 = 'h11;
    b_41 = 'h22;
    c_41 = b_41 + a_41;
    `ifndef INTEL_SVA_OFF
        assert (c_41 == 7'sh33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_41 = b_41 - a_41;
    `ifndef INTEL_SVA_OFF
        assert (d_41 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_41 = b_41 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_41 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_41 = b_41 - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_41 == 6'sh11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_24 = b_41 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_24 == 8'sh44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_42 = 2;
    b_42 = 'h22;
    c_42 = b_42 <<< a_42;
    `ifndef INTEL_SVA_OFF
        assert (c_42 == 9'sh88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_42 = b_42 >>> a_42;
    `ifndef INTEL_SVA_OFF
        assert (d_42 == 5'sh8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_42 = b_42 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_42 == 10'sh110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_42 = b_42 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_42 == 4'sh4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (1)
    begin
        // Call neg_add_sub() begin
        a_43 = -6'sh11;
        b_43 = -7'sh22;
        c_43 = b_43 + a_43;
        `ifndef INTEL_SVA_OFF
            assert (c_43 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:724:9");
        `endif // INTEL_SVA_OFF
        d_43 = b_43 - a_43;
        `ifndef INTEL_SVA_OFF
            assert (d_43 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:728:9");
        `endif // INTEL_SVA_OFF
        e_43 = b_43 + (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (e_43 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:732:9");
        `endif // INTEL_SVA_OFF
        f_43 = b_43 - 6'sh11;
        `ifndef INTEL_SVA_OFF
            assert (f_43 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:736:9");
        `endif // INTEL_SVA_OFF
        g_25 = b_43 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (g_25 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:740:9");
        `endif // INTEL_SVA_OFF
        // Call neg_add_sub() end
    end
    // Call run_opers() end
    isSigned_18 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_44 = 5'h11;
    b_44 = 'h22;
    c_44 = b_44 + signed'({1'b0, a_44});
    `ifndef INTEL_SVA_OFF
        assert (c_44 == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_44 = b_44 - signed'({1'b0, a_44});
    `ifndef INTEL_SVA_OFF
        assert (d_44 == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_44 = b_44 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_44 == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_44 = b_44 - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_44 == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_26 = b_44 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_26 == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_45 = 2'd2;
    b_45 = 'h22;
    c_45 = b_45 <<< a_45;
    `ifndef INTEL_SVA_OFF
        assert (c_45 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_45 = b_45 >>> a_45;
    `ifndef INTEL_SVA_OFF
        assert (d_45 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_45 = b_45 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_45 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_45 = b_45 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_45 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_19 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_46 = 'h11;
    b_46 = 6'h22;
    c_46 = signed'({1'b0, b_46}) + a_46;
    `ifndef INTEL_SVA_OFF
        assert (c_46 == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_46 = signed'({1'b0, b_46}) - a_46;
    `ifndef INTEL_SVA_OFF
        assert (d_46 == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_46 = signed'({1'b0, b_46}) + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_46 == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_46 = signed'({1'b0, b_46}) - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_46 == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_27 = signed'({1'b0, b_46}) - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_27 == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_47 = 2;
    b_47 = 6'h22;
    c_47 = b_47 <<< a_47;
    `ifndef INTEL_SVA_OFF
        assert (c_47 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_47 = b_47 >>> a_47;
    `ifndef INTEL_SVA_OFF
        assert (d_47 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_47 = b_47 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_47 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_47 = b_47 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_47 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_20 = 1;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_48 = 'h11;
    b_48 = 'h22;
    c_48 = b_48 + a_48;
    `ifndef INTEL_SVA_OFF
        assert (c_48 == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_48 = b_48 - a_48;
    `ifndef INTEL_SVA_OFF
        assert (d_48 == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_48 = b_48 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_48 == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_48 = b_48 - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_48 == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_28 = b_48 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_28 == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_49 = 2;
    b_49 = 'h22;
    c_49 = b_49 <<< a_49;
    `ifndef INTEL_SVA_OFF
        assert (c_49 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_49 = b_49 >>> a_49;
    `ifndef INTEL_SVA_OFF
        assert (d_49 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_49 = b_49 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_49 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_49 = b_49 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_49 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (1)
    begin
        // Call neg_add_sub() begin
        a_50 = -6'sh11;
        b_50 = -7'sh22;
        c_50 = b_50 + a_50;
        `ifndef INTEL_SVA_OFF
            assert (c_50 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:724:9");
        `endif // INTEL_SVA_OFF
        d_50 = b_50 - a_50;
        `ifndef INTEL_SVA_OFF
            assert (d_50 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:728:9");
        `endif // INTEL_SVA_OFF
        e_50 = b_50 + (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (e_50 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:732:9");
        `endif // INTEL_SVA_OFF
        f_50 = b_50 - 6'sh11;
        `ifndef INTEL_SVA_OFF
            assert (f_50 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:736:9");
        `endif // INTEL_SVA_OFF
        g_29 = b_50 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (g_29 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:740:9");
        `endif // INTEL_SVA_OFF
        // Call neg_add_sub() end
    end
    // Call run_opers() end
    isSigned_21 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_51 = 5'h11;
    b_51 = 6'h22;
    c_51 = b_51 + a_51;
    `ifndef INTEL_SVA_OFF
        assert (c_51 == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_51 = signed'({1'b0, b_51}) - signed'({1'b0, a_51});
    `ifndef INTEL_SVA_OFF
        assert (d_51 == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_51 = signed'({1'b0, b_51}) + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_51 == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_51 = signed'({1'b0, b_51}) - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_51 == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_30 = signed'({1'b0, b_51}) - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_30 == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_52 = 2'd2;
    b_52 = 6'h22;
    c_52 = b_52 <<< a_52;
    `ifndef INTEL_SVA_OFF
        assert (c_52 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_52 = b_52 >>> a_52;
    `ifndef INTEL_SVA_OFF
        assert (d_52 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_52 = b_52 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_52 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_52 = b_52 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_52 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
    isSigned_22 = 1;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_53 = 'h11;
    b_53 = 'h22;
    c_53 = b_53 + a_53;
    `ifndef INTEL_SVA_OFF
        assert (c_53 == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_53 = b_53 - a_53;
    `ifndef INTEL_SVA_OFF
        assert (d_53 == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_53 = b_53 + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_53 == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_53 = b_53 - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_53 == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_31 = b_53 - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_31 == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_54 = 2;
    b_54 = 'h22;
    c_54 = b_54 <<< a_54;
    `ifndef INTEL_SVA_OFF
        assert (c_54 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_54 = b_54 >>> a_54;
    `ifndef INTEL_SVA_OFF
        assert (d_54 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_54 = b_54 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_54 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_54 = b_54 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_54 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (1)
    begin
        // Call neg_add_sub() begin
        a_55 = -6'sh11;
        b_55 = -7'sh22;
        c_55 = b_55 + a_55;
        `ifndef INTEL_SVA_OFF
            assert (c_55 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:724:9");
        `endif // INTEL_SVA_OFF
        d_55 = b_55 - a_55;
        `ifndef INTEL_SVA_OFF
            assert (d_55 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:728:9");
        `endif // INTEL_SVA_OFF
        e_55 = b_55 + (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (e_55 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:732:9");
        `endif // INTEL_SVA_OFF
        f_55 = b_55 - 6'sh11;
        `ifndef INTEL_SVA_OFF
            assert (f_55 == -7'sh33) else $error("Assertion failed at test_const_liter.cpp:736:9");
        `endif // INTEL_SVA_OFF
        g_32 = b_55 - (-6'sh11);
        `ifndef INTEL_SVA_OFF
            assert (g_32 == -6'sh11) else $error("Assertion failed at test_const_liter.cpp:740:9");
        `endif // INTEL_SVA_OFF
        // Call neg_add_sub() end
    end
    // Call run_opers() end
    isSigned_23 = 0;
    // Call run_opers() begin
    // Call pos_add_sub() begin
    a_56 = 6'sh11;
    b_56 = 6'h22;
    c_56 = signed'({1'b0, b_56}) + a_56;
    `ifndef INTEL_SVA_OFF
        assert (c_56 == 'h33) else $error("Assertion failed at test_const_liter.cpp:697:9");
    `endif // INTEL_SVA_OFF
    d_56 = signed'({1'b0, b_56}) - a_56;
    `ifndef INTEL_SVA_OFF
        assert (d_56 == 'h11) else $error("Assertion failed at test_const_liter.cpp:701:9");
    `endif // INTEL_SVA_OFF
    e_56 = signed'({1'b0, b_56}) + (-6'sh11);
    `ifndef INTEL_SVA_OFF
        assert (e_56 == 'h11) else $error("Assertion failed at test_const_liter.cpp:705:9");
    `endif // INTEL_SVA_OFF
    f_56 = signed'({1'b0, b_56}) - 6'sh11;
    `ifndef INTEL_SVA_OFF
        assert (f_56 == 'h11) else $error("Assertion failed at test_const_liter.cpp:709:9");
    `endif // INTEL_SVA_OFF
    g_33 = signed'({1'b0, b_56}) - (-7'sh22);
    `ifndef INTEL_SVA_OFF
        assert (g_33 == 'h44) else $error("Assertion failed at test_const_liter.cpp:713:9");
    `endif // INTEL_SVA_OFF
    // Call pos_add_sub() end
    // Call pos_shift() begin
    a_57 = 3'sd2;
    b_57 = 6'h22;
    c_57 = b_57 <<< a_57;
    `ifndef INTEL_SVA_OFF
        assert (c_57 == 'h88) else $error("Assertion failed at test_const_liter.cpp:751:9");
    `endif // INTEL_SVA_OFF
    d_57 = b_57 >>> a_57;
    `ifndef INTEL_SVA_OFF
        assert (d_57 == 'h8) else $error("Assertion failed at test_const_liter.cpp:755:9");
    `endif // INTEL_SVA_OFF
    e_57 = b_57 <<< 'h3;
    `ifndef INTEL_SVA_OFF
        assert (e_57 == 'h110) else $error("Assertion failed at test_const_liter.cpp:759:9");
    `endif // INTEL_SVA_OFF
    f_57 = b_57 >>> 'h3;
    `ifndef INTEL_SVA_OFF
        assert (f_57 == 'h4) else $error("Assertion failed at test_const_liter.cpp:763:9");
    `endif // INTEL_SVA_OFF
    // Call pos_shift() end
    if (0)
    begin
    end
    // Call run_opers() end
end

endmodule


