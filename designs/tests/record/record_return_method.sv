//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.25
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(

);

endmodule



//==============================================================================
//
// Module: A (test_return_method.cpp:210:5)
//
module A // "b_mod.a_mod"
(
);

// Variables generated for SystemC signals
logic [31:0] t;
logic [31:0] t2;
logic [31:0] sig;
logic rec_sig_a;
logic signed [31:0] rec_sig_b;
logic [31:0] t3;

//------------------------------------------------------------------------------
// Method process: record_return1 (test_return_method.cpp:61:5) 

always_comb 
begin : record_return1     // test_return_method.cpp:61:5
    logic r_a;
    integer r_b;
    logic TMP_0_a;
    integer TMP_0_b;
    logic s_a;
    integer s_b;
    // Call f() begin
    r_b = 2;
    TMP_0_a = r_a; TMP_0_b = r_b;
    // Call f() end
    s_a = TMP_0_a; s_b = TMP_0_b;
end

//------------------------------------------------------------------------------
// Method process: record_return2 (test_return_method.cpp:77:5) 

always_comb 
begin : record_return2     // test_return_method.cpp:77:5
    logic val1;
    integer val2;
    logic r_a;
    integer r_b;
    logic TMP_0_a;
    integer TMP_0_b;
    logic s_a;
    integer s_b;
    val1 = 1; val2 = 2;
    // Call g() begin
    r_a = |t;
    r_b = val1 + val2;
    TMP_0_a = r_a; TMP_0_b = r_b;
    // Call g() end
    s_a = TMP_0_a; s_b = TMP_0_b;
    if (s_a)
    begin
        s_b = 1;
    end
end

//------------------------------------------------------------------------------
// Method process: record_return3 (test_return_method.cpp:88:5) 

always_comb 
begin : record_return3     // test_return_method.cpp:88:5
    logic s_a;
    integer s_b;
    logic r_a;
    integer r_b;
    logic TMP_0_a;
    integer TMP_0_b;
    if (|t)
    begin
        // Call f() begin
        r_b = 2;
        TMP_0_a = r_a; TMP_0_b = r_b;
        // Call f() end
        s_a = TMP_0_a; s_b = TMP_0_b;
    end
end

//------------------------------------------------------------------------------
// Method process: rec_ref_return1 (test_return_method.cpp:116:5) 

// Process-local variables
logic signed [31:0] g_rec_b;
logic g_rec_a;

always_comb 
begin : rec_ref_return1     // test_return_method.cpp:116:5
    logic s_a;
    integer s_b;
    logic res_a;
    integer res_b;
    // Call func_par() begin
    s_b = 41;
    // Call func_par() end
    res_a = s_a; res_b = s_b;
    `ifndef INTEL_SVA_OFF
        assert (s_b == 41) else $error("Assertion failed at test_return_method.cpp:120:9");
    `endif // INTEL_SVA_OFF
    t2 = res_b;
    // Call func_mem() begin
    g_rec_b = 42;
    // Call func_mem() end
    res_a = g_rec_a; res_b = g_rec_b;
    `ifndef INTEL_SVA_OFF
        assert (s_b == 42) else $error("Assertion failed at test_return_method.cpp:124:9");
    `endif // INTEL_SVA_OFF
    t2 = res_b;
end

//------------------------------------------------------------------------------
// Method process: sig_ref_return (test_return_method.cpp:151:5) 

// Process-local variables
logic [31:0] mem_var;
logic signed [31:0] mem_rec_b;
logic mem_rec_a;

always_comb 
begin : sig_ref_return     // test_return_method.cpp:151:5
    integer unsigned l;
    integer unsigned TMP_0;
    integer unsigned TMP_1;
    logic r_a;
    integer r_b;
    mem_var = t;
    mem_rec_b = 42;
    // Call read_var() begin
    TMP_0 = mem_var;
    // Call read_var() end
    l = TMP_0;
    // Call read_sig() begin
    TMP_1 = sig;
    // Call read_sig() end
    l = TMP_1;
    // Call g_mem() begin
    mem_rec_b = 42;
    // Call g_mem() end
    r_a = mem_rec_a; r_b = mem_rec_b;
    r_a = rec_sig_a; r_b = rec_sig_b;
    t3 = r_b + l;
    t3 = 0 + 0;
    t3 = 0 + 0;
end

endmodule


