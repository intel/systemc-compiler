//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.25
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(

);

endmodule



//==============================================================================
//
// Module: A (test_func_param_method.cpp:221:5)
//
module A // "b_mod.a_mod"
(
);

// Variables generated for SystemC signals
logic signed [31:0] t0;
logic signed [31:0] t1;
logic signed [31:0] t2;
logic signed [31:0] t3;

//------------------------------------------------------------------------------
// Method process: record_fcall_ref (test_func_param_method.cpp:89:5) 

always_comb 
begin : record_fcall_ref     // test_func_param_method.cpp:89:5
    logic s_a;
    integer s_b;
    s_b = 1;
    // Call f1() begin
    s_b = 2;
    // Call f1() end
    t0 = s_b;
end

//------------------------------------------------------------------------------
// Method process: record_fcall_val (test_func_param_method.cpp:103:5) 

always_comb 
begin : record_fcall_val     // test_func_param_method.cpp:103:5
    logic s_a;
    integer s_b;
    logic par_a;
    integer par_b;
    s_b = 1;
    par_a = s_a; par_b = s_b;
    // Call f2() begin
    par_b = 2;
    // Call f2() end
    t1 = s_b;
end

//------------------------------------------------------------------------------
// Method process: record_fcall_two_val (test_func_param_method.cpp:112:5) 

always_comb 
begin : record_fcall_two_val     // test_func_param_method.cpp:112:5
    logic s_a;
    integer s_b;
    logic r_a;
    integer r_b;
    logic par1_a;
    integer par1_b;
    logic par2_a;
    integer par2_b;
    logic b;
    par1_a = s_a; par1_b = s_b; par2_a = r_a; par2_b = r_b;
    // Call f3() begin
    b = par1_a || par2_a;
    par1_a = |2'(b + 2'sd1);
    par2_a = |2'(b - 2'sd1);
    // Call f3() end
end

//------------------------------------------------------------------------------
// Method process: record_fcall_two_val2 (test_func_param_method.cpp:120:5) 

// Process-local variables
logic gr_a;
logic signed [31:0] gr_b;

always_comb 
begin : record_fcall_two_val2     // test_func_param_method.cpp:120:5
    logic s_a;
    integer s_b;
    logic par1_a;
    integer par1_b;
    logic par2_a;
    integer par2_b;
    logic b;
    gr_a = 1;
    par1_a = gr_a; par1_b = gr_b; par2_a = s_a; par2_b = s_b;
    // Call f3() begin
    b = 1;
    par1_a = |2'(b + 2'sd1);
    par2_a = |2'(b - 2'sd1);
    // Call f3() end
end

//------------------------------------------------------------------------------
// Method process: record_fcall_two_ref (test_func_param_method.cpp:128:5) 

always_comb 
begin : record_fcall_two_ref     // test_func_param_method.cpp:128:5
    logic s_a;
    integer s_b;
    logic r_a;
    integer r_b;
    logic b;
    // Call f4() begin
    b = s_a && r_a;
    s_a = b;
    // Call f4() end
end

//------------------------------------------------------------------------------
// Method process: record_fcall_two_ref2 (test_func_param_method.cpp:136:5) 

// Process-local variables
logic gs_a;

always_comb 
begin : record_fcall_two_ref2     // test_func_param_method.cpp:136:5
    logic r_a;
    integer r_b;
    logic b;
    r_b = 4;
    gs_a = 1;
    // Call f4() begin
    b = gs_a && r_a;
    gs_a = b;
    // Call f4() end
end

//------------------------------------------------------------------------------
// Method process: record_fcall_mixed (test_func_param_method.cpp:154:5) 

always_comb 
begin : record_fcall_mixed     // test_func_param_method.cpp:154:5
    logic r_a;
    integer r_b;
    integer j;
    logic b;
    integer TMP_0;
    integer par1;
    logic par2_a;
    integer par2_b;
    logic par3;
    integer i;
    par1 = j; par2_a = r_a; par2_b = r_b; par3 = b;
    // Call f5() begin
    i = par3 ? par1 : par2_b;
    TMP_0 = i;
    // Call f5() end
end

//------------------------------------------------------------------------------
// Method process: record_two_fcalls_mixed (test_func_param_method.cpp:163:5) 

always_comb 
begin : record_two_fcalls_mixed     // test_func_param_method.cpp:163:5
    logic s_a;
    integer s_b;
    logic r_a;
    integer r_b;
    logic par1_a;
    integer par1_b;
    logic par2_a;
    integer par2_b;
    logic b;
    integer j;
    logic b_1;
    integer TMP_0;
    integer par1_1;
    logic par2_a_1;
    integer par2_b_1;
    logic par3;
    integer i;
    integer TMP_1;
    par1_a = s_a; par1_b = s_b; par2_a = r_a; par2_b = r_b;
    // Call f3() begin
    b = par1_a || par2_a;
    par1_a = |2'(b + 2'sd1);
    par2_a = |2'(b - 2'sd1);
    // Call f3() end
    par1_a = r_a; par1_b = r_b; par2_a = s_a; par2_b = s_b;
    // Call f3() begin
    b = par1_a || par2_a;
    par1_a = |2'(b + 2'sd1);
    par2_a = |2'(b - 2'sd1);
    // Call f3() end
    j = 42;
    r_a = 1;
    par1_1 = j; par2_a_1 = r_a; par2_b_1 = r_b; par3 = b_1;
    // Call f5() begin
    i = par3 ? par1_1 : par2_b_1;
    TMP_0 = i;
    // Call f5() end
    r_b = 11;
    par1_1 = j; par2_a_1 = s_a; par2_b_1 = s_b; par3 = b_1;
    // Call f5() begin
    i = par3 ? par1_1 : par2_b_1;
    TMP_1 = i;
    // Call f5() end
end

//------------------------------------------------------------------------------
// Method process: record_fcall_const_ref1 (test_func_param_method.cpp:183:5) 

always_comb 
begin : record_fcall_const_ref1     // test_func_param_method.cpp:183:5
    logic r_a;
    integer r_b;
    logic t_a;
    integer t_b;
    // Call cref_copy() begin
    r_a = t_a;
    r_b = t_b;
    // Call cref_copy() end
end

//------------------------------------------------------------------------------
// Method process: record_fcall_const_ref2 (test_func_param_method.cpp:195:5) 

always_comb 
begin : record_fcall_const_ref2     // test_func_param_method.cpp:195:5
    logic r_a;
    integer r_b;
    logic t_a;
    integer t_b;
    logic TMP_0;
    logic b;
    t_a = 1'd1;
    // Call cref_cmp() begin
    TMP_0 = r_a == t_a && r_b == t_b;
    // Call cref_cmp() end
    b = TMP_0;
    t2 = b;
end

//------------------------------------------------------------------------------
// Method process: record_fcall_const_ref3 (test_func_param_method.cpp:209:5) 

always_comb 
begin : record_fcall_const_ref3     // test_func_param_method.cpp:209:5
    logic r_a;
    integer r_b;
    logic t_a;
    integer t_b;
    integer TMP_0;
    integer res;
    integer i;
    integer TMP_2;
    // Call cref_sum() begin
    res = t_a + t_b;
    TMP_0 = res;
    // Call cref_sum() end
    i = TMP_0;
    // Call cref_sum() begin
    res = r_a + r_b;
    TMP_2 = res;
    // Call cref_sum() end
    i = TMP_2;
    t3 = i;
end

endmodule


