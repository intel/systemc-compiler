//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.25
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// Variables generated for SystemC signals
logic [1:0] a;
logic signed [1:0] as_i;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .a(a),
  .as_i(as_i)
);

endmodule



//==============================================================================
//
// Module: A (test_array_if_method.cpp:244:5)
//
module A // "b_mod.a_mod"
(
    input logic [1:0] a,
    input logic signed [1:0] as_i
);

// Variables generated for SystemC signals
logic s;

//------------------------------------------------------------------------------
// Method process: record_var_if (test_array_if_method.cpp:70:5) 

// Process-local variables
logic signed [31:0] rec_a[16];

always_comb 
begin : record_var_if     // test_array_if_method.cpp:70:5
    integer num1;
    integer num2;
    num1 = '0;
    num2 = 1;
    rec_a[num1] = '0;
    rec_a[num2] = 1;
    if (as_i == 0)
    begin
        rec_a[as_i] = 35;
        rec_a[s] = 45;
    end else begin
        rec_a[as_i] = 25;
        rec_a[s] = 50;
    end
end

//------------------------------------------------------------------------------
// Method process: record_var_if_bitwise (test_array_if_method.cpp:103:5) 

// Process-local variables
logic [15:0] rec2a_a[12];
logic [15:0] rec2b_a[12];
logic [31:0] rec2b_c[12];
logic [31:0] rec2b_d[12];
logic [31:0] rec2b_e[12];
logic [31:0] rec2b_f[12];
logic [31:0] rec2b_g[12];
logic [31:0] rec2b_h[12];

always_comb 
begin : record_var_if_bitwise     // test_array_if_method.cpp:103:5
    integer num1;
    integer num2;
    integer num3;
    integer num1a;
    num1 = 2;
    num2 = 2;
    num3 = 2;
    rec2a_a[0] = 15;
    rec2a_a[1] = 30;
    rec2a_a[num1++] = num2++;
    rec2a_a[num1++] = num2++;
    rec2a_a[num1++] = num2++;
    rec2a_a[num1++] = num2++;
    num1a = 2;
    rec2b_a[0] = rec2a_a[0] & rec2a_a[1];
    rec2b_a[1] = rec2a_a[1] | rec2a_a[2];
    rec2b_a[num1a++] = rec2a_a[2] ^ rec2a_a[3];
    rec2b_a[num1a++] = !(|(rec2a_a[2] ^ rec2a_a[3]));
    rec2b_a[num1a++] = 1;
    rec2b_a[num1a++] = '0;
    rec2b_c[num3] = rec2a_a[0] & rec2a_a[1];
    rec2b_d[num3] = rec2a_a[0] | rec2a_a[1];
    rec2b_e[num3] = |rec2a_a[0] && |rec2a_a[1];
    rec2b_f[num3] = 1;
    rec2b_g[num3] = !(|rec2a_a[0]);
    rec2b_h[num3] = rec2a_a[0] ^ rec2a_a[1];
    rec2b_c[num3 + 1] = rec2a_a[0] | rec2a_a[1];
    rec2b_d[num3 + 1] = rec2a_a[0] & rec2a_a[1];
    rec2b_e[num3 + 1] = 1;
    rec2b_f[num3 + 1] = |rec2a_a[0] && |rec2a_a[1];
    rec2b_g[num3 + 1] = rec2a_a[0] ^ rec2a_a[1];
    rec2b_h[num3 + 1] = !(|rec2a_a[0]);
end

//------------------------------------------------------------------------------
// Method process: record_var_if_arith (test_array_if_method.cpp:171:5) 

// Process-local variables
logic [15:0] rec3a_a[8];
logic [15:0] rec3b_a[8];
logic [31:0] rec3b_c[8];
logic [31:0] rec3b_d[8];
logic [31:0] rec3b_e[8];
logic [31:0] rec3b_f[8];
logic [31:0] rec3b_g[8];

always_comb 
begin : record_var_if_arith     // test_array_if_method.cpp:171:5
    integer num1;
    integer num2;
    integer num3;
    integer num1a;
    num1 = 2;
    num2 = 2;
    num3 = 2;
    rec3a_a[0] = 15;
    rec3a_a[1] = 30;
    rec3a_a[num1++] = num2++;
    rec3a_a[num1++] = num2++;
    rec3a_a[num1++] = num2++;
    rec3a_a[num1++] = num2++;
    num1a = 2;
    rec3b_a[0] = rec3a_a[0] + rec3a_a[1];
    rec3b_a[1] = rec3a_a[1] - rec3a_a[2];
    rec3b_a[num1a++] = rec3a_a[2] * rec3a_a[3];
    rec3b_a[num1a++] = rec3a_a[1] / rec3a_a[3];
    rec3b_c[num3] = rec3a_a[1] - rec3a_a[0];
    rec3b_d[num3] = rec3a_a[0] + rec3a_a[1];
    rec3b_e[num3] = rec3a_a[1] / rec3a_a[0];
    rec3b_f[num3] = rec3a_a[2] * rec3a_a[3];
    rec3b_g[num3] = rec3a_a[1] % rec3a_a[0];
    rec3b_c[num3 + 1] = rec3a_a[1] - rec3a_a[0];
    rec3b_d[num3 + 1] = rec3a_a[0] + rec3a_a[1];
    rec3b_e[num3 + 1] = rec3a_a[1] / rec3a_a[0];
    rec3b_f[num3 + 1] = rec3a_a[2] * rec3a_a[3];
    rec3b_g[num3 + 1] = rec3a_a[1] % rec3a_a[0];
end

endmodule


