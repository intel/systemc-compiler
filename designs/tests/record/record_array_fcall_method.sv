//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.25
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
);

// Variables generated for SystemC signals
logic [1:0] a;
logic signed [1:0] as_i;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .a(a),
  .as_i(as_i)
);

endmodule



//==============================================================================
//
// Module: A (test_array_fcall_method.cpp:583:5)
//
module A // "b_mod.a_mod"
(
    input logic [1:0] a,
    input logic signed [1:0] as_i
);

// Variables generated for SystemC signals
logic signed [31:0] s;
logic signed [31:0] t0;
logic signed [31:0] t1;
logic signed [31:0] t2;
logic signed [31:0] t3;
logic signed [31:0] t4;
logic signed [31:0] t5;
logic signed [31:0] t6;
logic signed [31:0] srr[3];
logic signed [31:0] spp[3];

//------------------------------------------------------------------------------
// Method process: rec_arr_elem_func_param_val (test_array_fcall_method.cpp:83:5) 

always_comb 
begin : rec_arr_elem_func_param_val     // test_array_fcall_method.cpp:83:5
    logic signed [1:0] sr_a;
    logic [3:0] sr_b;
    logic signed [1:0] par_a;
    logic [3:0] par_b;
    integer k;
    logic signed [1:0] sra_a[3];
    logic [3:0] sra_b[3];
    integer i;
    sr_a = '0;
    sr_b = '0;
    par_a = sr_a; par_b = sr_b;
    // Call f1() begin
    k = par_b;
    t0 = k;
    // Call f1() end
    par_a = sra_a[1]; par_b = sra_b[1];
    // Call f1() begin
    k = par_b;
    t0 = k;
    // Call f1() end
    i = s;
    par_a = sra_a[i]; par_b = sra_b[i];
    // Call f1() begin
    k = par_b;
    t0 = k;
    // Call f1() end
end

//------------------------------------------------------------------------------
// Method process: rec_arr_elem_func_param_val2 (test_array_fcall_method.cpp:98:5) 

always_comb 
begin : rec_arr_elem_func_param_val2     // test_array_fcall_method.cpp:98:5
    logic signed [1:0] xr_a;
    logic [3:0] xr_b;
    logic signed [1:0] yr_a;
    logic [3:0] yr_b;
    logic signed [1:0] xra_a[3];
    logic [3:0] xra_b[3];
    logic signed [1:0] yra_a[2];
    logic [3:0] yra_b[2];
    integer TMP_0;
    logic signed [1:0] par1_a;
    logic [3:0] par1_b;
    logic signed [1:0] par2_a;
    logic [3:0] par2_b;
    integer TMP_1;
    integer TMP_2;
    integer TMP_3;
    integer TMP_4;
    integer i;
    xr_a = '0;
    xr_b = '0;
    yr_a = '0;
    yr_b = '0;
    par1_a = xra_a[2]; par1_b = xra_b[2]; par2_a = yra_a[1]; par2_b = yra_b[1];
    // Call f1_two() begin
    TMP_0 = par1_b + par2_b;
    // Call f1_two() end
    par1_a = xra_a[2]; par1_b = xra_b[2]; par2_a = xra_a[1]; par2_b = xra_b[1];
    // Call f1_two() begin
    TMP_1 = par1_b + par2_b;
    // Call f1_two() end
    par1_a = xra_a[2]; par1_b = xra_b[2]; par2_a = xra_a[2]; par2_b = xra_b[2];
    // Call f1_two() begin
    TMP_2 = par1_b + par2_b;
    // Call f1_two() end
    par1_a = xra_a[2]; par1_b = xra_b[2]; par2_a = yr_a; par2_b = yr_b;
    // Call f1_two() begin
    TMP_3 = par1_b + par2_b;
    // Call f1_two() end
    par1_a = yr_a; par1_b = yr_b; par2_a = xra_a[1]; par2_b = xra_b[1];
    // Call f1_two() begin
    TMP_4 = par1_b + par2_b;
    // Call f1_two() end
    i = TMP_4;
    t1 = i;
end

//------------------------------------------------------------------------------
// Method process: rec_arr_elem_func_param_val3 (test_array_fcall_method.cpp:115:5) 

always_comb 
begin : rec_arr_elem_func_param_val3     // test_array_fcall_method.cpp:115:5
    integer i;
    logic signed [1:0] qr_a;
    logic [3:0] qr_b;
    logic signed [1:0] qra_a[3];
    logic [3:0] qra_b[3];
    integer TMP_0;
    logic signed [1:0] par1_a;
    logic [3:0] par1_b;
    logic signed [1:0] par2_a;
    logic [3:0] par2_b;
    integer TMP_1;
    integer TMP_2;
    logic signed [1:0] par_a;
    logic [3:0] par_b;
    integer k;
    t0 = '0;
    i = s;
    qr_a = '0;
    qr_b = '0;
    par1_a = qra_a[i]; par1_b = qra_b[i]; par2_a = qra_a[i]; par2_b = qra_b[i];
    // Call f1_two() begin
    TMP_0 = par1_b + par2_b;
    // Call f1_two() end
    par1_a = qr_a; par1_b = qr_b; par2_a = qra_a[i + 1]; par2_b = qra_b[i + 1];
    // Call f1_two() begin
    TMP_1 = par1_b + par2_b;
    // Call f1_two() end
    if (|i)
    begin
        par1_a = qra_a[i - 1]; par1_b = qra_b[i - 1]; par2_a = qr_a; par2_b = qr_b;
        // Call f1_two() begin
        TMP_2 = par1_b + par2_b;
        // Call f1_two() end
    end else begin
        if (i == 1)
        begin
            par_a = qra_a[i]; par_b = qra_b[i];
            // Call f1() begin
            k = par_b;
            t0 = k;
            // Call f1() end
        end
    end
    t2 = qra_a[i];
end

//------------------------------------------------------------------------------
// Method process: rec_arr_elem_func_param_ref (test_array_fcall_method.cpp:152:5) 

always_comb 
begin : rec_arr_elem_func_param_ref     // test_array_fcall_method.cpp:152:5
    logic signed [1:0] vr_a[3];
    logic [3:0] vr_b[3];
    integer k;
    integer i;
    // Call f2() begin
    k = vr_b[1];
    t3 = k;
    // Call f2() end
    i = s;
    // Call f2() begin
    k = vr_b[i];
    t3 = k;
    // Call f2() end
end

//------------------------------------------------------------------------------
// Method process: rec_arr_elem_func_param_ref2 (test_array_fcall_method.cpp:163:5) 

always_comb 
begin : rec_arr_elem_func_param_ref2     // test_array_fcall_method.cpp:163:5
    logic signed [1:0] er_a[3];
    logic [3:0] er_b[3];
    logic signed [1:0] fr_a;
    logic [3:0] fr_b;
    integer k;
    logic a_1;
    integer i;
    integer TMP_0;
    logic a_2;
    integer TMP_1;
    fr_a = '0;
    fr_b = '0;
    // Call f2_two() begin
    k = fr_b + er_b[2];
    t4 = k;
    // Call f2_two() end
    // Call f2_two() begin
    k = er_b[1] + er_b[2];
    t4 = k;
    // Call f2_two() end
    // Call f2_two() begin
    k = er_b[1] + er_b[1];
    t4 = k;
    // Call f2_two() end
    i = s;
    a_2 = 1;
    // Call f2_two_cond() begin
    TMP_0 = er_b[i];
    // Call f2_two_cond() end
    a_1 = |TMP_0;
    a_2 = a_1;
    // Call f2_two_cond() begin
    TMP_1 = a_2 ? er_b[i + 1] : er_b[i + 1];
    // Call f2_two_cond() end
    t5 = a_1;
end

//------------------------------------------------------------------------------
// Method process: rec_arr_elem_func_param_ref3 (test_array_fcall_method.cpp:190:5) 

always_comb 
begin : rec_arr_elem_func_param_ref3     // test_array_fcall_method.cpp:190:5
    logic signed [1:0] err_a[3];
    logic [3:0] err_b[3];
    logic signed [1:0] frr_a;
    logic [3:0] frr_b;
    integer i;
    integer TMP_0;
    logic [3:0] par;
    integer TMP_1;
    integer k;
    frr_a = '0;
    frr_b = '0;
    i = s;
    par = err_b[i];
    // Call f3_val() begin
    TMP_0 = par + 1'd1;
    // Call f3_val() end
    frr_a = TMP_0;
    // Call f3_ref() begin
    err_b[i + 1]++;
    TMP_1 = err_b[i + 1];
    // Call f3_ref() end
    frr_a = TMP_1;
    // Call f2_two() begin
    k = err_b[i] + err_b[frr_a];
    t4 = k;
    // Call f2_two() end
    t6 = err_a[frr_a];
end

//------------------------------------------------------------------------------
// Method process: arr_elem_in_index (test_array_fcall_method.cpp:206:5) 

always_comb 
begin : arr_elem_in_index     // test_array_fcall_method.cpp:206:5
    integer i;
    integer irr[3];
    i = s;
    irr[irr[1]] = 1;
    irr[irr[i]] = irr[i + 1];
    srr[srr[1]] = 1;
    srr[srr[i]] = srr[srr[i + 1] + 1];
    spp[spp[1]] = 1;
    spp[spp[1]] = 1;
    spp[spp[i]] = spp[i + spp[i + 1]];
end

endmodule


