//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.25
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a"
(
    input logic clk
);

// Variables generated for SystemC signals
logic [3:0] sig;
logic signed [31:0] t1;
logic signed [31:0] t0;
logic signed [31:0] t3;
logic signed [31:0] t2;

//------------------------------------------------------------------------------
// Method process: member_fcall_ref (test_member_array_method1.cpp:95:5) 

// Process-local variables
logic [3:0] harr_b[2][3];

always_comb 
begin : member_fcall_ref     // test_member_array_method1.cpp:95:5
    // Call rec_param_ref() begin
    harr_b[1][2] = 3;
    // Call rec_param_ref() end
    harr_b[1][2] = 3;
end

//------------------------------------------------------------------------------
// Method process: loc_array_decl (test_member_array_method1.cpp:73:5) 

always_comb 
begin : loc_array_decl     // test_member_array_method1.cpp:73:5
    logic xarr_a[2][3];
    logic [3:0] xarr_b[2][3];
    xarr_b[1][2] = '0;
end

//------------------------------------------------------------------------------
// Method process: loc_array_init (test_member_array_method1.cpp:80:5) 

always_comb 
begin : loc_array_init     // test_member_array_method1.cpp:80:5
    logic z_a;
    logic [3:0] z_b;
    logic x_a[3];
    logic [3:0] x_b[3];
    logic xarr_a[2][3];
    logic [3:0] xarr_b[2][3];
    z_b = '0;
    x_b[0] = 0; x_b[1] = 0; x_b[2] = 0;
end

//------------------------------------------------------------------------------
// Method process: simple_access (test_member_array_method1.cpp:107:5) 

// Process-local variables
logic s_a[3];
logic [3:0] s_b[3];

always_comb 
begin : simple_access     // test_member_array_method1.cpp:107:5
    logic par;
    integer i_1;
    integer j;
    logic TMP_0;
    integer i_2;
    for (int i = 0; i < 3; ++i)
    begin
        par = 0; i_1 = i;
        // Call setA() begin
        s_a[i_1] = par;
        // Call setA() end
        s_b[i] = '0;
    end
    j = sig;
    i_2 = j + 2'sd1;
    // Call getA() begin
    TMP_0 = s_a[i_2];
    // Call getA() end
    s_b[j] = TMP_0 ? j : 0;
end

//------------------------------------------------------------------------------
// Method process: array_access (test_member_array_method1.cpp:123:5) 

// Process-local variables
logic arr_a[2][3];
logic [3:0] arr_b[2][3];

always_comb 
begin : array_access     // test_member_array_method1.cpp:123:5
    logic par;
    integer i_1;
    integer j_1;
    logic [3:0] l;
    logic TMP_0;
    integer i_2;
    for (int j = 0; j < 2; ++j)
    begin
        for (int i = 0; i < 3; ++i)
        begin
            par = 0; i_1 = i;
            // Call setA() begin
            arr_a[j][i_1] = par;
            // Call setA() end
            arr_b[j][i] = '0;
        end
    end
    j_1 = sig;
    l = arr_b[j_1][j_1 + 1];
    i_2 = j_1 + 2'sd1;
    // Call getA() begin
    TMP_0 = arr_a[j_1][i_2];
    // Call getA() end
    arr_b[j_1][j_1 + 1] = TMP_0 ? j_1 : 0;
    t1 = l + j_1;
end

//------------------------------------------------------------------------------
// Method process: loc_array_access (test_member_array_method1.cpp:142:5) 

always_comb 
begin : loc_array_access     // test_member_array_method1.cpp:142:5
    logic x_a[3];
    logic [3:0] x_b[3];
    logic xarr_a[2][3];
    logic [3:0] xarr_b[2][3];
    integer j_1;
    logic [63:0] l;
    logic xarr_par;
    integer xarr_i;
    x_b[0] = 0; x_b[1] = 0; x_b[2] = 0;
    for (int i = 0; i < 3; ++i)
    begin
        x_b[i] = i;
    end
    for (int j = 0; j < 2; ++j)
    begin
        for (int k = 0; k < 3; ++k)
        begin
            xarr_b[j][k] = '0;
        end
    end
    j_1 = sig;
    l = x_b[j_1] + xarr_b[j_1 + 1][j_1 + 2];
    t0 = l;
    x_b[j_1] = 1;
    xarr_b[j_1 + 1][j_1 + 2] = 2;
    xarr_par = 0; xarr_i = 1;
    // Call setA() begin
    xarr_a[j_1][xarr_i] = xarr_par;
    // Call setA() end
end

//------------------------------------------------------------------------------
// Method process: local_fcall_param (test_member_array_method1.cpp:196:5) 

always_comb 
begin : local_fcall_param     // test_member_array_method1.cpp:196:5
    logic yy_a[3];
    logic [3:0] yy_b[3];
    logic y_a_1[3];
    logic [3:0] y_b_1[3];
    logic yarr_a_1[2][3];
    logic [3:0] yarr_b_1[2][3];
    logic par_a[3];
    logic [3:0] par_b[3];
    integer j;
    logic TMP_0;
    integer par_i;
    integer i;
    integer k;
    logic TMP_1;
    integer y_i;
    integer j_1;
    logic par_a_1[3];
    logic [3:0] par_b_1[3];
    logic [3:0] l;
    integer yarr_i;
    y_b_1[0] = 0; y_b_1[1] = 0; y_b_1[2] = 0;
    par_a = y_a_1; par_b = y_b_1; j = 0;
    // Call rec_param2_val() begin
    par_i = j;
    // Call getA() begin
    TMP_0 = par_a[par_i];
    // Call getA() end
    par_b[j] = TMP_0 ? 1 : 2;
    // Call rec_param2_val() end
    i = 1;
    // Call rec_param1() begin
    yy_b[i] = yy_a[i] ? 1 : 2;
    // Call rec_param1() end
    k = 1;
    // Call rec_param2_ref() begin
    y_i = k;
    // Call getA() begin
    TMP_1 = y_a_1[y_i];
    // Call getA() end
    y_b_1[k] = TMP_1 ? 1 : 2;
    // Call rec_param2_ref() end
    j_1 = sig;
    t2 = j_1;
    par_a_1 = yarr_a_1[j_1]; par_b_1 = yarr_b_1[j_1];
    // Call rec_param0() begin
    l = par_b_1[0];
    t3 = l;
    // Call rec_param0() end
    par_a = yarr_a_1[j_1]; par_b = yarr_b_1[j_1]; j = 0;
    // Call rec_param2_val() begin
    par_i = j;
    // Call getA() begin
    TMP_0 = par_a[par_i];
    // Call getA() end
    par_b[j] = TMP_0 ? 1 : 2;
    // Call rec_param2_val() end
    k = 1;
    // Call rec_param2_ref() begin
    yarr_i = k;
    // Call getA() begin
    TMP_1 = yarr_a_1[j_1][yarr_i];
    // Call getA() end
    yarr_b_1[j_1][k] = TMP_1 ? 1 : 2;
    // Call rec_param2_ref() end
end

//------------------------------------------------------------------------------
// Method process: fcall_param (test_member_array_method1.cpp:219:5) 

// Process-local variables
logic rr_a[3];
logic [3:0] rr_b[3];
logic [3:0] r_b[3];
logic [3:0] rarr_b[2][3];
logic r_a[3];
logic rarr_a[2][3];

always_comb 
begin : fcall_param     // test_member_array_method1.cpp:219:5
    logic par_a[3];
    logic [3:0] par_b[3];
    integer j;
    logic TMP_0;
    integer par_i;
    integer i;
    integer k;
    logic TMP_1;
    integer i_1;
    integer j_1;
    logic par_a_1[3];
    logic [3:0] par_b_1[3];
    logic [3:0] l;
    integer i_2;
    rr_a[0] = '0;
    rr_a[1] = '0;
    rr_a[2] = '0;
    par_a = r_a; par_b = r_b; j = 0;
    // Call rec_param2_val() begin
    par_i = j;
    // Call getA() begin
    TMP_0 = par_a[par_i];
    // Call getA() end
    par_b[j] = TMP_0 ? 1 : 2;
    // Call rec_param2_val() end
    i = 1;
    // Call rec_param1() begin
    rr_b[i] = 2;
    // Call rec_param1() end
    k = 1;
    // Call rec_param2_ref() begin
    i_1 = k;
    // Call getA() begin
    TMP_1 = r_a[i_1];
    // Call getA() end
    r_b[k] = TMP_1 ? 1 : 2;
    // Call rec_param2_ref() end
    j_1 = sig;
    par_a_1 = rarr_a[j_1]; par_b_1 = rarr_b[j_1];
    // Call rec_param0() begin
    l = par_b_1[0];
    t3 = l;
    // Call rec_param0() end
    par_a = rarr_a[j_1]; par_b = rarr_b[j_1]; j = 0;
    // Call rec_param2_val() begin
    par_i = j;
    // Call getA() begin
    TMP_0 = par_a[par_i];
    // Call getA() end
    par_b[j] = TMP_0 ? 1 : 2;
    // Call rec_param2_val() end
    k = 1;
    // Call rec_param2_ref() begin
    i_2 = k;
    // Call getA() begin
    TMP_1 = rarr_a[j_1][i_2];
    // Call getA() end
    rarr_b[j_1][k] = TMP_1 ? 1 : 2;
    // Call rec_param2_ref() end
end

//------------------------------------------------------------------------------
// Method process: local_fcall_return (test_member_array_method1.cpp:248:5) 

always_comb 
begin : local_fcall_return     // test_member_array_method1.cpp:248:5
    logic z_a[3];
    logic [3:0] z_b[3];
    logic zarr_a[2][3];
    logic [3:0] zarr_b[2][3];
    logic par_a[3];
    logic [3:0] par_b[3];
    logic TMP_0_a[3];
    logic [3:0] TMP_0_b[3];
    logic lrec_a[3];
    logic [3:0] lrec_b[3];
    logic par_a_1[3];
    logic [3:0] par_b_1[3];
    logic res_a[3];
    logic [3:0] res_b[3];
    logic TMP_2_a[3];
    logic [3:0] TMP_2_b[3];
    logic llrec_a[3];
    logic [3:0] llrec_b[3];
    integer j;
    logic TMP_4_a[3];
    logic [3:0] TMP_4_b[3];
    logic lllrec_a[3];
    logic [3:0] lllrec_b[3];
    z_b[0] = 0; z_b[1] = 0; z_b[2] = 0;
    par_a = z_a; par_b = z_b;
    // Call rec_return1() begin
    TMP_0_a = par_a; TMP_0_b = par_b;
    // Call rec_return1() end
    lrec_a = TMP_0_a; lrec_b = TMP_0_b;
    par_a_1 = z_a; par_b_1 = z_b;
    // Call rec_return2() begin
    res_a = par_a_1; res_b = par_b_1;
    TMP_2_a = res_a; TMP_2_b = res_b;
    // Call rec_return2() end
    llrec_a = TMP_2_a; llrec_b = TMP_2_b;
    j = sig;
    par_a_1 = zarr_a[j]; par_b_1 = zarr_b[j];
    // Call rec_return2() begin
    res_a = par_a_1; res_b = par_b_1;
    TMP_4_a = res_a; TMP_4_b = res_b;
    // Call rec_return2() end
    lllrec_a = TMP_4_a; lllrec_b = TMP_4_b;
end

//------------------------------------------------------------------------------
// Method process: fcall_return (test_member_array_method1.cpp:264:5) 

// Process-local variables
logic y_a[3];
logic [3:0] y_b[3];
logic yarr_a[2][3];
logic [3:0] yarr_b[2][3];

always_comb 
begin : fcall_return     // test_member_array_method1.cpp:264:5
    logic par_a[3];
    logic [3:0] par_b[3];
    logic TMP_0_a[3];
    logic [3:0] TMP_0_b[3];
    logic lrec_a[3];
    logic [3:0] lrec_b[3];
    logic par_a_1[3];
    logic [3:0] par_b_1[3];
    logic res_a[3];
    logic [3:0] res_b[3];
    logic TMP_2_a[3];
    logic [3:0] TMP_2_b[3];
    logic llrec_a[3];
    logic [3:0] llrec_b[3];
    integer j;
    logic TMP_4_a[3];
    logic [3:0] TMP_4_b[3];
    logic lllrec_a[3];
    logic [3:0] lllrec_b[3];
    par_a = y_a; par_b = y_b;
    // Call rec_return1() begin
    TMP_0_a = par_a; TMP_0_b = par_b;
    // Call rec_return1() end
    lrec_a = TMP_0_a; lrec_b = TMP_0_b;
    par_a_1 = y_a; par_b_1 = y_b;
    // Call rec_return2() begin
    res_a = par_a_1; res_b = par_b_1;
    TMP_2_a = res_a; TMP_2_b = res_b;
    // Call rec_return2() end
    llrec_a = TMP_2_a; llrec_b = TMP_2_b;
    j = sig;
    par_a_1 = yarr_a[j]; par_b_1 = yarr_b[j];
    // Call rec_return2() begin
    res_a = par_a_1; res_b = par_b_1;
    TMP_4_a = res_a; TMP_4_b = res_b;
    // Call rec_return2() end
    lllrec_a = TMP_4_a; lllrec_b = TMP_4_b;
end

endmodule


