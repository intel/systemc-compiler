//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.14
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: A ()
//
module A // "a"
(
    input logic clk
);

// Variables generated for SystemC signals
logic rstn;
logic signed [31:0] s;
logic signed [31:0] t2;
logic signed [31:0] t3;
logic signed [31:0] t0;

//------------------------------------------------------------------------------
// Clocked THREAD: record_arr_comb (test_reg_arr_cthread.cpp:51:5) 

// Thread-local variables
logic signed [31:0] t2_next;

// Next-state combinational logic
always_comb begin : record_arr_comb_comb     // test_reg_arr_cthread.cpp:51:5
    record_arr_comb_func;
end
function void record_arr_comb_func;
    integer uu[2];
    integer l_sin;
    integer l_cos;
    logic [64:0] l_m;
    integer ll_sin[2];
    integer ll_cos[2];
    logic [64:0] ll_m[2];
    logic TMP_0;
    logic TMP_1;
    t2_next = t2;
    l_m = 0;
    t2_next = uu[s];
    t2_next = l_sin;
    t2_next = ll_sin[s];
    t2_next = 32'(ll_m[s]);
    // Call isBwdUser() begin
    // Call type() begin
    TMP_1 = ll_m[s][42];
    // Call type() end
    TMP_0 = TMP_1;
    // Call isBwdUser() end
    if (TMP_0)
    begin
        t2_next = 1;
    end
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : record_arr_comb_ff
    if ( ~rstn ) begin
        t2 <= 0;
    end
    else begin
        t2 <= t2_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: record_arr_reg1 (test_reg_arr_cthread.cpp:72:5) 

// Thread-local variables
logic signed [31:0] t3_next;
logic signed [31:0] nn_sin[2];
logic signed [31:0] nn_sin_next[2];
logic record_arr_reg1_PROC_STATE;
logic record_arr_reg1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : record_arr_reg1_comb     // test_reg_arr_cthread.cpp:72:5
    record_arr_reg1_func;
end
function void record_arr_reg1_func;
    integer nn_cos[2];
    logic [64:0] nn_m[2];
    nn_sin_next = nn_sin;
    t3_next = t3;
    record_arr_reg1_PROC_STATE_next = record_arr_reg1_PROC_STATE;
    
    case (record_arr_reg1_PROC_STATE)
        0: begin
            record_arr_reg1_PROC_STATE_next = 1; return;    // test_reg_arr_cthread.cpp:78:13;
        end
        1: begin
            t3_next = nn_sin_next[s];
            record_arr_reg1_PROC_STATE_next = 1; return;    // test_reg_arr_cthread.cpp:78:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : record_arr_reg1_ff
    if ( ~rstn ) begin
        t3 <= 0;
        record_arr_reg1_PROC_STATE <= 0;    // test_reg_arr_cthread.cpp:74:9;
    end
    else begin
        t3 <= t3_next;
        nn_sin <= nn_sin_next;
        record_arr_reg1_PROC_STATE <= record_arr_reg1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: record_arr_reg2 (test_reg_arr_cthread.cpp:84:5) 

// Thread-local variables
logic record_arr_reg2_PROC_STATE;
logic record_arr_reg2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : record_arr_reg2_comb     // test_reg_arr_cthread.cpp:84:5
    record_arr_reg2_func;
end
function void record_arr_reg2_func;
    integer r_sin[2];
    integer r_cos[2];
    logic [64:0] r_m[2];
    record_arr_reg2_PROC_STATE_next = record_arr_reg2_PROC_STATE;
    
    case (record_arr_reg2_PROC_STATE)
        0: begin
            record_arr_reg2_PROC_STATE_next = 1; return;    // test_reg_arr_cthread.cpp:92:13;
        end
        1: begin
            r_sin[1] = 3;
            record_arr_reg2_PROC_STATE_next = 1; return;    // test_reg_arr_cthread.cpp:92:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : record_arr_reg2_ff
    if ( ~rstn ) begin
        integer r_cos[2];
        logic [64:0] r_m[2];
        record_arr_reg2_PROC_STATE <= 0;    // test_reg_arr_cthread.cpp:87:9;
    end
    else begin
        record_arr_reg2_PROC_STATE <= record_arr_reg2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: record_arr_glob_reg (test_reg_arr_cthread.cpp:101:5) 

// Thread-local variables
logic signed [31:0] gra_sin[2];
logic signed [31:0] gra_sin_next[2];
logic signed [31:0] t0_next;
logic record_arr_glob_reg_PROC_STATE;
logic record_arr_glob_reg_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : record_arr_glob_reg_comb     // test_reg_arr_cthread.cpp:101:5
    record_arr_glob_reg_func;
end
function void record_arr_glob_reg_func;
    integer b;
    gra_sin_next = gra_sin;
    t0_next = t0;
    record_arr_glob_reg_PROC_STATE_next = record_arr_glob_reg_PROC_STATE;
    
    case (record_arr_glob_reg_PROC_STATE)
        0: begin
            gra_sin_next[0] = 1;
            record_arr_glob_reg_PROC_STATE_next = 1; return;    // test_reg_arr_cthread.cpp:106:13;
        end
        1: begin
            b = gra_sin_next[0];
            t0_next = b;
            gra_sin_next[0] = 1;
            record_arr_glob_reg_PROC_STATE_next = 1; return;    // test_reg_arr_cthread.cpp:106:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : record_arr_glob_reg_ff
    if ( ~rstn ) begin
        record_arr_glob_reg_PROC_STATE <= 0;    // test_reg_arr_cthread.cpp:102:9;
    end
    else begin
        gra_sin <= gra_sin_next;
        t0 <= t0_next;
        record_arr_glob_reg_PROC_STATE <= record_arr_glob_reg_PROC_STATE_next;
    end
end

endmodule


