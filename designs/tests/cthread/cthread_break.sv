//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.17
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
    input logic clk
);

// Variables generated for SystemC signals
logic arst;
logic signed [31:0] in;
logic signed [31:0] a;
logic signed [31:0] b;

//------------------------------------------------------------------------------
// Clocked THREAD: code_after_break (test_break.cpp:82:5) 

// Thread-local variables
logic [1:0] code_after_break_PROC_STATE;
logic [1:0] code_after_break_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : code_after_break_comb     // test_break.cpp:82:5
    code_after_break_func;
end
function void code_after_break_func;
    integer k;
    code_after_break_PROC_STATE_next = code_after_break_PROC_STATE;
    
    case (code_after_break_PROC_STATE)
        0: begin
            if (|a || |b)
            begin
                if (|b)
                begin
                    k = 1;
                    // break begin
                    k = 4;
                    code_after_break_PROC_STATE_next = 0; return;    // test_break.cpp:99:13;
                    // break end
                end
                code_after_break_PROC_STATE_next = 1; return;    // test_break.cpp:95:17;
            end
            k = 4;
            code_after_break_PROC_STATE_next = 0; return;    // test_break.cpp:99:13;
        end
        1: begin
            k = 3;
            if (|a || |b)
            begin
                if (|b)
                begin
                    k = 1;
                    // break begin
                    k = 4;
                    code_after_break_PROC_STATE_next = 0; return;    // test_break.cpp:99:13;
                    // break end
                end
                code_after_break_PROC_STATE_next = 1; return;    // test_break.cpp:95:17;
            end
            k = 4;
            code_after_break_PROC_STATE_next = 0; return;    // test_break.cpp:99:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : code_after_break_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        code_after_break_PROC_STATE <= 0;    // test_break.cpp:85:9;
    end
    else begin
        code_after_break_PROC_STATE <= code_after_break_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Method process: break_level_meth (test_break.cpp:103:5) 

always_comb 
begin : break_level_meth     // test_break.cpp:103:5
    integer k;
    k = 0;
    for (integer i = 0; i < 4; i++)
    begin
        if (|a)
        begin
        end else begin
            break;
        end
        k = 1;
    end
    k = 2;
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_level (test_break.cpp:119:5) 

// Next-state combinational logic
always_comb begin : break_level_comb     // test_break.cpp:119:5
    break_level_func;
end
function void break_level_func;
    integer k;
    for (integer i = 0; i < 4; i++)
    begin
        if (|a)
        begin
        end else begin
            break;
        end
        k = 1;
    end
    k = 2;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_level_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_for_wait0 (test_break.cpp:140:5) 

// Thread-local variables
logic signed [31:0] i0;
logic signed [31:0] i_next;
logic [1:0] break_in_for_wait0_PROC_STATE;
logic [1:0] break_in_for_wait0_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_for_wait0_comb     // test_break.cpp:140:5
    break_in_for_wait0_func;
end
function void break_in_for_wait0_func;
    integer k;
    i_next = i0;
    break_in_for_wait0_PROC_STATE_next = break_in_for_wait0_PROC_STATE;
    
    case (break_in_for_wait0_PROC_STATE)
        0: begin
            i_next = 0;
            if (in > 1)
            begin
                // break begin
                k = 1;
                break_in_for_wait0_PROC_STATE_next = 0; return;    // test_break.cpp:157:13;
                // break end
            end
            k = 2;
            break_in_for_wait0_PROC_STATE_next = 1; return;    // test_break.cpp:153:17;
        end
        1: begin
            i_next++;
            if (i_next < 3)
            begin
                if (in > 1)
                begin
                    // break begin
                    k = 1;
                    break_in_for_wait0_PROC_STATE_next = 0; return;    // test_break.cpp:157:13;
                    // break end
                end
                k = 2;
                break_in_for_wait0_PROC_STATE_next = 1; return;    // test_break.cpp:153:17;
            end
            k = 1;
            break_in_for_wait0_PROC_STATE_next = 0; return;    // test_break.cpp:157:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_for_wait0_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_for_wait0_PROC_STATE <= 0;    // test_break.cpp:143:9;
    end
    else begin
        i0 <= i_next;
        break_in_for_wait0_PROC_STATE <= break_in_for_wait0_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_for_wait1 (test_break.cpp:162:5) 

// Thread-local variables
logic signed [31:0] i1;
logic signed [31:0] i_next0;
logic [1:0] break_in_for_wait1_PROC_STATE;
logic [1:0] break_in_for_wait1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_for_wait1_comb     // test_break.cpp:162:5
    break_in_for_wait1_func;
end
function void break_in_for_wait1_func;
    integer k;
    i_next0 = i1;
    break_in_for_wait1_PROC_STATE_next = break_in_for_wait1_PROC_STATE;
    
    case (break_in_for_wait1_PROC_STATE)
        0: begin
            i_next0 = 0;
            k = 2;
            break_in_for_wait1_PROC_STATE_next = 1; return;    // test_break.cpp:171:17;
        end
        1: begin
            if (in > 1)
            begin
                // break begin
                k = 1;
                break_in_for_wait1_PROC_STATE_next = 0; return;    // test_break.cpp:181:13;
                // break end
            end
            i_next0++;
            if (i_next0 < 3)
            begin
                k = 2;
                break_in_for_wait1_PROC_STATE_next = 1; return;    // test_break.cpp:171:17;
            end
            k = 1;
            break_in_for_wait1_PROC_STATE_next = 0; return;    // test_break.cpp:181:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_for_wait1_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_for_wait1_PROC_STATE <= 0;    // test_break.cpp:165:9;
    end
    else begin
        i1 <= i_next0;
        break_in_for_wait1_PROC_STATE <= break_in_for_wait1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_for_wait2 (test_break.cpp:187:5) 

// Thread-local variables
logic signed [31:0] i2;
logic signed [31:0] i_next1;
logic [1:0] break_in_for_wait2_PROC_STATE;
logic [1:0] break_in_for_wait2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_for_wait2_comb     // test_break.cpp:187:5
    break_in_for_wait2_func;
end
function void break_in_for_wait2_func;
    integer k;
    i_next1 = i2;
    break_in_for_wait2_PROC_STATE_next = break_in_for_wait2_PROC_STATE;
    
    case (break_in_for_wait2_PROC_STATE)
        0: begin
            i_next1 = 0;
            if (in > 1)
            begin
                k = 1;
                break_in_for_wait2_PROC_STATE_next = 1; return;    // test_break.cpp:198:21;
            end
            k = 3;
            break_in_for_wait2_PROC_STATE_next = 2; return;    // test_break.cpp:204:17;
        end
        1: begin
            // break begin
            k = 2;
            break_in_for_wait2_PROC_STATE_next = 0; return;    // test_break.cpp:208:13;
            // break end
        end
        2: begin
            i_next1++;
            if (i_next1 < 3)
            begin
                if (in > 1)
                begin
                    k = 1;
                    break_in_for_wait2_PROC_STATE_next = 1; return;    // test_break.cpp:198:21;
                end
                k = 3;
                break_in_for_wait2_PROC_STATE_next = 2; return;    // test_break.cpp:204:17;
            end
            k = 2;
            break_in_for_wait2_PROC_STATE_next = 0; return;    // test_break.cpp:208:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_for_wait2_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_for_wait2_PROC_STATE <= 0;    // test_break.cpp:190:9;
    end
    else begin
        i2 <= i_next1;
        break_in_for_wait2_PROC_STATE <= break_in_for_wait2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_for_wait3 (test_break.cpp:213:5) 

// Thread-local variables
logic signed [31:0] j;
logic signed [31:0] j_next;
logic signed [31:0] i3;
logic signed [31:0] i_next2;
logic [1:0] break_in_for_wait3_PROC_STATE;
logic [1:0] break_in_for_wait3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_for_wait3_comb     // test_break.cpp:213:5
    break_in_for_wait3_func;
end
function void break_in_for_wait3_func;
    integer k;
    i_next2 = i3;
    j_next = j;
    break_in_for_wait3_PROC_STATE_next = break_in_for_wait3_PROC_STATE;
    
    case (break_in_for_wait3_PROC_STATE)
        0: begin
            i_next2 = 0;
            if (in > 1)
            begin
                j_next = 0;
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 2;
                    break_in_for_wait3_PROC_STATE_next = 2; return;    // test_break.cpp:238:21;
                    // break end
                end
                k = 3;
                break_in_for_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:233:25;
            end
            k = 4;
            break_in_for_wait3_PROC_STATE_next = 3; return;    // test_break.cpp:244:17;
        end
        1: begin
            j_next++;
            if (j_next < 3)
            begin
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 2;
                    break_in_for_wait3_PROC_STATE_next = 2; return;    // test_break.cpp:238:21;
                    // break end
                end
                k = 3;
                break_in_for_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:233:25;
            end
            k = 2;
            break_in_for_wait3_PROC_STATE_next = 2; return;    // test_break.cpp:238:21;
        end
        2: begin
            // break begin
            i_next2 = 0;
            if (in > 1)
            begin
                j_next = 0;
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 2;
                    break_in_for_wait3_PROC_STATE_next = 2; return;    // test_break.cpp:238:21;
                    // break end
                end
                k = 3;
                break_in_for_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:233:25;
            end
            k = 4;
            break_in_for_wait3_PROC_STATE_next = 3; return;    // test_break.cpp:244:17;
            // break end
        end
        3: begin
            i_next2++;
            if (i_next2 < 3)
            begin
                if (in > 1)
                begin
                    j_next = 0;
                    if (in > 2)
                    begin
                        k = 1;
                        // break begin
                        k = 2;
                        break_in_for_wait3_PROC_STATE_next = 2; return;    // test_break.cpp:238:21;
                        // break end
                    end
                    k = 3;
                    break_in_for_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:233:25;
                end
                k = 4;
                break_in_for_wait3_PROC_STATE_next = 3; return;    // test_break.cpp:244:17;
            end
            i_next2 = 0;
            if (in > 1)
            begin
                j_next = 0;
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 2;
                    break_in_for_wait3_PROC_STATE_next = 2; return;    // test_break.cpp:238:21;
                    // break end
                end
                k = 3;
                break_in_for_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:233:25;
            end
            k = 4;
            break_in_for_wait3_PROC_STATE_next = 3; return;    // test_break.cpp:244:17;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_for_wait3_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_for_wait3_PROC_STATE <= 0;    // test_break.cpp:216:9;
    end
    else begin
        j <= j_next;
        i3 <= i_next2;
        break_in_for_wait3_PROC_STATE <= break_in_for_wait3_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_for_wait4 (test_break.cpp:250:5) 

// Thread-local variables
logic signed [31:0] j0;
logic signed [31:0] j_next0;
logic signed [31:0] i4;
logic signed [31:0] i_next3;
logic [1:0] break_in_for_wait4_PROC_STATE;
logic [1:0] break_in_for_wait4_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_for_wait4_comb     // test_break.cpp:250:5
    break_in_for_wait4_func;
end
function void break_in_for_wait4_func;
    integer k;
    i_next3 = i4;
    j_next0 = j0;
    break_in_for_wait4_PROC_STATE_next = break_in_for_wait4_PROC_STATE;
    
    case (break_in_for_wait4_PROC_STATE)
        0: begin
            i_next3 = 0;
            if (in > 1)
            begin
                j_next0 = 0;
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 5;
                    // break begin
                    k = 4;
                    break_in_for_wait4_PROC_STATE_next = 0; return;    // test_break.cpp:285:13;
                    // break end
                    // break end
                end
                k = 2;
                break_in_for_wait4_PROC_STATE_next = 1; return;    // test_break.cpp:271:25;
            end
            k = 3;
            break_in_for_wait4_PROC_STATE_next = 2; return;    // test_break.cpp:280:17;
        end
        1: begin
            j_next0++;
            if (j_next0 < 3)
            begin
                if (in > 2)
                begin
                    k = 1;
                    // break begin
                    k = 5;
                    // break begin
                    k = 4;
                    break_in_for_wait4_PROC_STATE_next = 0; return;    // test_break.cpp:285:13;
                    // break end
                    // break end
                end
                k = 2;
                break_in_for_wait4_PROC_STATE_next = 1; return;    // test_break.cpp:271:25;
            end
            k = 5;
            // break begin
            k = 4;
            break_in_for_wait4_PROC_STATE_next = 0; return;    // test_break.cpp:285:13;
            // break end
        end
        2: begin
            i_next3++;
            if (i_next3 < 3)
            begin
                if (in > 1)
                begin
                    j_next0 = 0;
                    if (in > 2)
                    begin
                        k = 1;
                        // break begin
                        k = 5;
                        // break begin
                        k = 4;
                        break_in_for_wait4_PROC_STATE_next = 0; return;    // test_break.cpp:285:13;
                        // break end
                        // break end
                    end
                    k = 2;
                    break_in_for_wait4_PROC_STATE_next = 1; return;    // test_break.cpp:271:25;
                end
                k = 3;
                break_in_for_wait4_PROC_STATE_next = 2; return;    // test_break.cpp:280:17;
            end
            k = 4;
            break_in_for_wait4_PROC_STATE_next = 0; return;    // test_break.cpp:285:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_for_wait4_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_for_wait4_PROC_STATE <= 0;    // test_break.cpp:253:9;
    end
    else begin
        j0 <= j_next0;
        i4 <= i_next3;
        break_in_for_wait4_PROC_STATE <= break_in_for_wait4_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_exit1 (test_break.cpp:292:5) 

// Thread-local variables
logic signed [31:0] k0;
logic signed [31:0] k_next;
logic break_exit1_PROC_STATE;
logic break_exit1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_exit1_comb     // test_break.cpp:292:5
    break_exit1_func;
end
function void break_exit1_func;
    k_next = k0;
    break_exit1_PROC_STATE_next = break_exit1_PROC_STATE;
    
    case (break_exit1_PROC_STATE)
        0: begin
            break_exit1_PROC_STATE_next = 1; return;    // test_break.cpp:298:17;
        end
        1: begin
            if (|a)
            begin
                // break begin
                k_next = 1;
                break_exit1_PROC_STATE_next = 1; return;    // test_break.cpp:298:17;
                // break end
            end
            k_next = k_next + 1;
            break_exit1_PROC_STATE_next = 1; return;    // test_break.cpp:298:17;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_exit1_ff
    if ( ~arst ) begin
        k0 <= 0;
        break_exit1_PROC_STATE <= 0;    // test_break.cpp:294:9;
    end
    else begin
        k0 <= k_next;
        break_exit1_PROC_STATE <= break_exit1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_exit2 (test_break.cpp:312:5) 

// Thread-local variables
logic signed [31:0] k1;
logic signed [31:0] k_next0;
logic [1:0] break_exit2_PROC_STATE;
logic [1:0] break_exit2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_exit2_comb     // test_break.cpp:312:5
    break_exit2_func;
end
function void break_exit2_func;
    k_next0 = k1;
    break_exit2_PROC_STATE_next = break_exit2_PROC_STATE;
    
    case (break_exit2_PROC_STATE)
        0: begin
            break_exit2_PROC_STATE_next = 1; return;    // test_break.cpp:318:17;
        end
        1: begin
            if (|a)
            begin
            end else begin
                // break begin
                break_exit2_PROC_STATE_next = 2; return;    // test_break.cpp:328:13;
                // break end
            end
            k_next0 = k_next0 + 1;
            break_exit2_PROC_STATE_next = 1; return;    // test_break.cpp:318:17;
        end
        2: begin
            k_next0 = 1;
            break_exit2_PROC_STATE_next = 1; return;    // test_break.cpp:318:17;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_exit2_ff
    if ( ~arst ) begin
        k1 <= 0;
        break_exit2_PROC_STATE <= 0;    // test_break.cpp:314:9;
    end
    else begin
        k1 <= k_next0;
        break_exit2_PROC_STATE <= break_exit2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_exit2a (test_break.cpp:334:5) 

// Thread-local variables
logic [1:0] break_exit2a_PROC_STATE;
logic [1:0] break_exit2a_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_exit2a_comb     // test_break.cpp:334:5
    break_exit2a_func;
end
function void break_exit2a_func;
    integer k;
    break_exit2a_PROC_STATE_next = break_exit2a_PROC_STATE;
    
    case (break_exit2a_PROC_STATE)
        0: begin
            break_exit2a_PROC_STATE_next = 1; return;    // test_break.cpp:340:17;
        end
        1: begin
            if (|a)
            begin
            end else begin
                if (|b)
                begin
                    // break begin
                    break_exit2a_PROC_STATE_next = 2; return;    // test_break.cpp:349:13;
                    // break end
                end
                k = 1;
            end
            k = 2;
            break_exit2a_PROC_STATE_next = 1; return;    // test_break.cpp:340:17;
        end
        2: begin
            k = 3;
            break_exit2a_PROC_STATE_next = 1; return;    // test_break.cpp:340:17;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_exit2a_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_exit2a_PROC_STATE <= 0;    // test_break.cpp:336:9;
    end
    else begin
        break_exit2a_PROC_STATE <= break_exit2a_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_exit3 (test_break.cpp:356:5) 

// Thread-local variables
logic signed [31:0] k2;
logic signed [31:0] k_next1;
logic [1:0] break_exit3_PROC_STATE;
logic [1:0] break_exit3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_exit3_comb     // test_break.cpp:356:5
    break_exit3_func;
end
function void break_exit3_func;
    k_next1 = k2;
    break_exit3_PROC_STATE_next = break_exit3_PROC_STATE;
    
    case (break_exit3_PROC_STATE)
        0: begin
            if (|a)
            begin
                k_next1 = 1;
            end else begin
                // break begin
                break_exit3_PROC_STATE_next = 2; return;    // test_break.cpp:379:13;
                // break end
            end
            break_exit3_PROC_STATE_next = 1; return;    // test_break.cpp:369:17;
        end
        1: begin
            k_next1 = k_next1 + 1;
            if (|b)
            begin
                k_next1 = 2;
            end
            if (|a)
            begin
                k_next1 = 1;
            end else begin
                // break begin
                break_exit3_PROC_STATE_next = 2; return;    // test_break.cpp:379:13;
                // break end
            end
            break_exit3_PROC_STATE_next = 1; return;    // test_break.cpp:369:17;
        end
        2: begin
            k_next1 = 1;
            if (|a)
            begin
                k_next1 = 1;
            end else begin
                // break begin
                break_exit3_PROC_STATE_next = 2; return;    // test_break.cpp:379:13;
                // break end
            end
            break_exit3_PROC_STATE_next = 1; return;    // test_break.cpp:369:17;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_exit3_ff
    if ( ~arst ) begin
        k2 <= 0;
        break_exit3_PROC_STATE <= 0;    // test_break.cpp:358:9;
    end
    else begin
        k2 <= k_next1;
        break_exit3_PROC_STATE <= break_exit3_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_exit4 (test_break.cpp:386:5) 

// Next-state combinational logic
always_comb begin : break_exit4_comb     // test_break.cpp:386:5
    break_exit4_func;
end
function void break_exit4_func;
    integer k;
    if (|a)
    begin
        k = 1;
    end else begin
        // break begin
        k = 3;
        // break end
    end
    if (|b)
    begin
        k = 2;
    end
    for (integer i = 0; i < 3; i++)
    begin
        if (|b)
        begin
            break;
        end
    end
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_exit4_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_exit4a (test_break.cpp:414:5) 

// Next-state combinational logic
always_comb begin : break_exit4a_comb     // test_break.cpp:414:5
    break_exit4a_func;
end
function void break_exit4a_func;
    integer k;
    if (|a)
    begin
        k = 1;
        // break begin
        k = 3;
        // break end
    end else begin
        if (|b)
        begin
            // break begin
            k = 3;
            // break end
        end
    end
    k = 2;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_exit4a_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_exit5 (test_break.cpp:437:5) 

// Thread-local variables
logic [1:0] break_exit5_PROC_STATE;
logic [1:0] break_exit5_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_exit5_comb     // test_break.cpp:437:5
    break_exit5_func;
end
function void break_exit5_func;
    integer k;
    break_exit5_PROC_STATE_next = break_exit5_PROC_STATE;
    
    case (break_exit5_PROC_STATE)
        0: begin
            k = 0;
            if (|a)
            begin
                k = 1;
            end else begin
                break_exit5_PROC_STATE_next = 1; return;    // test_break.cpp:448:21;
            end
            break_exit5_PROC_STATE_next = 2; return;    // test_break.cpp:453:17;
        end
        1: begin
            if (|b)
            begin
                // break begin
                break_exit5_PROC_STATE_next = 0; return;    // test_break.cpp:457:13;
                // break end
            end
            break_exit5_PROC_STATE_next = 2; return;    // test_break.cpp:453:17;
        end
        2: begin
            k = 2;
            if (|a)
            begin
                k = 1;
            end else begin
                break_exit5_PROC_STATE_next = 1; return;    // test_break.cpp:448:21;
            end
            break_exit5_PROC_STATE_next = 2; return;    // test_break.cpp:453:17;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_exit5_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_exit5_PROC_STATE <= 0;    // test_break.cpp:439:9;
    end
    else begin
        break_exit5_PROC_STATE <= break_exit5_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_while_wait1 (test_break.cpp:464:5) 

// Thread-local variables
logic signed [31:0] i5;
logic signed [31:0] i_next4;
logic [1:0] break_in_while_wait1_PROC_STATE;
logic [1:0] break_in_while_wait1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_while_wait1_comb     // test_break.cpp:464:5
    break_in_while_wait1_func;
end
function void break_in_while_wait1_func;
    integer k;
    i_next4 = i5;
    break_in_while_wait1_PROC_STATE_next = break_in_while_wait1_PROC_STATE;
    
    case (break_in_while_wait1_PROC_STATE)
        0: begin
            i_next4 = 0;
            k = 2;
            break_in_while_wait1_PROC_STATE_next = 1; return;    // test_break.cpp:474:17;
        end
        1: begin
            if (in > 1)
            begin
                // break begin
                k = 1;
                break_in_while_wait1_PROC_STATE_next = 0; return;    // test_break.cpp:482:13;
                // break end
            end
            i_next4++;
            if (i_next4 < 3)
            begin
                k = 2;
                break_in_while_wait1_PROC_STATE_next = 1; return;    // test_break.cpp:474:17;
            end
            k = 1;
            break_in_while_wait1_PROC_STATE_next = 0; return;    // test_break.cpp:482:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_while_wait1_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_while_wait1_PROC_STATE <= 0;    // test_break.cpp:467:9;
    end
    else begin
        i5 <= i_next4;
        break_in_while_wait1_PROC_STATE <= break_in_while_wait1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_while_wait2 (test_break.cpp:487:5) 

// Thread-local variables
logic signed [31:0] i6;
logic signed [31:0] i_next5;
logic [1:0] break_in_while_wait2_PROC_STATE;
logic [1:0] break_in_while_wait2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_while_wait2_comb     // test_break.cpp:487:5
    break_in_while_wait2_func;
end
function void break_in_while_wait2_func;
    integer k;
    integer j_1;
    i_next5 = i6;
    break_in_while_wait2_PROC_STATE_next = break_in_while_wait2_PROC_STATE;
    
    case (break_in_while_wait2_PROC_STATE)
        0: begin
            i_next5 = 0;
            k = 1;
            break_in_while_wait2_PROC_STATE_next = 1; return;    // test_break.cpp:496:17;
        end
        1: begin
            if (|a)
            begin
                j_1 = 0;
                while (j_1 < i_next5)
                begin
                    j_1++;
                    if (|b)
                    begin
                        break;
                    end
                end
                k = 2;
                if (|b)
                begin
                    // break begin
                    k = 3;
                    break_in_while_wait2_PROC_STATE_next = 0; return;    // test_break.cpp:512:13;
                    // break end
                end
                break_in_while_wait2_PROC_STATE_next = 2; return;    // test_break.cpp:506:21;
            end
            i_next5++;
            if (i_next5 < 3)
            begin
                k = 1;
                break_in_while_wait2_PROC_STATE_next = 1; return;    // test_break.cpp:496:17;
            end
            k = 3;
            break_in_while_wait2_PROC_STATE_next = 0; return;    // test_break.cpp:512:13;
        end
        2: begin
            i_next5++;
            if (i_next5 < 3)
            begin
                k = 1;
                break_in_while_wait2_PROC_STATE_next = 1; return;    // test_break.cpp:496:17;
            end
            k = 3;
            break_in_while_wait2_PROC_STATE_next = 0; return;    // test_break.cpp:512:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_while_wait2_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_while_wait2_PROC_STATE <= 0;    // test_break.cpp:490:9;
    end
    else begin
        i6 <= i_next5;
        break_in_while_wait2_PROC_STATE <= break_in_while_wait2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_while_wait3 (test_break.cpp:518:5) 

// Thread-local variables
logic signed [31:0] i7;
logic signed [31:0] i_next6;
logic break_in_while_wait3_PROC_STATE;
logic break_in_while_wait3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_while_wait3_comb     // test_break.cpp:518:5
    break_in_while_wait3_func;
end
function void break_in_while_wait3_func;
    integer k;
    integer j_1;
    i_next6 = i7;
    break_in_while_wait3_PROC_STATE_next = break_in_while_wait3_PROC_STATE;
    
    case (break_in_while_wait3_PROC_STATE)
        0: begin
            i_next6 = 0;
            k = 1;
            j_1 = 0;
            while (j_1 < i_next6)
            begin
                j_1++;
                if (|b)
                begin
                    break;
                end
            end
            break_in_while_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:533:17;
        end
        1: begin
            if (|a)
            begin
                k = 2;
                if (|b)
                begin
                    // break begin
                    k = 3;
                    i_next6 = 0;
                    k = 1;
                    j_1 = 0;
                    while (j_1 < i_next6)
                    begin
                        j_1++;
                        if (|b)
                        begin
                            break;
                        end
                    end
                    break_in_while_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:533:17;
                    // break end
                end
            end
            i_next6++;
            if (i_next6 < 3)
            begin
                k = 1;
                j_1 = 0;
                while (j_1 < i_next6)
                begin
                    j_1++;
                    if (|b)
                    begin
                        break;
                    end
                end
                break_in_while_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:533:17;
            end
            k = 3;
            i_next6 = 0;
            k = 1;
            j_1 = 0;
            while (j_1 < i_next6)
            begin
                j_1++;
                if (|b)
                begin
                    break;
                end
            end
            break_in_while_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:533:17;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_while_wait3_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_while_wait3_PROC_STATE <= 0;    // test_break.cpp:521:9;
    end
    else begin
        i7 <= i_next6;
        break_in_while_wait3_PROC_STATE <= break_in_while_wait3_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_while_wait4 (test_break.cpp:547:5) 

// Thread-local variables
logic [1:0] break_in_while_wait4_PROC_STATE;
logic [1:0] break_in_while_wait4_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_while_wait4_comb     // test_break.cpp:547:5
    break_in_while_wait4_func;
end
function void break_in_while_wait4_func;
    integer k;
    break_in_while_wait4_PROC_STATE_next = break_in_while_wait4_PROC_STATE;
    
    case (break_in_while_wait4_PROC_STATE)
        0: begin
            if (|a)
            begin
                k = 1;
                break_in_while_wait4_PROC_STATE_next = 1; return;    // test_break.cpp:556:17;
            end
            k = 3;
            break_in_while_wait4_PROC_STATE_next = 0; return;    // test_break.cpp:563:13;
        end
        1: begin
            if (|b)
            begin
                // break begin
                k = 3;
                break_in_while_wait4_PROC_STATE_next = 0; return;    // test_break.cpp:563:13;
                // break end
            end
            k = 2;
            if (|a)
            begin
                k = 1;
                break_in_while_wait4_PROC_STATE_next = 1; return;    // test_break.cpp:556:17;
            end
            k = 3;
            break_in_while_wait4_PROC_STATE_next = 0; return;    // test_break.cpp:563:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_while_wait4_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_while_wait4_PROC_STATE <= 0;    // test_break.cpp:550:9;
    end
    else begin
        break_in_while_wait4_PROC_STATE <= break_in_while_wait4_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_while_for (test_break.cpp:569:5) 

// Thread-local variables
logic signed [31:0] i8;
logic signed [31:0] i_next7;
logic [1:0] break_in_while_for_PROC_STATE;
logic [1:0] break_in_while_for_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_while_for_comb     // test_break.cpp:569:5
    break_in_while_for_func;
end
function void break_in_while_for_func;
    integer k;
    i_next7 = i8;
    break_in_while_for_PROC_STATE_next = break_in_while_for_PROC_STATE;
    
    case (break_in_while_for_PROC_STATE)
        0: begin
            if (|a || |b)
            begin
                if (|b)
                begin
                    k = 1;
                    i_next7 = 0;
                    break_in_while_for_PROC_STATE_next = 1; return;    // test_break.cpp:580:25;
                end
                break_in_while_for_PROC_STATE_next = 2; return;    // test_break.cpp:586:17;
            end
            k = 4;
            break_in_while_for_PROC_STATE_next = 0; return;    // test_break.cpp:591:13;
        end
        1: begin
            if (|a)
            begin
                // break begin
                if (|b)
                begin
                    // break begin
                    k = 4;
                    break_in_while_for_PROC_STATE_next = 0; return;    // test_break.cpp:591:13;
                    // break end
                end
                k = 2;
                break_in_while_for_PROC_STATE_next = 2; return;    // test_break.cpp:586:17;
                // break end
            end
            i_next7++;
            if (i_next7 < 3)
            begin
                break_in_while_for_PROC_STATE_next = 1; return;    // test_break.cpp:580:25;
            end
            if (|b)
            begin
                // break begin
                k = 4;
                break_in_while_for_PROC_STATE_next = 0; return;    // test_break.cpp:591:13;
                // break end
            end
            k = 2;
            break_in_while_for_PROC_STATE_next = 2; return;    // test_break.cpp:586:17;
        end
        2: begin
            k = 3;
            if (|a || |b)
            begin
                if (|b)
                begin
                    k = 1;
                    i_next7 = 0;
                    break_in_while_for_PROC_STATE_next = 1; return;    // test_break.cpp:580:25;
                end
                break_in_while_for_PROC_STATE_next = 2; return;    // test_break.cpp:586:17;
            end
            k = 4;
            break_in_while_for_PROC_STATE_next = 0; return;    // test_break.cpp:591:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_while_for_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_while_for_PROC_STATE <= 0;    // test_break.cpp:572:9;
    end
    else begin
        i8 <= i_next7;
        break_in_while_for_PROC_STATE <= break_in_while_for_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_do_while_wait1 (test_break.cpp:598:5) 

// Thread-local variables
logic signed [31:0] i9;
logic signed [31:0] i_next8;
logic [1:0] break_in_do_while_wait1_PROC_STATE;
logic [1:0] break_in_do_while_wait1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_do_while_wait1_comb     // test_break.cpp:598:5
    break_in_do_while_wait1_func;
end
function void break_in_do_while_wait1_func;
    integer k;
    i_next8 = i9;
    break_in_do_while_wait1_PROC_STATE_next = break_in_do_while_wait1_PROC_STATE;
    
    case (break_in_do_while_wait1_PROC_STATE)
        0: begin
            i_next8 = 0;
            i_next8++;
            break_in_do_while_wait1_PROC_STATE_next = 1; return;    // test_break.cpp:608:17;
        end
        1: begin
            if (|a)
            begin
                // break begin
                k = 1;
                break_in_do_while_wait1_PROC_STATE_next = 0; return;    // test_break.cpp:616:13;
                // break end
            end
            k = 2;
            if (i_next8 < 3)
            begin
                i_next8++;
                break_in_do_while_wait1_PROC_STATE_next = 1; return;    // test_break.cpp:608:17;
            end
            k = 1;
            break_in_do_while_wait1_PROC_STATE_next = 0; return;    // test_break.cpp:616:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_do_while_wait1_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_do_while_wait1_PROC_STATE <= 0;    // test_break.cpp:601:9;
    end
    else begin
        i9 <= i_next8;
        break_in_do_while_wait1_PROC_STATE <= break_in_do_while_wait1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_do_while_wait2 (test_break.cpp:621:5) 

// Thread-local variables
logic signed [31:0] i10;
logic signed [31:0] i_next9;
logic [1:0] break_in_do_while_wait2_PROC_STATE;
logic [1:0] break_in_do_while_wait2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_do_while_wait2_comb     // test_break.cpp:621:5
    break_in_do_while_wait2_func;
end
function void break_in_do_while_wait2_func;
    integer k;
    i_next9 = i10;
    break_in_do_while_wait2_PROC_STATE_next = break_in_do_while_wait2_PROC_STATE;
    
    case (break_in_do_while_wait2_PROC_STATE)
        0: begin
            i_next9 = 0;
            i_next9++;
            if (|b)
            begin
                // break begin
                k = 1;
                break_in_do_while_wait2_PROC_STATE_next = 0; return;    // test_break.cpp:641:13;
                // break end
            end else begin
                k = 2;
                break_in_do_while_wait2_PROC_STATE_next = 1; return;    // test_break.cpp:635:21;
            end
        end
        1: begin
            if (i_next9 < 3 || |a)
            begin
                i_next9++;
                if (|b)
                begin
                    // break begin
                    k = 1;
                    break_in_do_while_wait2_PROC_STATE_next = 0; return;    // test_break.cpp:641:13;
                    // break end
                end else begin
                    k = 2;
                    break_in_do_while_wait2_PROC_STATE_next = 1; return;    // test_break.cpp:635:21;
                end
            end
            k = 1;
            break_in_do_while_wait2_PROC_STATE_next = 0; return;    // test_break.cpp:641:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_do_while_wait2_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_do_while_wait2_PROC_STATE <= 0;    // test_break.cpp:624:9;
    end
    else begin
        i10 <= i_next9;
        break_in_do_while_wait2_PROC_STATE <= break_in_do_while_wait2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: break_in_do_while_wait3 (test_break.cpp:646:5) 

// Thread-local variables
logic signed [31:0] i11;
logic signed [31:0] i_next10;
logic [1:0] break_in_do_while_wait3_PROC_STATE;
logic [1:0] break_in_do_while_wait3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : break_in_do_while_wait3_comb     // test_break.cpp:646:5
    break_in_do_while_wait3_func;
end
function void break_in_do_while_wait3_func;
    integer k;
    i_next10 = i11;
    break_in_do_while_wait3_PROC_STATE_next = break_in_do_while_wait3_PROC_STATE;
    
    case (break_in_do_while_wait3_PROC_STATE)
        0: begin
            i_next10 = 0;
            i_next10++;
            k = 1;
            break_in_do_while_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:658:21;
        end
        1: begin
            if (|b)
            begin
                // break begin
                k = 2;
                break_in_do_while_wait3_PROC_STATE_next = 2; return;    // test_break.cpp:663:17;
                // break end
            end
            if (i_next10 < 30)
            begin
                i_next10++;
                k = 1;
                break_in_do_while_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:658:21;
            end
            k = 2;
            break_in_do_while_wait3_PROC_STATE_next = 2; return;    // test_break.cpp:663:17;
        end
        2: begin
            if (|a)
            begin
                i_next10 = 0;
                i_next10++;
                k = 1;
                break_in_do_while_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:658:21;
            end
            k = 3;
            break_in_do_while_wait3_PROC_STATE_next = 3; return;    // test_break.cpp:669:13;
        end
        3: begin
            k = 4;
            i_next10 = 0;
            i_next10++;
            k = 1;
            break_in_do_while_wait3_PROC_STATE_next = 1; return;    // test_break.cpp:658:21;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arst) 
begin : break_in_do_while_wait3_ff
    if ( ~arst ) begin
        integer k;
        k = 0;
        break_in_do_while_wait3_PROC_STATE <= 0;    // test_break.cpp:649:9;
    end
    else begin
        i11 <= i_next10;
        break_in_do_while_wait3_PROC_STATE <= break_in_do_while_wait3_PROC_STATE_next;
    end
end

endmodule


