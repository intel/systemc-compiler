//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.14
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
    input logic clk
);

// Variables generated for SystemC signals
logic arstn;
logic signed [31:0] in;
logic signed [31:0] out;
logic signed [31:0] t0a;
logic signed [31:0] t0b;
logic signed [31:0] t0;
logic signed [31:0] t1;
logic signed [31:0] t2;
logic signed [31:0] t3;
logic signed [31:0] t4;
logic signed [31:0] t5;
logic signed [31:0] t6;
logic signed [31:0] t7;
logic signed [31:0] t8;

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_no_wait1 (test_cthread_for.cpp:65:5) 

// Thread-local variables
logic signed [31:0] t0a_next;

// Next-state combinational logic
always_comb begin : for_stmt_no_wait1_comb     // test_cthread_for.cpp:65:5
    for_stmt_no_wait1_func;
end
function void for_stmt_no_wait1_func;
    integer k;
    t0a_next = t0a;
    for (integer i = 0; i < 2; i++)
    begin
        k = 1;
    end
    t0a_next = k;
    k = 2;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_no_wait1_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
    end
    else begin
        t0a <= t0a_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_no_wait2 (test_cthread_for.cpp:82:5) 

// Thread-local variables
logic signed [31:0] k0;
logic signed [31:0] k_next;
logic for_stmt_no_wait2_PROC_STATE;
logic for_stmt_no_wait2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_stmt_no_wait2_comb     // test_cthread_for.cpp:82:5
    for_stmt_no_wait2_func;
end
function void for_stmt_no_wait2_func;
    k_next = k0;
    for_stmt_no_wait2_PROC_STATE_next = for_stmt_no_wait2_PROC_STATE;
    
    case (for_stmt_no_wait2_PROC_STATE)
        0: begin
            k_next = 0;
            for (integer i = 0; i < 4; i++)
            begin
                k_next--;
            end
            for_stmt_no_wait2_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:94:13;
        end
        1: begin
            for (integer i_1 = 0; i_1 < 10; i_1++)
            begin
                if (|in)
                begin
                    for (integer j = 0; j < 4; j++)
                    begin
                        k_next++;
                    end
                end
            end
            k_next = 0;
            for (integer i = 0; i < 4; i++)
            begin
                k_next--;
            end
            for_stmt_no_wait2_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:94:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_no_wait2_ff
    if ( ~arstn ) begin
        for_stmt_no_wait2_PROC_STATE <= 0;    // test_cthread_for.cpp:84:9;
    end
    else begin
        k0 <= k_next;
        for_stmt_no_wait2_PROC_STATE <= for_stmt_no_wait2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_no_wait3 (test_cthread_for.cpp:107:5) 

// Next-state combinational logic
always_comb begin : for_stmt_no_wait3_comb     // test_cthread_for.cpp:107:5
    for_stmt_no_wait3_func;
end
function void for_stmt_no_wait3_func;
    integer k;
    k = 11;
    for (integer i = 0; i < 4; i++)
    begin
        if (in != k)
        begin
            break;
        end
        k = k * 2;
    end
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_no_wait3_ff
    if ( ~arstn ) begin
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_no_wait4 (test_cthread_for.cpp:126:5) 

// Thread-local variables
logic signed [31:0] n;
logic signed [31:0] n_next;
logic [31:0] m;
logic [31:0] m_next;
logic signed [31:0] t0b_next;
logic for_stmt_no_wait4_PROC_STATE;
logic for_stmt_no_wait4_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_stmt_no_wait4_comb     // test_cthread_for.cpp:126:5
    for_stmt_no_wait4_func;
end
function void for_stmt_no_wait4_func;
    m_next = m;
    n_next = n;
    t0b_next = t0b;
    for_stmt_no_wait4_PROC_STATE_next = for_stmt_no_wait4_PROC_STATE;
    
    case (for_stmt_no_wait4_PROC_STATE)
        0: begin
            for (integer i = 0; i < 4; i++)
            begin
                if (|in)
                begin
                    n_next = n_next + 1;
                end else begin
                    continue;
                end
                m_next = m_next + n_next;
            end
            t0b_next = m_next;
            for_stmt_no_wait4_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:144:13;
        end
        1: begin
            m_next = 0;
            for (integer i = 0; i < 4; i++)
            begin
                if (|in)
                begin
                    n_next = n_next + 1;
                end else begin
                    continue;
                end
                m_next = m_next + n_next;
            end
            t0b_next = m_next;
            for_stmt_no_wait4_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:144:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_no_wait4_ff
    if ( ~arstn ) begin
        n <= 1;
        m <= 0;
        for_stmt_no_wait4_PROC_STATE <= 0;    // test_cthread_for.cpp:130:9;
    end
    else begin
        n <= n_next;
        m <= m_next;
        t0b <= t0b_next;
        for_stmt_no_wait4_PROC_STATE <= for_stmt_no_wait4_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_wait0 (test_cthread_for.cpp:153:5) 

// Thread-local variables
logic signed [31:0] i0;
logic signed [31:0] i_next;
logic signed [31:0] t0_next;
logic [1:0] for_stmt_wait0_PROC_STATE;
logic [1:0] for_stmt_wait0_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_stmt_wait0_comb     // test_cthread_for.cpp:153:5
    for_stmt_wait0_func;
end
function void for_stmt_wait0_func;
    integer k;
    i_next = i0;
    t0_next = t0;
    for_stmt_wait0_PROC_STATE_next = for_stmt_wait0_PROC_STATE;
    
    case (for_stmt_wait0_PROC_STATE)
        0: begin
            k = 1;
            for_stmt_wait0_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:160:13;
        end
        1: begin
            i_next = 0;
            k = 2;
            for_stmt_wait0_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:164:17;
        end
        2: begin
            i_next++;
            if (i_next < 2)
            begin
                k = 2;
                for_stmt_wait0_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:164:17;
            end
            k = 3;
            t0_next = k;
            k = 1;
            for_stmt_wait0_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:160:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_wait0_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        for_stmt_wait0_PROC_STATE <= 0;    // test_cthread_for.cpp:156:9;
    end
    else begin
        i0 <= i_next;
        t0 <= t0_next;
        for_stmt_wait0_PROC_STATE <= for_stmt_wait0_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_wait1 (test_cthread_for.cpp:172:5) 

// Thread-local variables
logic signed [31:0] i1;
logic signed [31:0] i_next0;
logic signed [31:0] t1_next;
logic for_stmt_wait1_PROC_STATE;
logic for_stmt_wait1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_stmt_wait1_comb     // test_cthread_for.cpp:172:5
    for_stmt_wait1_func;
end
function void for_stmt_wait1_func;
    integer k;
    i_next0 = i1;
    t1_next = t1;
    for_stmt_wait1_PROC_STATE_next = for_stmt_wait1_PROC_STATE;
    
    case (for_stmt_wait1_PROC_STATE)
        0: begin
            i_next0 = 0;
            k = 1;
            for_stmt_wait1_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:180:17;
        end
        1: begin
            i_next0++;
            if (i_next0 < 2)
            begin
                k = 1;
                for_stmt_wait1_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:180:17;
            end
            k = 2;
            t1_next = k;
            i_next0 = 0;
            k = 1;
            for_stmt_wait1_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:180:17;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_wait1_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        for_stmt_wait1_PROC_STATE <= 0;    // test_cthread_for.cpp:175:9;
    end
    else begin
        i1 <= i_next0;
        t1 <= t1_next;
        for_stmt_wait1_PROC_STATE <= for_stmt_wait1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_wait2 (test_cthread_for.cpp:188:5) 

// Thread-local variables
logic signed [31:0] i2;
logic signed [31:0] i_next1;
logic signed [31:0] k1;
logic signed [31:0] k_next0;
logic signed [31:0] t2_next;
logic [1:0] for_stmt_wait2_PROC_STATE;
logic [1:0] for_stmt_wait2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_stmt_wait2_comb     // test_cthread_for.cpp:188:5
    for_stmt_wait2_func;
end
function void for_stmt_wait2_func;
    i_next1 = i2;
    k_next0 = k1;
    t2_next = t2;
    for_stmt_wait2_PROC_STATE_next = for_stmt_wait2_PROC_STATE;
    
    case (for_stmt_wait2_PROC_STATE)
        0: begin
            i_next1 = 0;
            k_next0 = 1;
            for_stmt_wait2_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:196:17;
        end
        1: begin
            i_next1++;
            if (i_next1 < 2)
            begin
                k_next0 = 1;
                for_stmt_wait2_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:196:17;
            end
            k_next0 = 2;
            for_stmt_wait2_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:199:13;
        end
        2: begin
            t2_next = k_next0;
            k_next0 = 3;
            i_next1 = 0;
            k_next0 = 1;
            for_stmt_wait2_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:196:17;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_wait2_ff
    if ( ~arstn ) begin
        k1 <= 0;
        for_stmt_wait2_PROC_STATE <= 0;    // test_cthread_for.cpp:191:9;
    end
    else begin
        i2 <= i_next1;
        k1 <= k_next0;
        t2 <= t2_next;
        for_stmt_wait2_PROC_STATE <= for_stmt_wait2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_wait3 (test_cthread_for.cpp:207:5) 

// Thread-local variables
logic signed [31:0] j0;
logic signed [31:0] j_next;
logic signed [31:0] i3;
logic signed [31:0] i_next2;
logic signed [31:0] t3_next;
logic [1:0] for_stmt_wait3_PROC_STATE;
logic [1:0] for_stmt_wait3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_stmt_wait3_comb     // test_cthread_for.cpp:207:5
    for_stmt_wait3_func;
end
function void for_stmt_wait3_func;
    integer k;
    i_next2 = i3;
    j_next = j0;
    t3_next = t3;
    for_stmt_wait3_PROC_STATE_next = for_stmt_wait3_PROC_STATE;
    
    case (for_stmt_wait3_PROC_STATE)
        0: begin
            i_next2 = 0;
            k = 1;
            j_next = 0;
            k = 2;
            for_stmt_wait3_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:217:21;
        end
        1: begin
            j_next++;
            if (j_next < 3)
            begin
                k = 2;
                for_stmt_wait3_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:217:21;
            end
            if (|in)
            begin
                // break begin
                k = 3;
                t3_next = k;
                for_stmt_wait3_PROC_STATE_next = 0; return;    // test_cthread_for.cpp:223:13;
                // break end
            end
            i_next2++;
            if (i_next2 < 2)
            begin
                k = 1;
                j_next = 0;
                k = 2;
                for_stmt_wait3_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:217:21;
            end
            k = 3;
            t3_next = k;
            for_stmt_wait3_PROC_STATE_next = 0; return;    // test_cthread_for.cpp:223:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_wait3_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
        for_stmt_wait3_PROC_STATE <= 0;    // test_cthread_for.cpp:210:9;
    end
    else begin
        j0 <= j_next;
        i3 <= i_next2;
        t3 <= t3_next;
        for_stmt_wait3_PROC_STATE <= for_stmt_wait3_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_wait4 (test_cthread_for.cpp:229:5) 

// Thread-local variables
logic signed [31:0] k2;
logic signed [31:0] k_next1;
logic signed [31:0] i4;
logic signed [31:0] i_next3;
logic signed [31:0] t4_next;
logic for_stmt_wait4_PROC_STATE;
logic for_stmt_wait4_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_stmt_wait4_comb     // test_cthread_for.cpp:229:5
    for_stmt_wait4_func;
end
function void for_stmt_wait4_func;
    i_next3 = i4;
    k_next1 = k2;
    t4_next = t4;
    for_stmt_wait4_PROC_STATE_next = for_stmt_wait4_PROC_STATE;
    
    case (for_stmt_wait4_PROC_STATE)
        0: begin
            i_next3 = 0;
            for_stmt_wait4_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:236:17;
        end
        1: begin
            if (in == 42)
            begin
                // continue begin
                i_next3++;
                if (i_next3 < 2)
                begin
                    for_stmt_wait4_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:236:17;
                end
                i_next3 = 0;
                for_stmt_wait4_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:236:17;
                // continue end
            end
            for (integer j = 0; j < 3; j++)
            begin
                k_next1++;
            end
            t4_next = k_next1;
            i_next3++;
            if (i_next3 < 2)
            begin
                for_stmt_wait4_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:236:17;
            end
            i_next3 = 0;
            for_stmt_wait4_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:236:17;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_wait4_ff
    if ( ~arstn ) begin
        k2 <= 0;
        for_stmt_wait4_PROC_STATE <= 0;    // test_cthread_for.cpp:232:9;
    end
    else begin
        k2 <= k_next1;
        i4 <= i_next3;
        t4 <= t4_next;
        for_stmt_wait4_PROC_STATE <= for_stmt_wait4_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_stmt_wait_noiter (test_cthread_for.cpp:250:5) 

// Thread-local variables
logic signed [31:0] t5_next;

// Next-state combinational logic
always_comb begin : for_stmt_wait_noiter_comb     // test_cthread_for.cpp:250:5
    for_stmt_wait_noiter_func;
end
function void for_stmt_wait_noiter_func;
    integer k;
    t5_next = t5;
    k = 1;
    k = 3;
    t5_next = k;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_stmt_wait_noiter_ff
    if ( ~arstn ) begin
        integer k;
        k = 0;
    end
    else begin
        t5 <= t5_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_multi_wait1 (test_cthread_for.cpp:270:5) 

// Thread-local variables
logic signed [31:0] i5;
logic signed [31:0] i_next4;
logic signed [31:0] k3;
logic signed [31:0] k_next2;
logic signed [31:0] t6_next;
logic [2:0] for_multi_wait1_PROC_STATE;
logic [2:0] for_multi_wait1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_multi_wait1_comb     // test_cthread_for.cpp:270:5
    for_multi_wait1_func;
end
function void for_multi_wait1_func;
    i_next4 = i5;
    k_next2 = k3;
    t6_next = t6;
    for_multi_wait1_PROC_STATE_next = for_multi_wait1_PROC_STATE;
    
    case (for_multi_wait1_PROC_STATE)
        0: begin
            k_next2 = 1;
            i_next4 = 0;
            k_next2 = 2;
            for_multi_wait1_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:279:17;
        end
        1: begin
            k_next2 = 3;
            for_multi_wait1_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:282:17;
        end
        2: begin
            if (|in)
            begin
                k_next2 = 4;
                for_multi_wait1_PROC_STATE_next = 3; return;    // test_cthread_for.cpp:286:21;
            end
            i_next4++;
            if (i_next4 < 10)
            begin
                k_next2 = 2;
                for_multi_wait1_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:279:17;
            end
            t6_next = k_next2;
            for_multi_wait1_PROC_STATE_next = 0; return;    // test_cthread_for.cpp:290:13;
        end
        3: begin
            i_next4++;
            if (i_next4 < 10)
            begin
                k_next2 = 2;
                for_multi_wait1_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:279:17;
            end
            t6_next = k_next2;
            for_multi_wait1_PROC_STATE_next = 0; return;    // test_cthread_for.cpp:290:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_multi_wait1_ff
    if ( ~arstn ) begin
        k3 <= 0;
        for_multi_wait1_PROC_STATE <= 0;    // test_cthread_for.cpp:273:9;
    end
    else begin
        i5 <= i_next4;
        k3 <= k_next2;
        t6 <= t6_next;
        for_multi_wait1_PROC_STATE <= for_multi_wait1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_multi_wait2 (test_cthread_for.cpp:295:5) 

// Thread-local variables
logic signed [31:0] i6;
logic signed [31:0] i_next5;
logic signed [31:0] k4;
logic signed [31:0] k_next3;
logic signed [31:0] t7_next;
logic [1:0] for_multi_wait2_PROC_STATE;
logic [1:0] for_multi_wait2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_multi_wait2_comb     // test_cthread_for.cpp:295:5
    for_multi_wait2_func;
end
function void for_multi_wait2_func;
    i_next5 = i6;
    k_next3 = k4;
    t7_next = t7;
    for_multi_wait2_PROC_STATE_next = for_multi_wait2_PROC_STATE;
    
    case (for_multi_wait2_PROC_STATE)
        0: begin
            k_next3 = 1;
            for_multi_wait2_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:302:13;
        end
        1: begin
            if (!(|in))
            begin
                for_multi_wait2_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:305:17;
            end
            t7_next = k_next3;
            k_next3 = 1;
            for_multi_wait2_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:302:13;
        end
        2: begin
            i_next5 = 0;
            k_next3 = 2;
            for_multi_wait2_PROC_STATE_next = 3; return;    // test_cthread_for.cpp:309:21;
        end
        3: begin
            ++i_next5;
            if (i_next5 < 3)
            begin
                k_next3 = 2;
                for_multi_wait2_PROC_STATE_next = 3; return;    // test_cthread_for.cpp:309:21;
            end
            if (!(|in))
            begin
                for_multi_wait2_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:305:17;
            end
            t7_next = k_next3;
            k_next3 = 1;
            for_multi_wait2_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:302:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_multi_wait2_ff
    if ( ~arstn ) begin
        k4 <= 0;
        for_multi_wait2_PROC_STATE <= 0;    // test_cthread_for.cpp:298:9;
    end
    else begin
        i6 <= i_next5;
        k4 <= k_next3;
        t7 <= t7_next;
        for_multi_wait2_PROC_STATE <= for_multi_wait2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: for_multi_wait3 (test_cthread_for.cpp:317:5) 

// Thread-local variables
logic signed [31:0] k5;
logic signed [31:0] k_next4;
logic signed [31:0] t8_next;
logic signed [31:0] i7;
logic signed [31:0] i_next6;
logic [2:0] for_multi_wait3_PROC_STATE;
logic [2:0] for_multi_wait3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : for_multi_wait3_comb     // test_cthread_for.cpp:317:5
    for_multi_wait3_func;
end
function void for_multi_wait3_func;
    i_next6 = i7;
    k_next4 = k5;
    t8_next = t8;
    for_multi_wait3_PROC_STATE_next = for_multi_wait3_PROC_STATE;
    
    case (for_multi_wait3_PROC_STATE)
        0: begin
            k_next4 = 1;
            for_multi_wait3_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:324:13;
        end
        1: begin
            i_next6 = 0;
            k_next4 = 2;
            for_multi_wait3_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:329:21;
        end
        2: begin
            ++i_next6;
            if (i_next6 < 3)
            begin
                k_next4 = 2;
                for_multi_wait3_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:329:21;
            end
            for_multi_wait3_PROC_STATE_next = 3; return;    // test_cthread_for.cpp:332:17;
        end
        3: begin
            if (|out)
            begin
                for_multi_wait3_PROC_STATE_next = 4; return;    // test_cthread_for.cpp:335:21;
            end
            if (in != 42)
            begin
                i_next6 = 0;
                k_next4 = 2;
                for_multi_wait3_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:329:21;
            end
            t8_next = k_next4;
            k_next4 = 1;
            for_multi_wait3_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:324:13;
        end
        4: begin
            k_next4 = 3;
            if (in != 42)
            begin
                i_next6 = 0;
                k_next4 = 2;
                for_multi_wait3_PROC_STATE_next = 2; return;    // test_cthread_for.cpp:329:21;
            end
            t8_next = k_next4;
            k_next4 = 1;
            for_multi_wait3_PROC_STATE_next = 1; return;    // test_cthread_for.cpp:324:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : for_multi_wait3_ff
    if ( ~arstn ) begin
        k5 <= 0;
        for_multi_wait3_PROC_STATE <= 0;    // test_cthread_for.cpp:320:9;
    end
    else begin
        k5 <= k_next4;
        t8 <= t8_next;
        i7 <= i_next6;
        for_multi_wait3_PROC_STATE <= for_multi_wait3_PROC_STATE_next;
    end
end

endmodule


