//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.14
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
    input logic clk
);

// Variables generated for SystemC signals
logic arstn;
logic signed [31:0] out;
logic signed [31:0] t0;
logic signed [31:0] out1;
logic signed [31:0] out2;
logic signed [31:0] r3;
logic signed [31:0] r4;
logic signed [31:0] out3;
logic signed [31:0] out4;

//------------------------------------------------------------------------------
// Clocked THREAD: comb_arr_in_reset (test_cthread_array_comb_reg.cpp:71:5) 

// Thread-local variables
logic signed [31:0] t0_next;
logic [1:0] arr[2];

// Next-state combinational logic
always_comb begin : comb_arr_in_reset_comb     // test_cthread_array_comb_reg.cpp:71:5
    comb_arr_in_reset_func;
end
function void comb_arr_in_reset_func;
    t0_next = t0;
    arr[1] = 3;
    t0_next = arr[1];
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : comb_arr_in_reset_ff
    if ( ~arstn ) begin
        logic [1:0] arr[2];
        arr[0] = 0;
    end
    else begin
        t0 <= t0_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: comb_arr_in_reset1 (test_cthread_array_comb_reg.cpp:84:5) 

// Thread-local variables
logic [1:0] arr1[2];
logic [1:0] arr1_next[2];
logic signed [31:0] out_next;

// Next-state combinational logic
always_comb begin : comb_arr_in_reset1_comb     // test_cthread_array_comb_reg.cpp:84:5
    comb_arr_in_reset1_func;
end
function void comb_arr_in_reset1_func;
    arr1_next = arr1;
    out_next = out;
    arr1_next[1] = 3;
    out_next = arr1_next[0];
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : comb_arr_in_reset1_ff
    if ( ~arstn ) begin
        arr1[0] <= 0;
    end
    else begin
        arr1 <= arr1_next;
        out <= out_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: comb_arr_in_reset1a (test_cthread_array_comb_reg.cpp:97:5) 

// Thread-local variables
logic [1:0] arr2[2];
logic [1:0] arr2_next[2];
logic signed [31:0] out1_next;
logic comb_arr_in_reset1a_PROC_STATE;
logic comb_arr_in_reset1a_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : comb_arr_in_reset1a_comb     // test_cthread_array_comb_reg.cpp:97:5
    comb_arr_in_reset1a_func;
end
function void comb_arr_in_reset1a_func;
    arr2_next = arr2;
    out1_next = out1;
    comb_arr_in_reset1a_PROC_STATE_next = comb_arr_in_reset1a_PROC_STATE;
    
    case (comb_arr_in_reset1a_PROC_STATE)
        0: begin
            comb_arr_in_reset1a_PROC_STATE_next = 1; return;    // test_cthread_array_comb_reg.cpp:103:13;
        end
        1: begin
            out1_next = arr2_next[1];
            comb_arr_in_reset1a_PROC_STATE_next = 1; return;    // test_cthread_array_comb_reg.cpp:103:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : comb_arr_in_reset1a_ff
    if ( ~arstn ) begin
        arr2[0] <= 0;
        arr2[1] <= 1;
        comb_arr_in_reset1a_PROC_STATE <= 0;    // test_cthread_array_comb_reg.cpp:100:9;
    end
    else begin
        arr2 <= arr2_next;
        out1 <= out1_next;
        comb_arr_in_reset1a_PROC_STATE <= comb_arr_in_reset1a_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: comb_arr_in_reset2 (test_cthread_array_comb_reg.cpp:110:5) 

// Thread-local variables
logic signed [31:0] out2_next;
logic [1:0] arr3[2];

// Next-state combinational logic
always_comb begin : comb_arr_in_reset2_comb     // test_cthread_array_comb_reg.cpp:110:5
    comb_arr_in_reset2_func;
end
function void comb_arr_in_reset2_func;
    out2_next = out2;
    arr3[0] = 3;
    out2_next = arr3[0];
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : comb_arr_in_reset2_ff
    if ( ~arstn ) begin
        logic [1:0] arr3[2];
        arr3[0] = 0;
    end
    else begin
        out2 <= out2_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: comb_arr_in_reset2D (test_cthread_array_comb_reg.cpp:124:5) 

// Thread-local variables
logic [2:0] arr5[3][4];
logic [2:0] arr5_next[3][4];
logic signed [31:0] r3_next;
logic [2:0] arr4[3][4];
logic comb_arr_in_reset2D_PROC_STATE;
logic comb_arr_in_reset2D_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : comb_arr_in_reset2D_comb     // test_cthread_array_comb_reg.cpp:124:5
    comb_arr_in_reset2D_func;
end
function void comb_arr_in_reset2D_func;
    arr5_next = arr5;
    r3_next = r3;
    comb_arr_in_reset2D_PROC_STATE_next = comb_arr_in_reset2D_PROC_STATE;
    
    case (comb_arr_in_reset2D_PROC_STATE)
        0: begin
            arr4[1][2] = 3;
            arr5_next[1][2] = 3;
            r3_next = arr4[1][2];
            comb_arr_in_reset2D_PROC_STATE_next = 1; return;    // test_cthread_array_comb_reg.cpp:134:13;
        end
        1: begin
            r3_next = arr5_next[1][2];
            arr4[1][2] = 3;
            arr5_next[1][2] = 3;
            r3_next = arr4[1][2];
            comb_arr_in_reset2D_PROC_STATE_next = 1; return;    // test_cthread_array_comb_reg.cpp:134:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : comb_arr_in_reset2D_ff
    if ( ~arstn ) begin
        logic [2:0] arr4[3][4];
        arr4[0][1] = 0;
        arr5[0][1] <= 0;
        comb_arr_in_reset2D_PROC_STATE <= 0;    // test_cthread_array_comb_reg.cpp:128:9;
    end
    else begin
        arr5 <= arr5_next;
        r3 <= r3_next;
        comb_arr_in_reset2D_PROC_STATE <= comb_arr_in_reset2D_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: comb_ptr_in_reset (test_cthread_array_comb_reg.cpp:141:5) 

// Thread-local variables
logic [8:0] q;
logic [8:0] q_next;
logic signed [31:0] r4_next;
logic [8:0] p;
logic comb_ptr_in_reset_PROC_STATE;
logic comb_ptr_in_reset_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : comb_ptr_in_reset_comb     // test_cthread_array_comb_reg.cpp:141:5
    comb_ptr_in_reset_func;
end
function void comb_ptr_in_reset_func;
    q_next = q;
    r4_next = r4;
    comb_ptr_in_reset_PROC_STATE_next = comb_ptr_in_reset_PROC_STATE;
    
    case (comb_ptr_in_reset_PROC_STATE)
        0: begin
            p = 3;
            q_next = 4;
            r4_next = p + 1;
            comb_ptr_in_reset_PROC_STATE_next = 1; return;    // test_cthread_array_comb_reg.cpp:150:13;
        end
        1: begin
            r4_next = q_next + 1;
            p = 3;
            q_next = 4;
            r4_next = p + 1;
            comb_ptr_in_reset_PROC_STATE_next = 1; return;    // test_cthread_array_comb_reg.cpp:150:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : comb_ptr_in_reset_ff
    if ( ~arstn ) begin
        logic [8:0] p;
        p = 0;
        comb_ptr_in_reset_PROC_STATE <= 0;    // test_cthread_array_comb_reg.cpp:144:9;
    end
    else begin
        q <= q_next;
        r4 <= r4_next;
        comb_ptr_in_reset_PROC_STATE <= comb_ptr_in_reset_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: init_list1 (test_cthread_array_comb_reg.cpp:159:5) 

// Thread-local variables
logic signed [31:0] m;
logic signed [31:0] m_next;
logic signed [31:0] n;
logic signed [31:0] n_next;
logic signed [31:0] l1[2];
logic signed [31:0] l1_next[2];
logic signed [31:0] l4[2];
logic signed [31:0] l4_next[2];
logic signed [31:0] out3_next;
logic init_list1_PROC_STATE;
logic init_list1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : init_list1_comb     // test_cthread_array_comb_reg.cpp:159:5
    init_list1_func;
end
function void init_list1_func;
    integer l2[2];
    integer l3[2];
    l1_next = l1;
    l4_next = l4;
    m_next = m;
    n_next = n;
    out3_next = out3;
    init_list1_PROC_STATE_next = init_list1_PROC_STATE;
    
    case (init_list1_PROC_STATE)
        0: begin
            l2[0] = m_next; l2[1] = n_next;
            out3_next = l1_next[1] + l2[0];
            l3[0] = 1; l3[1] = 2;
            l4_next[0] = 3; l4_next[1] = 4;
            init_list1_PROC_STATE_next = 1; return;    // test_cthread_array_comb_reg.cpp:173:13;
        end
        1: begin
            l3[1] = 2;
            l4_next[1] = 4;
            out3_next = l3[1] + l4_next[0];
            n_next = m_next;
            l2[0] = m_next; l2[1] = n_next;
            out3_next = l1_next[1] + l2[0];
            l3[0] = 1; l3[1] = 2;
            l4_next[0] = 3; l4_next[1] = 4;
            init_list1_PROC_STATE_next = 1; return;    // test_cthread_array_comb_reg.cpp:173:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : init_list1_ff
    if ( ~arstn ) begin
        n <= 0;
        m <= 1;
        l1[0] <= 0; l1[1] <= m;
        init_list1_PROC_STATE <= 0;    // test_cthread_array_comb_reg.cpp:164:9;
    end
    else begin
        m <= m_next;
        n <= n_next;
        l1 <= l1_next;
        l4 <= l4_next;
        out3 <= out3_next;
        init_list1_PROC_STATE <= init_list1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: init_list2 (test_cthread_array_comb_reg.cpp:182:5) 

// Thread-local variables
logic signed [31:0] j;
logic signed [31:0] j_next;
logic signed [31:0] out4_next;

// Next-state combinational logic
always_comb begin : init_list2_comb     // test_cthread_array_comb_reg.cpp:182:5
    init_list2_func;
end
function void init_list2_func;
    integer ll1[2];
    integer ll2[3];
    j_next = j;
    out4_next = out4;
    ll2[0] = 3; ll2[1] = 2; ll2[2] = j_next;
    out4_next = ll2[2];
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge arstn) 
begin : init_list2_ff
    if ( ~arstn ) begin
        integer ll1[2];
        ll1[0] = 0; ll1[1] = 1;
        j <= ll1[1];
    end
    else begin
        j <= j_next;
        out4 <= out4_next;
    end
end

endmodule


