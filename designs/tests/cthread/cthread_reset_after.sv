//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "top_inst"
(
    input logic clk
);

// Variables generated for SystemC signals
logic rstn;
logic [3:0] s1;
logic [3:0] s2;
logic [3:0] s3[3];
logic [3:0] s4;
logic [3:0] s5[3];
logic signed [31:0] s6;
logic signed [31:0] s7;

//------------------------------------------------------------------------------
// Clocked THREAD: after1 (test_cthread_reset_after.cpp:48:5) 

// Thread-local variables
logic [3:0] s1_next;
logic [3:0] a;
logic [3:0] a_next;
logic after1_PROC_STATE;
logic after1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : after1_comb     // test_cthread_reset_after.cpp:48:5
    after1_func;
end
function void after1_func;
    logic [3:0] b;
    a_next = a;
    s1_next = s1;
    after1_PROC_STATE_next = after1_PROC_STATE;
    
    case (after1_PROC_STATE)
        0: begin
            b = 2'd2;
            s1_next = a_next + b;
            a_next++;
            after1_PROC_STATE_next = 1; return;    // test_cthread_reset_after.cpp:60:13;
        end
        1: begin
            s1_next = a_next;
            a_next++;
            after1_PROC_STATE_next = 1; return;    // test_cthread_reset_after.cpp:60:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : after1_ff
    if ( ~rstn ) begin
        a <= 1'd1;
        s1 <= '0;
        after1_PROC_STATE <= '0;    // test_cthread_reset_after.cpp:53:9;
    end
    else begin
        s1 <= s1_next;
        a <= a_next;
        after1_PROC_STATE <= after1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: after2 (test_cthread_reset_after.cpp:68:5) 

// Thread-local variables
logic [3:0] s2_next;
logic [3:0] s3_next[3];
logic [3:0] a0;
logic [3:0] a_next0;
logic after2_PROC_STATE;
logic after2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : after2_comb     // test_cthread_reset_after.cpp:68:5
    after2_func;
end
function void after2_func;
    a_next0 = a0;
    s2_next = s2;
    s3_next = s3;
    after2_PROC_STATE_next = after2_PROC_STATE;
    
    case (after2_PROC_STATE)
        0: begin
            if (s1 == 1'd1)
            begin
                s2_next = a_next0 + 1'd1;
            end
            for (int i_1 = 0; i_1 < 3; i_1++)
            begin
                s3_next[i_1] = s1 + 1'd1;
            end
            a_next0++;
            s2_next = a_next0;
            after2_PROC_STATE_next = 1; return;    // test_cthread_reset_after.cpp:89:13;
        end
        1: begin
            a_next0++;
            s2_next = a_next0;
            after2_PROC_STATE_next = 1; return;    // test_cthread_reset_after.cpp:89:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : after2_ff
    if ( ~rstn ) begin
        a0 <= 1'd1;
        s2 <= '0;
        for (int i = 0; i < 3; i++)
        begin
            s3[i] <= '0;
        end
        after2_PROC_STATE <= '0;    // test_cthread_reset_after.cpp:76:9;
    end
    else begin
        s2 <= s2_next;
        s3 <= s3_next;
        a0 <= a_next0;
        after2_PROC_STATE <= after2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: after_multi1 (test_cthread_reset_after.cpp:95:5) 

// Thread-local variables
logic [3:0] s4_next;
logic [3:0] c;
logic [3:0] c_next;
logic [2:0] after_multi1_PROC_STATE;
logic [2:0] after_multi1_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : after_multi1_comb     // test_cthread_reset_after.cpp:95:5
    after_multi1_func;
end
function void after_multi1_func;
    c_next = c;
    s4_next = s4;
    after_multi1_PROC_STATE_next = after_multi1_PROC_STATE;
    
    case (after_multi1_PROC_STATE)
        0: begin
            s4_next = 1'd1;
            after_multi1_PROC_STATE_next = 1; return;    // test_cthread_reset_after.cpp:101:9;
        end
        1: begin
            s4_next = 2'd2;
            after_multi1_PROC_STATE_next = 2; return;    // test_cthread_reset_after.cpp:104:9;
        end
        2: begin
            if (|s1)
            begin
                s4_next = 2'd3;
                after_multi1_PROC_STATE_next = 3; return;    // test_cthread_reset_after.cpp:108:13;
            end
            c_next++;
            after_multi1_PROC_STATE_next = 4; return;    // test_cthread_reset_after.cpp:113:13;
        end
        3: begin
            c_next++;
            after_multi1_PROC_STATE_next = 4; return;    // test_cthread_reset_after.cpp:113:13;
        end
        4: begin
            s4_next = c_next;
            c_next++;
            after_multi1_PROC_STATE_next = 4; return;    // test_cthread_reset_after.cpp:113:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : after_multi1_ff
    if ( ~rstn ) begin
        c <= 1'd1;
        after_multi1_PROC_STATE <= '0;    // test_cthread_reset_after.cpp:98:9;
    end
    else begin
        s4 <= s4_next;
        c <= c_next;
        after_multi1_PROC_STATE <= after_multi1_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: after_multi2 (test_cthread_reset_after.cpp:119:5) 

// Thread-local variables
logic [3:0] s5_next[3];
logic signed [31:0] i0;
logic signed [31:0] i_next;
logic [2:0] d;
logic [2:0] d_next;
logic [1:0] after_multi2_PROC_STATE;
logic [1:0] after_multi2_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : after_multi2_comb     // test_cthread_reset_after.cpp:119:5
    after_multi2_func;
end
function void after_multi2_func;
    d_next = d;
    i_next = i0;
    s5_next = s5;
    after_multi2_PROC_STATE_next = after_multi2_PROC_STATE;
    
    case (after_multi2_PROC_STATE)
        0: begin
            i_next = '0;
            s5_next[i_next] = s1;
            after_multi2_PROC_STATE_next = 1; return;    // test_cthread_reset_after.cpp:129:13;
        end
        1: begin
            i_next++;
            if (i_next < 3)
            begin
                s5_next[i_next] = s1;
                after_multi2_PROC_STATE_next = 1; return;    // test_cthread_reset_after.cpp:129:13;
            end
            d_next++;
            s5_next[0] = d_next;
            after_multi2_PROC_STATE_next = 2; return;    // test_cthread_reset_after.cpp:135:13;
        end
        2: begin
            s5_next[2] = s5[1];
            s5_next[1] = d_next;
            d_next++;
            s5_next[0] = d_next;
            after_multi2_PROC_STATE_next = 2; return;    // test_cthread_reset_after.cpp:135:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : after_multi2_ff
    if ( ~rstn ) begin
        d <= 2'd2;
        for (int i = 0; i < 3; i++)
        begin
            s5[i] <= '0;
        end
        after_multi2_PROC_STATE <= '0;    // test_cthread_reset_after.cpp:125:9;
    end
    else begin
        s5 <= s5_next;
        i0 <= i_next;
        d <= d_next;
        after_multi2_PROC_STATE <= after_multi2_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: after_multi3 (test_cthread_reset_after.cpp:143:5) 

// Thread-local variables
logic signed [31:0] i1;
logic signed [31:0] i_next0;
logic signed [31:0] s6_next;
logic [1:0] after_multi3_PROC_STATE;
logic [1:0] after_multi3_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : after_multi3_comb     // test_cthread_reset_after.cpp:143:5
    after_multi3_func;
end
function void after_multi3_func;
    i_next0 = i1;
    s6_next = s6;
    after_multi3_PROC_STATE_next = after_multi3_PROC_STATE;
    
    case (after_multi3_PROC_STATE)
        0: begin
            if (!(|s5[s4]))
            begin
                i_next0++;
                after_multi3_PROC_STATE_next = 1; return;    // test_cthread_reset_after.cpp:150:13;
            end
            s6_next = i_next0;
            s6_next = i_next0 + 2'sd1;
            after_multi3_PROC_STATE_next = 2; return;    // test_cthread_reset_after.cpp:156:13;
        end
        1: begin
            if (!(|s5[s4]))
            begin
                i_next0++;
                after_multi3_PROC_STATE_next = 1; return;    // test_cthread_reset_after.cpp:150:13;
            end else begin
                s6_next = i_next0;
                s6_next = i_next0 + 2'sd1;
                after_multi3_PROC_STATE_next = 2; return;    // test_cthread_reset_after.cpp:156:13;
            end
        end
        2: begin
            s6_next = i_next0 + 2'sd1;
            after_multi3_PROC_STATE_next = 2; return;    // test_cthread_reset_after.cpp:156:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : after_multi3_ff
    if ( ~rstn ) begin
        i1 <= '0;
        after_multi3_PROC_STATE <= '0;    // test_cthread_reset_after.cpp:146:9;
    end
    else begin
        i1 <= i_next0;
        s6 <= s6_next;
        after_multi3_PROC_STATE <= after_multi3_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: after_multi4 (test_cthread_reset_after.cpp:161:5) 

// Thread-local variables
logic signed [31:0] i2;
logic signed [31:0] i_next1;
logic signed [31:0] s7_next;
logic [1:0] after_multi4_PROC_STATE;
logic [1:0] after_multi4_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : after_multi4_comb     // test_cthread_reset_after.cpp:161:5
    after_multi4_func;
end
function void after_multi4_func;
    i_next1 = i2;
    s7_next = s7;
    after_multi4_PROC_STATE_next = after_multi4_PROC_STATE;
    
    case (after_multi4_PROC_STATE)
        0: begin
            if (|s6)
            begin
                if (|s4)
                begin
                    // break begin
                    s7_next = i_next1;
                    s7_next = i_next1 + 2'sd1;
                    after_multi4_PROC_STATE_next = 2; return;    // test_cthread_reset_after.cpp:175:13;
                    // break end
                end
                i_next1++;
                after_multi4_PROC_STATE_next = 1; return;    // test_cthread_reset_after.cpp:169:13;
            end
            s7_next = i_next1;
            s7_next = i_next1 + 2'sd1;
            after_multi4_PROC_STATE_next = 2; return;    // test_cthread_reset_after.cpp:175:13;
        end
        1: begin
            if (|s6)
            begin
                if (|s4)
                begin
                    // break begin
                    s7_next = i_next1;
                    s7_next = i_next1 + 2'sd1;
                    after_multi4_PROC_STATE_next = 2; return;    // test_cthread_reset_after.cpp:175:13;
                    // break end
                end
                i_next1++;
                after_multi4_PROC_STATE_next = 1; return;    // test_cthread_reset_after.cpp:169:13;
            end else begin
                s7_next = i_next1;
                s7_next = i_next1 + 2'sd1;
                after_multi4_PROC_STATE_next = 2; return;    // test_cthread_reset_after.cpp:175:13;
            end
        end
        2: begin
            s7_next = i_next1 + 2'sd1;
            after_multi4_PROC_STATE_next = 2; return;    // test_cthread_reset_after.cpp:175:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : after_multi4_ff
    if ( ~rstn ) begin
        i2 <= '0;
        after_multi4_PROC_STATE <= '0;    // test_cthread_reset_after.cpp:164:9;
    end
    else begin
        i2 <= i_next1;
        s7 <= s7_next;
        after_multi4_PROC_STATE <= after_multi4_PROC_STATE_next;
    end
end

endmodule


