//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: B_top ()
//
module B_top // "b_mod"
(
    input logic clk
);

// Variables generated for SystemC signals
logic a;
logic b;


//------------------------------------------------------------------------------
// Child module instances

A a_mod
(
  .clk(clk),
  .a(a),
  .b(b)
);

endmodule



//==============================================================================
//
// Module: A (test_pointer_to_bool.cpp:125:5)
//
module A // "b_mod.a_mod"
(
    input logic clk,
    input logic a,
    output logic b
);

// Variables generated for SystemC signals
logic rstn;
logic signed [31:0] t2;
logic signed [31:0] t3;

//------------------------------------------------------------------------------
// Clocked THREAD: test_ptr_comp (test_pointer_to_bool.cpp:58:5) 

// Thread-local variables
logic signed [31:0] p;
logic signed [31:0] p_next;
logic signed [31:0] t2_next;

// Next-state combinational logic
always_comb begin : test_ptr_comp_comb     // test_pointer_to_bool.cpp:58:5
    test_ptr_comp_func;
end
function void test_ptr_comp_func;
    logic b_1;
    logic c;
    p_next = p;
    t2_next = t2;
    b_1 = 1'd1;
    b_1 = '0;
    b_1 = '0;
    b_1 = 1;
    b_1 = '0;
    b_1 = 1;
    b_1 = '0;
    b_1 = 1;
    c = 1'd1;
    t2_next = b_1 + c;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : test_ptr_comp_ff
    if ( ~rstn ) begin
    end
    else begin
        p <= p_next;
        t2 <= t2_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_ptr_to_bool (test_pointer_to_bool.cpp:82:5) 

// Thread-local variables
logic signed [31:0] p2;
logic signed [31:0] p2_next;

// Next-state combinational logic
always_comb begin : test_ptr_to_bool_comb     // test_pointer_to_bool.cpp:82:5
    test_ptr_to_bool_func;
end
function void test_ptr_to_bool_func;
    integer unsigned i;
    p2_next = p2;
    i = 1'd1;
    i = 2'd2;
    i = 2'd3;
    i = 3'd4;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : test_ptr_to_bool_ff
    if ( ~rstn ) begin
    end
    else begin
        p2 <= p2_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: test_ptr_cond (test_pointer_to_bool.cpp:104:5) 

// Thread-local variables
logic signed [31:0] p3;
logic signed [31:0] p3_next;
logic signed [31:0] t3_next;

// Next-state combinational logic
always_comb begin : test_ptr_cond_comb     // test_pointer_to_bool.cpp:104:5
    test_ptr_cond_func;
end
function void test_ptr_cond_func;
    integer i;
    p3_next = p3;
    t3_next = t3;
    i = p3_next;
    i = 1;
    t3_next = i;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : test_ptr_cond_ff
    if ( ~rstn ) begin
        p3 <= 42;
    end
    else begin
        p3 <= p3_next;
        t3 <= t3_next;
    end
end

endmodule


