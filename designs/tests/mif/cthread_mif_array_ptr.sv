//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.14
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: Top ()
//
module Top // "top"
(
    input logic clk
);

// Variables generated for SystemC signals
logic rst;
logic [3:0] minst_s[2];
logic minst_clk[2];
logic minst_rst[2];

// Local parameters generated for C++ constants
localparam logic [3:0] minst_vo[2] = '{ 0, 0 };
localparam logic minst_vf[2] = '{ 0, 0 };

// Assignments generated for C++ channel arrays
assign minst_clk[0] = clk;
assign minst_clk[1] = clk;
assign minst_rst[0] = rst;
assign minst_rst[1] = rst;

//------------------------------------------------------------------------------
// Clocked THREAD: minst_thread_member_ro (test_cthread_mif_array_ptr.cpp:49:5) 

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : minst_thread_member_ro_sct_i 

    // Next-state combinational logic
    always_comb begin : minst_thread_member_ro_comb     // test_cthread_mif_array_ptr.cpp:49:5
        minst_thread_member_ro_func;
    end
    function void minst_thread_member_ro_func;
        logic [3:0] a;
        a = minst_s[sct_i];
    endfunction

    // Synchronous register update
    always_ff @(posedge minst_clk[sct_i] or posedge minst_rst[sct_i]) 
    begin : minst_thread_member_ro_ff
        if ( minst_rst[sct_i] ) begin
        end
        else begin
        end
    end

end
endgenerate

//------------------------------------------------------------------------------
// Clocked THREAD: minst_thread_member_comb (test_cthread_mif_array_ptr.cpp:60:5) 

// Thread-local variables
logic [3:0] minst_v[2];

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : minst_thread_member_comb_sct_i 

    // Next-state combinational logic
    always_comb begin : minst_thread_member_comb_comb     // test_cthread_mif_array_ptr.cpp:60:5
        minst_thread_member_comb_func;
    end
    function void minst_thread_member_comb_func;
        logic [63:0] b;
        logic [3:0] a;
        minst_v[sct_i] = 1;
        a = minst_v[sct_i];
    endfunction

    // Synchronous register update
    always_ff @(posedge minst_clk[sct_i] or posedge minst_rst[sct_i]) 
    begin : minst_thread_member_comb_ff
        if ( minst_rst[sct_i] ) begin
            logic [63:0] b;
            logic [3:0] minst_v;
            minst_v = 0;
            b = minst_v + 1;
        end
        else begin
        end
    end

end
endgenerate

//------------------------------------------------------------------------------
// Clocked THREAD: minst_thread_member_reg (test_cthread_mif_array_ptr.cpp:74:5) 

// Thread-local variables
logic [63:0] b0[2];
logic [63:0] b_next[2];
logic [4:0] minst_va[2];
logic [4:0] minst_va_next[2];
logic [4:0] a0[2];
logic [4:0] a_next[2];
logic thread_member_reg_PROC_STATE[2];
logic thread_member_reg_PROC_STATE_next[2];

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : minst_thread_member_reg_sct_i 

    // Next-state combinational logic
    always_comb begin : minst_thread_member_reg_comb     // test_cthread_mif_array_ptr.cpp:74:5
        minst_thread_member_reg_func;
    end
    function void minst_thread_member_reg_func;
        a_next[sct_i] = a0[sct_i];
        b_next[sct_i] = b0[sct_i];
        minst_va_next[sct_i] = minst_va[sct_i];
        thread_member_reg_PROC_STATE_next[sct_i] = thread_member_reg_PROC_STATE[sct_i];
    
        case (thread_member_reg_PROC_STATE[sct_i])
            0: begin
                a_next[sct_i] = minst_va_next[sct_i] + b_next[sct_i];
                thread_member_reg_PROC_STATE_next[sct_i] = 1; return;    // test_cthread_mif_array_ptr.cpp:82:13;
            end
            1: begin
                minst_va_next[sct_i] = a_next[sct_i];
                a_next[sct_i] = minst_va_next[sct_i] + b_next[sct_i];
                thread_member_reg_PROC_STATE_next[sct_i] = 1; return;    // test_cthread_mif_array_ptr.cpp:82:13;
            end
        endcase
    endfunction

    // Synchronous register update
    always_ff @(posedge minst_clk[sct_i] or posedge minst_rst[sct_i]) 
    begin : minst_thread_member_reg_ff
        if ( minst_rst[sct_i] ) begin
            minst_va[sct_i] <= 0;
            b0[sct_i] <= minst_va[sct_i] + 1;
            thread_member_reg_PROC_STATE[sct_i] <= 0;    // test_cthread_mif_array_ptr.cpp:78:9;
        end
        else begin
            b0[sct_i] <= b_next[sct_i];
            minst_va[sct_i] <= minst_va_next[sct_i];
            a0[sct_i] <= a_next[sct_i];
            thread_member_reg_PROC_STATE[sct_i] <= thread_member_reg_PROC_STATE_next[sct_i];
        end
    end

end
endgenerate

//------------------------------------------------------------------------------
// Clocked THREAD: minst_thread_loc_reg (test_cthread_mif_array_ptr.cpp:87:5) 

// Thread-local variables
logic [5:0] a1[2];
logic [5:0] a_next0[2];

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : minst_thread_loc_reg_sct_i 

    // Next-state combinational logic
    always_comb begin : minst_thread_loc_reg_comb     // test_cthread_mif_array_ptr.cpp:87:5
        minst_thread_loc_reg_func;
    end
    function void minst_thread_loc_reg_func;
        logic [5:0] b;
        a_next0[sct_i] = a1[sct_i];
        b = a_next0[sct_i];
        a_next0[sct_i]++;
    endfunction

    // Synchronous register update
    always_ff @(posedge minst_clk[sct_i] or posedge minst_rst[sct_i]) 
    begin : minst_thread_loc_reg_ff
        if ( minst_rst[sct_i] ) begin
            a1[sct_i] <= 0;
        end
        else begin
            a1[sct_i] <= a_next0[sct_i];
        end
    end

end
endgenerate

//------------------------------------------------------------------------------
// Clocked THREAD: top_thread_comb (test_cthread_mif_array_ptr.cpp:145:5) 

// Thread-local variables
logic [3:0] minst_vc[2];

// Next-state combinational logic
always_comb begin : top_thread_comb_comb     // test_cthread_mif_array_ptr.cpp:145:5
    top_thread_comb_func;
end
function void top_thread_comb_func;
    logic [3:0] a;
    minst_vc[1] = 2;
    a = minst_vc[1];
endfunction

// Synchronous register update
always_ff @(posedge clk or posedge rst) 
begin : top_thread_comb_ff
    if ( rst ) begin
        logic [3:0] minst_vc[2];
        minst_vc[1] = 1;
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: top_thread_reg (test_cthread_mif_array_ptr.cpp:158:5) 

// Thread-local variables
logic [3:0] minst_vr[2];
logic [3:0] minst_vr_next[2];
logic top_thread_reg_PROC_STATE;
logic top_thread_reg_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : top_thread_reg_comb     // test_cthread_mif_array_ptr.cpp:158:5
    top_thread_reg_func;
end
function void top_thread_reg_func;
    logic [3:0] a;
    minst_vr_next = minst_vr;
    top_thread_reg_PROC_STATE_next = top_thread_reg_PROC_STATE;
    
    case (top_thread_reg_PROC_STATE)
        0: begin
            minst_vr_next[1] = 2;
            top_thread_reg_PROC_STATE_next = 1; return;    // test_cthread_mif_array_ptr.cpp:165:13;
        end
        1: begin
            a = minst_vr_next[1];
            minst_vr_next[1] = 2;
            top_thread_reg_PROC_STATE_next = 1; return;    // test_cthread_mif_array_ptr.cpp:165:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or posedge rst) 
begin : top_thread_reg_ff
    if ( rst ) begin
        minst_vr[1] <= 1;
        top_thread_reg_PROC_STATE <= 0;    // test_cthread_mif_array_ptr.cpp:161:9;
    end
    else begin
        minst_vr <= minst_vr_next;
        top_thread_reg_PROC_STATE <= top_thread_reg_PROC_STATE_next;
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: top_thread_ro (test_cthread_mif_array_ptr.cpp:171:5) 

// Next-state combinational logic
always_comb begin : top_thread_ro_comb     // test_cthread_mif_array_ptr.cpp:171:5
    top_thread_ro_func;
end
function void top_thread_ro_func;
    logic [3:0] a;
    a = minst_vo[1];
endfunction

// Synchronous register update
always_ff @(posedge clk or posedge rst) 
begin : top_thread_ro_ff
    if ( rst ) begin
    end
    else begin
    end
end

//------------------------------------------------------------------------------
// Clocked THREAD: top_thread_fcall (test_cthread_mif_array_ptr.cpp:181:5) 

// Thread-local variables
logic a2;
logic a_next1;
logic [1:0] top_thread_fcall_PROC_STATE;
logic [1:0] top_thread_fcall_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : top_thread_fcall_comb     // test_cthread_mif_array_ptr.cpp:181:5
    top_thread_fcall_func;
end
function void top_thread_fcall_func;
    logic b;
    a_next1 = a2;
    top_thread_fcall_PROC_STATE_next = top_thread_fcall_PROC_STATE;
    
    case (top_thread_fcall_PROC_STATE)
        0: begin
            // Call f_loc_reg() begin
            a_next1 = minst_vf[1];
            top_thread_fcall_PROC_STATE_next = 1; return;    // test_cthread_mif_array_ptr.cpp:107:9;
            // Call f_loc_reg() end
        end
        1: begin
            // Call f_loc_reg() begin
            b = a_next1;
            // Call f_loc_reg() end
            top_thread_fcall_PROC_STATE_next = 0; return;    // test_cthread_mif_array_ptr.cpp:187:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or posedge rst) 
begin : top_thread_fcall_ff
    if ( rst ) begin
        top_thread_fcall_PROC_STATE <= 0;    // test_cthread_mif_array_ptr.cpp:183:9;
    end
    else begin
        a2 <= a_next1;
        top_thread_fcall_PROC_STATE <= top_thread_fcall_PROC_STATE_next;
    end
end

endmodule


