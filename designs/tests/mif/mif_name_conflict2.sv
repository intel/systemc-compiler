//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: Top ()
//
module Top // "top"
(
    input logic clk
);

// Variables generated for SystemC signals
logic signed [31:0] minst_s;
logic signed [31:0] marr_s[2];

// Local parameters generated for C++ constants
localparam logic minst_a = 0;
localparam logic marr_a[2] = '{ 0, 0 };

//------------------------------------------------------------------------------
// Method process: minst_local_var (test_name_conflict2.cpp:28:5) 

always_comb 
begin : minst_local_var     // test_name_conflict2.cpp:28:5
    logic a;
    integer i;
    logic [3:0] x;
    logic signed [63:0] sum;
    x = '0;
    i = minst_s;
    sum = a ? i : 32'(x);
end

//------------------------------------------------------------------------------
// Method process: minst_member_var (test_name_conflict2.cpp:43:5) 

// Process-local variables
logic signed [31:0] minst_j;
logic signed [63:0] minst_sum;

always_comb 
begin : minst_member_var     // test_name_conflict2.cpp:43:5
    minst_j = minst_s;
    minst_sum = minst_j + 2'sd1;
end

//------------------------------------------------------------------------------
// Method process: minst_both_var (test_name_conflict2.cpp:51:5) 

// Process-local variables
logic signed [31:0] minst_i;

always_comb 
begin : minst_both_var     // test_name_conflict2.cpp:51:5
    integer i;
    integer i_1;
    i = '0;
    minst_s = i + 2'sd1;
    minst_i = 1;
    minst_s = minst_i + 3'sd2;
    i_1 = 2;
    minst_s = i_1 + 3'sd3;
end

//------------------------------------------------------------------------------
// Method process: marr_local_var (test_name_conflict2.cpp:28:5) 

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : marr_local_var_sct_i 

    always_comb 
    begin : marr_local_var     // test_name_conflict2.cpp:28:5
        logic a;
        integer i;
        logic [3:0] x;
        logic signed [63:0] sum;
        x = '0;
        i = marr_s[sct_i];
        sum = a ? i : 32'(x);
    end

end
endgenerate

//------------------------------------------------------------------------------
// Method process: marr_member_var (test_name_conflict2.cpp:43:5) 

// Process-local variables
logic signed [31:0] marr_j[2];
logic signed [63:0] marr_sum[2];

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : marr_member_var_sct_i 

    always_comb 
    begin : marr_member_var     // test_name_conflict2.cpp:43:5
        marr_j[sct_i] = marr_s[sct_i];
        marr_sum[sct_i] = marr_j[sct_i] + 2'sd1;
    end

end
endgenerate

//------------------------------------------------------------------------------
// Method process: marr_both_var (test_name_conflict2.cpp:51:5) 

// Process-local variables
logic signed [31:0] marr_i[2];

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : marr_both_var_sct_i 

    always_comb 
    begin : marr_both_var     // test_name_conflict2.cpp:51:5
        integer i;
        integer i_1;
        i = '0;
        marr_s[sct_i] = i + 2'sd1;
        marr_i[sct_i] = 1;
        marr_s[sct_i] = marr_i[sct_i] + 3'sd2;
        i_1 = 2;
        marr_s[sct_i] = i_1 + 3'sd3;
    end

end
endgenerate

endmodule


