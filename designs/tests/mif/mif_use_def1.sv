//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.24
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: Top ()
//
module Top // "top"
(
);

// Variables generated for SystemC signals
logic [7:0] mif_b[2];
logic [7:0] mif_c[2];
logic [7:0] mif2d_b[2][2];
logic [7:0] mif2d_c[2][2];
logic [31:0] s;
logic [31:0] t0;
logic [31:0] t1;
logic [31:0] t2;
logic [31:0] t3;
logic [31:0] t4;

//------------------------------------------------------------------------------
// Method process: mif_unkwLoc (test_use_def1.cpp:31:5) 

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : mif_unkwLoc_sct_i 

    always_comb 
    begin : mif_unkwLoc     // test_use_def1.cpp:31:5
        mif_c[sct_i] = mif_b[sct_i];
    end

end
endgenerate

//------------------------------------------------------------------------------
// Method process: mif2d_unkwLoc (test_use_def1.cpp:31:5) 

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : mif2d_unkwLoc_sct_i 
for (genvar sct_j = 0; sct_j != 2; sct_j = sct_j + 1) 
begin : mif2d_unkwLoc_sct_j 

    always_comb 
    begin : mif2d_unkwLoc     // test_use_def1.cpp:31:5
        mif2d_c[sct_i][sct_j] = mif2d_b[sct_i][sct_j];
    end

end
end
endgenerate

//------------------------------------------------------------------------------
// Method process: unkwMif (test_use_def1.cpp:85:5) 

always_comb 
begin : unkwMif     // test_use_def1.cpp:85:5
    integer unsigned port;
    logic [7:0] a;
    logic [7:0] b;
    port = s;
    a = s;
    // Call put() begin
    mif_b[port] = a;
    // Call put() end
    b = '0;
    // Call get() begin
    b = mif_b[port];
    // Call get() end
    t0 = b;
end

//------------------------------------------------------------------------------
// Method process: unkwMif2D (test_use_def1.cpp:94:5) 

always_comb 
begin : unkwMif2D     // test_use_def1.cpp:94:5
    integer unsigned port;
    logic [7:0] a;
    logic [7:0] b;
    port = s;
    a = s;
    // Call put() begin
    mif2d_b[port][port - 1] = a;
    // Call put() end
    b = '0;
    // Call get() begin
    b = mif2d_b[port][a];
    // Call get() end
    t1 = b;
end

//------------------------------------------------------------------------------
// Method process: unkwRec (test_use_def1.cpp:103:5) 

always_comb 
begin : unkwRec     // test_use_def1.cpp:103:5
    logic ss_a[2];
    logic [7:0] ss_b[2];
    integer unsigned port;
    logic [7:0] a;
    logic [7:0] b;
    port = s;
    a = s;
    // Call put() begin
    ss_b[port] = a;
    // Call put() end
    b = '0;
    // Call get() begin
    b = ss_b[port];
    // Call get() end
    t2 = b;
end

//------------------------------------------------------------------------------
// Method process: unkwRec2D (test_use_def1.cpp:113:5) 

always_comb 
begin : unkwRec2D     // test_use_def1.cpp:113:5
    logic ss_a[2][2];
    logic [7:0] ss_b[2][2];
    integer unsigned port;
    logic [7:0] a;
    logic [7:0] b;
    port = s;
    a = s;
    // Call put() begin
    ss_b[port][port + 1] = a;
    // Call put() end
    // Call put() begin
    ss_b[1][port] = a;
    // Call put() end
    // Call put() begin
    ss_b[port][1] = a;
    // Call put() end
    b = '0;
    // Call get() begin
    b = ss_b[port][a];
    // Call get() end
    t3 = b;
    // Call get() begin
    b = ss_b[port][0];
    // Call get() end
    t3 = b;
    // Call get() begin
    b = ss_b[0][port];
    // Call get() end
    t3 = b;
end

//------------------------------------------------------------------------------
// Method process: unkwMem (test_use_def1.cpp:133:5) 

// Process-local variables
logic [7:0] m1;
logic [7:0] m3;
logic [7:0] m4;

always_comb 
begin : unkwMem     // test_use_def1.cpp:133:5
    logic ss_a[2];
    logic [7:0] ss_b[2];
    integer unsigned port;
    port = s;
    m1 = s;
    m3 = s;
    // Call put() begin
    mif_b[port] = m1;
    // Call put() end
    // Call put() begin
    ss_b[port] = m3;
    // Call put() end
    // Call get() begin
    m4 = ss_b[port];
    // Call get() end
    t4 = m4;
end

endmodule


