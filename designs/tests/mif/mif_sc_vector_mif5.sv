//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.25
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: Top ()
//
module Top // "top"
(
    input logic clk
);

// Variables generated for SystemC signals
logic rstn;
logic [31:0] mif_b_mif_aa_resp[2];
logic [31:0] mif_b_mif_aa_t[2];
logic [31:0] mif_b_mif_a_resp[2][3];
logic [31:0] mif_b_mif_a_t[2][3];
logic [31:0] mif_b_result[2];
logic req[2];
logic [15:0] s;
logic mif_b_clk[2];
logic mif_b_rstn[2];
logic mif_b_req[2];
logic mif_b_mif_aa_clk[2];
logic mif_b_mif_aa_rstn[2];
logic mif_b_mif_a_clk[2][3];
logic mif_b_mif_a_rstn[2][3];

// Local parameters generated for C++ constants
localparam logic [31:0] mif_b_mif_a_mm[2][3] = '{ '{ 2, 2, 2 }, '{ 2, 2, 2 } };

// Assignments generated for C++ channel arrays
assign mif_b_clk[0] = clk;
assign mif_b_clk[1] = clk;
assign mif_b_rstn[0] = rstn;
assign mif_b_rstn[1] = rstn;
assign mif_b_req = req;
assign mif_b_mif_aa_clk = mif_b_clk;
assign mif_b_mif_aa_rstn = mif_b_rstn;
assign mif_b_mif_a_clk[0][0] = mif_b_clk[0];
assign mif_b_mif_a_clk[0][1] = mif_b_clk[0];
assign mif_b_mif_a_clk[0][2] = mif_b_clk[0];
assign mif_b_mif_a_clk[1][0] = mif_b_clk[1];
assign mif_b_mif_a_clk[1][1] = mif_b_clk[1];
assign mif_b_mif_a_clk[1][2] = mif_b_clk[1];
assign mif_b_mif_a_rstn[0][0] = mif_b_rstn[0];
assign mif_b_mif_a_rstn[0][1] = mif_b_rstn[0];
assign mif_b_mif_a_rstn[0][2] = mif_b_rstn[0];
assign mif_b_mif_a_rstn[1][0] = mif_b_rstn[1];
assign mif_b_mif_a_rstn[1][1] = mif_b_rstn[1];
assign mif_b_mif_a_rstn[1][2] = mif_b_rstn[1];

//------------------------------------------------------------------------------
// Method process: mif_aa_methProcA (test_sc_vector_mif5.cpp:32:5) 

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : mif_aa_methProcA_sct_i 

    always_comb 
    begin : mif_aa_methProcA     // test_sc_vector_mif5.cpp:32:5
        mif_b_mif_aa_t[sct_i] = mif_b_mif_aa_resp[sct_i];
    end

end
endgenerate

//------------------------------------------------------------------------------
// Clocked THREAD: mif_aa_threadProc (test_sc_vector_mif5.cpp:36:5) 

// Thread-local variables
logic [31:0] mif_b_mif_aa_resp_next[2];

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : mif_aa_threadProc_sct_i 

    // Next-state combinational logic
    always_comb begin : mif_aa_threadProc_comb     // test_sc_vector_mif5.cpp:36:5
        mif_aa_threadProc_func;
    end
    function void mif_aa_threadProc_func;
        mif_b_mif_aa_resp_next[sct_i] = mif_b_mif_aa_resp[sct_i];
        mif_b_mif_aa_resp_next[sct_i] = mif_b_mif_aa_resp[sct_i] + 1'd1;
    endfunction

    // Synchronous register update
    always_ff @(posedge mif_b_mif_aa_clk[sct_i] or negedge mif_b_mif_aa_rstn[sct_i]) 
    begin : mif_aa_threadProc_ff
        if ( ~mif_b_mif_aa_rstn[sct_i] ) begin
            mif_b_mif_aa_resp[sct_i] <= '0;
        end
        else begin
            mif_b_mif_aa_resp[sct_i] <= mif_b_mif_aa_resp_next[sct_i];
        end
    end

end
endgenerate

//------------------------------------------------------------------------------
// Method process: mif_a_methProcA (test_sc_vector_mif5.cpp:32:5) 

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : mif_a_methProcA_sct_i 
for (genvar sct_j = 0; sct_j != 3; sct_j = sct_j + 1) 
begin : mif_a_methProcA_sct_j 

    always_comb 
    begin : mif_a_methProcA     // test_sc_vector_mif5.cpp:32:5
        mif_b_mif_a_t[sct_i][sct_j] = mif_b_mif_a_resp[sct_i][sct_j];
    end

end
end
endgenerate

//------------------------------------------------------------------------------
// Clocked THREAD: mif_a_threadProc (test_sc_vector_mif5.cpp:36:5) 

// Thread-local variables
logic [31:0] mif_b_mif_a_resp_next[2][3];

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : mif_a_threadProc_sct_i 
for (genvar sct_j = 0; sct_j != 3; sct_j = sct_j + 1) 
begin : mif_a_threadProc_sct_j 

    // Next-state combinational logic
    always_comb begin : mif_a_threadProc_comb     // test_sc_vector_mif5.cpp:36:5
        mif_a_threadProc_func;
    end
    function void mif_a_threadProc_func;
        mif_b_mif_a_resp_next[sct_i][sct_j] = mif_b_mif_a_resp[sct_i][sct_j];
        mif_b_mif_a_resp_next[sct_i][sct_j] = mif_b_mif_a_resp[sct_i][sct_j] + 1'd1;
    endfunction

    // Synchronous register update
    always_ff @(posedge mif_b_mif_a_clk[sct_i][sct_j] or negedge mif_b_mif_a_rstn[sct_i][sct_j]) 
    begin : mif_a_threadProc_ff
        if ( ~mif_b_mif_a_rstn[sct_i][sct_j] ) begin
            mif_b_mif_a_resp[sct_i][sct_j] <= '0;
        end
        else begin
            mif_b_mif_a_resp[sct_i][sct_j] <= mif_b_mif_a_resp_next[sct_i][sct_j];
        end
    end

end
end
endgenerate

//------------------------------------------------------------------------------
// Method process: mif_b_methProcB (test_sc_vector_mif5.cpp:82:5) 

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : mif_b_methProcB_sct_i 

    always_comb 
    begin : mif_b_methProcB     // test_sc_vector_mif5.cpp:82:5
        integer j;
        integer unsigned TMP_0;
        integer unsigned TMP_1;
        mif_b_result[sct_i] = mif_b_mif_aa_resp[sct_i] + mif_b_mif_a_resp[sct_i][0];
        j = mif_b_mif_aa_resp[sct_i] + mif_b_mif_a_resp[sct_i][0];
        if (mif_b_req[sct_i])
        begin
            // Call getData() begin
            TMP_0 = mif_b_mif_aa_resp[sct_i];
            // Call getData() end
            mif_b_result[sct_i] = TMP_0 % 2'd3;
            // Call getData() begin
            TMP_1 = mif_b_mif_a_resp[sct_i][j];
            // Call getData() end
            mif_b_result[sct_i] = TMP_1 % 2'd3;
        end
    end

end
endgenerate

//------------------------------------------------------------------------------
// Method process: mainMeth (test_sc_vector_mif5.cpp:129:6) 

always_comb 
begin : mainMeth     // test_sc_vector_mif5.cpp:129:6
    integer unsigned l;
    integer unsigned TMP_0;
    integer unsigned TMP_1;
    // Call getRes() begin
    TMP_0 = mif_b_result[s] + mif_b_mif_aa_resp[s] + mif_b_mif_a_mm[s][0] + mif_b_mif_a_resp[s][1];
    // Call getRes() end
    l = TMP_0;
    // Call getData() begin
    TMP_1 = mif_b_mif_aa_resp[s];
    // Call getData() end
    l = TMP_1;
end

//------------------------------------------------------------------------------
// Clocked THREAD: mainThread (test_sc_vector_mif5.cpp:135:5) 

// Next-state combinational logic
always_comb begin : mainThread_comb     // test_sc_vector_mif5.cpp:135:5
    mainThread_func;
end
function void mainThread_func;
    integer unsigned l;
    integer unsigned TMP_0;
    l = mif_b_mif_aa_resp[s];
    l = mif_b_mif_a_resp[s][0];
    l = mif_b_mif_a_resp[s + 1][s + 2];
    // Call getRes() begin
    TMP_0 = mif_b_result[s] + mif_b_mif_aa_resp[s] + mif_b_mif_a_mm[s][0] + mif_b_mif_a_resp[s][1];
    // Call getRes() end
    l = TMP_0;
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : mainThread_ff
    if ( ~rstn ) begin
    end
    else begin
    end
end

endmodule


