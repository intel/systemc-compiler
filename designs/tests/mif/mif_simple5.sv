//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.14
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "tb_inst.top_inst"
(
    input logic clk,
    input logic rst,
    output logic minst2_b
);

// Variables generated for SystemC signals
logic a;
logic s;
logic minst1_s;
logic minst1_a;
logic minst2_clk;
logic minst2_rst;

// Assignments generated for C++ channel arrays
assign a = minst1_a;
assign minst2_clk = clk;
assign minst2_rst = rst;

//------------------------------------------------------------------------------
// Method process: minst1_mifMethod (test_mif_simple5.cpp:23:5) 

always_comb 
begin : minst1_mifMethod     // test_mif_simple5.cpp:23:5
    minst1_a = !minst1_s;
end

//------------------------------------------------------------------------------
// Clocked THREAD: minst2_mifThread (test_mif_simple5.cpp:48:5) 

// Thread-local variables
logic minst1_s_next;
logic minst2_b_next;
logic [1:0] minst1_var;
logic [1:0] minst1_var_next;

// Next-state combinational logic
always_comb begin : minst2_mifThread_comb     // test_mif_simple5.cpp:48:5
    minst2_mifThread_func;
end
function void minst2_mifThread_func;
    logic TMP_0;
    minst1_s_next = minst1_s;
    minst1_var_next = minst1_var;
    minst2_b_next = minst2_b;
    if (minst1_s == minst1_var_next)
    begin
        // Call func() begin
        TMP_0 = |(minst1_s + 1);
        // Call func() end
        minst2_b_next = TMP_0;
    end
endfunction

// Synchronous register update
always_ff @(posedge minst2_clk or posedge minst2_rst) 
begin : minst2_mifThread_ff
    if ( minst2_rst ) begin
        minst1_var <= 0;
        minst1_s <= 1;
        minst2_b <= 0;
    end
    else begin
        minst1_s <= minst1_s_next;
        minst2_b <= minst2_b_next;
        minst1_var <= minst1_var_next;
    end
end

//------------------------------------------------------------------------------
// Method process: topMethod (test_mif_simple5.cpp:83:5) 

always_comb 
begin : topMethod     // test_mif_simple5.cpp:83:5
    logic TMP_0;
    // Call func() begin
    TMP_0 = |(minst1_s + 1);
    // Call func() end
    s = a || TMP_0 || minst2_b;
end

endmodule


