//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.14
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: Top ()
//
module Top // "top"
(
    input logic clk
);

// Variables generated for SystemC signals
logic rst;
logic signed [31:0] t;
logic signed [31:0] z;
logic signed [31:0] minst_p[2];
logic minst_clk[2];
logic minst_rst[2];
logic signed [31:0] minst_in[2];
logic signed [31:0] minst_out[2];

// Assignments generated for C++ channel arrays
assign minst_clk[0] = clk;
assign minst_clk[1] = clk;
assign minst_rst[0] = rst;
assign minst_rst[1] = rst;
assign minst_in[0] = t;
assign minst_in[1] = z;
assign t = minst_out[0];
assign t = minst_out[1];

//------------------------------------------------------------------------------
// Method process: minst_ptrProc (test_mif_var_multiple_use.cpp:39:5) 

// Process-local variables
logic [3:0] minst_vp[2];

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : minst_ptrProc_sct_i 

    always_comb 
    begin : minst_ptrProc     // test_mif_var_multiple_use.cpp:39:5
        minst_p[sct_i] = minst_in[sct_i];
        minst_p[sct_i] = minst_vp[sct_i];
    end

end
endgenerate

//------------------------------------------------------------------------------
// Clocked THREAD: minst_thrProc (test_mif_var_multiple_use.cpp:44:5) 

// Thread-local variables
logic [3:0] minst_vp[2];

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : minst_thrProc_sct_i 

    // Next-state combinational logic
    always_comb begin : minst_thrProc_comb     // test_mif_var_multiple_use.cpp:44:5
        minst_thrProc_func;
    end
    function void minst_thrProc_func;
        minst_vp[sct_i] = 5;
    endfunction

    // Synchronous register update
    always_ff @(posedge minst_clk[sct_i] or posedge minst_rst[sct_i]) 
    begin : minst_thrProc_ff
        if ( minst_rst[sct_i] ) begin
            minst_p[sct_i] <= 4;
        end
        else begin
        end
    end

end
endgenerate

endmodule


