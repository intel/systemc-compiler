//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.14
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: Top ()
//
module Top // "top"
(
    input logic clk
);

// Variables generated for SystemC signals
logic minst_nrst[2];
logic minst_s[2];
logic signed [31:0] minst_t0[2];
logic signed [31:0] minst_t1[2];
logic minst_clk[2];

// Assignments generated for C++ channel arrays
assign minst_clk[0] = clk;
assign minst_clk[1] = clk;

//------------------------------------------------------------------------------
// Clocked THREAD: minst_memRecThread (test_array_record_cthread.cpp:44:5) 

// Thread-local variables
logic signed [31:0] minst_rr_rec_arr_c[2][2];
logic signed [31:0] minst_rr_rec_arr_c_next[2][2];
logic [3:0] minst_r_b[2][3];
logic [3:0] minst_r_b_next[2][3];
logic signed [31:0] minst_t0_next[2];
logic signed [31:0] minst_r_rec_c[2];
logic minst_rr_a[2];
logic [3:0] minst_rr_b[2][3];

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : minst_memRecThread_sct_i 

    // Next-state combinational logic
    always_comb begin : minst_memRecThread_comb     // test_array_record_cthread.cpp:44:5
        minst_memRecThread_func;
    end
    function void minst_memRecThread_func;
        integer i;
        minst_r_b_next[sct_i] = minst_r_b[sct_i];
        minst_rr_rec_arr_c_next[sct_i] = minst_rr_rec_arr_c[sct_i];
        minst_t0_next[sct_i] = minst_t0[sct_i];
        minst_r_b_next[sct_i][0] = 1;
        minst_r_rec_c[sct_i] = 2;
        minst_rr_a[sct_i] = minst_s[sct_i];
        minst_rr_b[sct_i][2] = 3;
        minst_rr_rec_arr_c_next[sct_i][1] = 4;
        i = minst_rr_rec_arr_c_next[sct_i][0] + minst_r_b_next[sct_i][1];
        minst_t0_next[sct_i] = i;
    endfunction

    // Synchronous register update
    always_ff @(posedge minst_clk[sct_i] or negedge minst_nrst[sct_i]) 
    begin : minst_memRecThread_ff
        if ( ~minst_nrst[sct_i] ) begin
        end
        else begin
            minst_rr_rec_arr_c[sct_i] <= minst_rr_rec_arr_c_next[sct_i];
            minst_r_b[sct_i] <= minst_r_b_next[sct_i];
            minst_t0[sct_i] <= minst_t0_next[sct_i];
        end
    end

end
endgenerate

//------------------------------------------------------------------------------
// Clocked THREAD: minst_memRecArrThread (test_array_record_cthread.cpp:66:5) 

// Thread-local variables
logic signed [31:0] minst_w_rec_c[2][2];
logic signed [31:0] minst_w_rec_c_next[2][2];
logic signed [31:0] minst_ww_rec_c[2][3];
logic signed [31:0] minst_ww_rec_c_next[2][3];
logic signed [31:0] minst_t1_next[2];
logic minst_w_a[2][2];
logic [3:0] minst_w_b[2][2][3];
logic signed [31:0] minst_w_rec_arr_c[2][2][2];
logic signed [31:0] minst_ww_rec_arr_c[2][3][2];

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : minst_memRecArrThread_sct_i 

    // Next-state combinational logic
    always_comb begin : minst_memRecArrThread_comb     // test_array_record_cthread.cpp:66:5
        minst_memRecArrThread_func;
    end
    function void minst_memRecArrThread_func;
        integer i;
        minst_t1_next[sct_i] = minst_t1[sct_i];
        minst_w_rec_c_next[sct_i] = minst_w_rec_c[sct_i];
        minst_ww_rec_c_next[sct_i] = minst_ww_rec_c[sct_i];
        minst_w_a[sct_i][0] = minst_s[sct_i];
        minst_w_b[sct_i][0][1] = 1;
        minst_w_rec_c_next[sct_i][1] = 2;
        minst_w_rec_arr_c[sct_i][0][1] = 3;
        minst_ww_rec_arr_c[sct_i][0][1] = 4;
        i = minst_w_rec_arr_c[sct_i][0][1] + minst_ww_rec_arr_c[sct_i][0][1] + minst_w_rec_c_next[sct_i][0] + minst_ww_rec_c_next[sct_i][0];
        minst_t1_next[sct_i] = i;
    endfunction

    // Synchronous register update
    always_ff @(posedge minst_clk[sct_i] or negedge minst_nrst[sct_i]) 
    begin : minst_memRecArrThread_ff
        if ( ~minst_nrst[sct_i] ) begin
        end
        else begin
            minst_w_rec_c[sct_i] <= minst_w_rec_c_next[sct_i];
            minst_ww_rec_c[sct_i] <= minst_ww_rec_c_next[sct_i];
            minst_t1[sct_i] <= minst_t1_next[sct_i];
        end
    end

end
endgenerate

endmodule


