//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.17
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: Top ()
//
module Top // "top"
(
    input logic clk
);

// Variables generated for SystemC signals
logic rstn;
logic [15:0] p_s[2];
logic [31:0] s;
logic p_clk[2];
logic p_rstn[2];

// Local parameters generated for C++ constants
localparam logic [31:0] p_C[2][2] = '{ '{ 11, 22 }, '{ 11, 22 } };

// Assignments generated for C++ channel arrays
assign p_clk[0] = clk;
assign p_clk[1] = clk;
assign p_rstn[0] = rstn;
assign p_rstn[1] = rstn;

//------------------------------------------------------------------------------
// Clocked THREAD: p_threadProc (test_sc_vector_mif2.cpp:36:5) 

// Thread-local variables
logic [31:0] p_req[2][3];
logic [31:0] p_req_next[2][3];
logic [15:0] p_data[2][3];
logic [15:0] p_data_next[2][3];
logic [15:0] p_s_next[2];

// Modular interfaces array generate block
generate 
for (genvar sct_i = 0; sct_i != 2; sct_i = sct_i + 1) 
begin : p_threadProc_sct_i 

    // Next-state combinational logic
    always_comb begin : p_threadProc_comb     // test_sc_vector_mif2.cpp:36:5
        p_threadProc_func;
    end
    function void p_threadProc_func;
        p_data_next[sct_i] = p_data[sct_i];
        p_req_next[sct_i] = p_req[sct_i];
        p_s_next[sct_i] = p_s[sct_i];
        for (integer i_1 = 0; i_1 < 3; ++i_1)
        begin
            p_data_next[sct_i][i_1] = |p_req_next[sct_i][i_1] ? i_1 : p_C[sct_i][i_1 % 2];
            p_req_next[sct_i][i_1]++;
        end
        p_s_next[sct_i] = p_data_next[sct_i][p_s[sct_i]];
    endfunction

    // Synchronous register update
    always_ff @(posedge p_clk[sct_i] or negedge p_rstn[sct_i]) 
    begin : p_threadProc_ff
        if ( ~p_rstn[sct_i] ) begin
            for (integer i = 0; i < 3; ++i)
            begin
                p_data[sct_i][i] <= 0;
                p_req[sct_i][i] <= 1;
            end
        end
        else begin
            p_req[sct_i] <= p_req_next[sct_i];
            p_data[sct_i] <= p_data_next[sct_i];
            p_s[sct_i] <= p_s_next[sct_i];
        end
    end

end
endgenerate

//------------------------------------------------------------------------------
// Clocked THREAD: mainProc (test_sc_vector_mif2.cpp:81:5) 

// Thread-local variables
logic [15:0] res;
logic [15:0] res_next;
logic mainProc_PROC_STATE;
logic mainProc_PROC_STATE_next;

// Next-state combinational logic
always_comb begin : mainProc_comb     // test_sc_vector_mif2.cpp:81:5
    mainProc_func;
end
function void mainProc_func;
    integer unsigned u;
    logic [15:0] TMP_0;
    integer indx;
    res_next = res;
    mainProc_PROC_STATE_next = mainProc_PROC_STATE;
    
    case (mainProc_PROC_STATE)
        0: begin
            u = s;
            indx = u + 1;
            // Call getData() begin
            TMP_0 = p_s[u] + indx;
            // Call getData() end
            res_next = TMP_0;
            mainProc_PROC_STATE_next = 1; return;    // test_sc_vector_mif2.cpp:88:13;
        end
        1: begin
            res_next++;
            u = s;
            indx = u + 1;
            // Call getData() begin
            TMP_0 = p_s[u] + indx;
            // Call getData() end
            res_next = TMP_0;
            mainProc_PROC_STATE_next = 1; return;    // test_sc_vector_mif2.cpp:88:13;
        end
    endcase
endfunction

// Synchronous register update
always_ff @(posedge clk or negedge rstn) 
begin : mainProc_ff
    if ( ~rstn ) begin
        mainProc_PROC_STATE <= 0;    // test_sc_vector_mif2.cpp:82:9;
    end
    else begin
        res <= res_next;
        mainProc_PROC_STATE <= mainProc_PROC_STATE_next;
    end
end

endmodule


