//==============================================================================
//
// The code is generated by Intel Compiler for SystemC, version 1.6.19
// see more information at https://github.com/intel/systemc-compiler
//
//==============================================================================

//==============================================================================
//
// Module: top ()
//
module top // "t_inst"
(
);

// Variables generated for SystemC signals

// Local parameters generated for C++ constants
localparam logic [15:0] C1 = 42;
localparam logic [31:0] C2 = 42;

//------------------------------------------------------------------------------
// Method process: assign_proc (test_const_negative.cpp:74:5) 

always_comb 
begin : assign_proc     // test_const_negative.cpp:74:5
    integer neg_val;
    integer j;
    logic [15:0] l1;
    integer unsigned neg_val_1;
    integer unsigned j_1;
    logic [15:0] l1_1;
    logic signed [15:0] neg_val_2;
    logic signed [15:0] j_2;
    logic [15:0] l1_2;
    logic [15:0] neg_val_3;
    logic [15:0] j_3;
    logic [15:0] l1_3;
    logic [32:0] neg_val_4;
    logic [32:0] j_4;
    logic [15:0] l1_4;
    logic signed [32:0] neg_val_5;
    logic signed [32:0] j_5;
    logic [15:0] l1_5;
    logic [32:0] neg_val_6;
    logic [32:0] j_6;
    logic [15:0] l1_6;
    logic signed [15:0] neg_val_7;
    logic signed [15:0] j_7;
    logic [15:0] l1_7;
    logic [15:0] k;
    logic [15:0] l2;
    logic signed [15:0] j_8;
    neg_val = -7'sd42;
    // Call assign() begin
    j = 42;
    `ifndef INTEL_SVA_OFF
        assert (j == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = -7'sd42;
    `ifndef INTEL_SVA_OFF
        assert (j == neg_val) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = C1;
    `ifndef INTEL_SVA_OFF
        assert (j == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = -C1;
    `ifndef INTEL_SVA_OFF
        assert (j == neg_val) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    l1 = 42;
    j = -l1;
    `ifndef INTEL_SVA_OFF
        assert (j == neg_val) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call assign() end
    neg_val_1 = 32'hFFFFFFD6;
    // Call assign() begin
    j_1 = 42;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = -7'sd42;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == neg_val_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = C1;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = -C1;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == neg_val_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    l1_1 = 42;
    j_1 = -l1_1;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == neg_val_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call assign() end
    neg_val_2 = -7'sd42;
    // Call assign() begin
    j_2 = 42;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = -7'sd42;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == neg_val_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = C1;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = -C1;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == neg_val_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    l1_2 = 42;
    j_2 = -l1_2;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == neg_val_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call assign() end
    neg_val_3 = 32'hFFFFFFD6;
    // Call assign() begin
    j_3 = 42;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = -7'sd42;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == neg_val_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = C1;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = -C1;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == neg_val_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    l1_3 = 42;
    j_3 = -l1_3;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == neg_val_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call assign() end
    neg_val_4 = 33'h1FFFFFFD6;
    // Call assign() begin
    j_4 = 42;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = -7'sd42;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == neg_val_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = C1;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = -C1;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == neg_val_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    l1_4 = 42;
    j_4 = -l1_4;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == neg_val_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call assign() end
    neg_val_5 = -7'sd42;
    // Call assign() begin
    j_5 = 42;
    `ifndef INTEL_SVA_OFF
        assert (j_5 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5 = -7'sd42;
    `ifndef INTEL_SVA_OFF
        assert (j_5 == neg_val_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5 = C1;
    `ifndef INTEL_SVA_OFF
        assert (j_5 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5 = -C1;
    `ifndef INTEL_SVA_OFF
        assert (j_5 == neg_val_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    l1_5 = 42;
    j_5 = -l1_5;
    `ifndef INTEL_SVA_OFF
        assert (j_5 == neg_val_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call assign() end
    neg_val_6 = 33'h1FFFFFFD6;
    // Call assign() begin
    j_6 = 42;
    `ifndef INTEL_SVA_OFF
        assert (j_6 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6 = -7'sd42;
    `ifndef INTEL_SVA_OFF
        assert (j_6 == neg_val_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6 = C1;
    `ifndef INTEL_SVA_OFF
        assert (j_6 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6 = -C1;
    `ifndef INTEL_SVA_OFF
        assert (j_6 == neg_val_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    l1_6 = 42;
    j_6 = -l1_6;
    `ifndef INTEL_SVA_OFF
        assert (j_6 == neg_val_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call assign() end
    neg_val_7 = 32'hFFFFFFD6;
    // Call assign_unsigned() begin
    j_7 = C2;
    `ifndef INTEL_SVA_OFF
        assert (j_7 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_7 = -C2;
    `ifndef INTEL_SVA_OFF
        assert (j_7 == neg_val_7) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call assign_unsigned() end
    // Call assign_bigint() begin
    l1_7 = 42;
    k = -signed'({1'b0, l1_7});
    `ifndef INTEL_SVA_OFF
        assert (k == 65494) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    l2 = 42;
    j_8 = -signed'({1'b0, l2});
    `ifndef INTEL_SVA_OFF
        assert (j_8 == -7'sd42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call assign_bigint() end
end

//------------------------------------------------------------------------------
// Method process: unary_proc (test_const_negative.cpp:163:5) 

always_comb 
begin : unary_proc     // test_const_negative.cpp:163:5
    integer neg_val1;
    integer neg_val2;
    integer j;
    logic b;
    integer unsigned neg_val1_1;
    integer unsigned neg_val2_1;
    integer unsigned j_1;
    logic b_1;
    logic signed [15:0] neg_val1_2;
    logic signed [15:0] neg_val2_2;
    logic signed [15:0] j_2;
    logic b_2;
    logic [15:0] neg_val1_3;
    logic [15:0] neg_val2_3;
    logic [15:0] j_3;
    logic b_3;
    logic [32:0] neg_val1_4;
    logic [32:0] neg_val2_4;
    logic [32:0] j_4;
    logic b_4;
    logic signed [32:0] neg_val1_5;
    logic signed [32:0] neg_val2_5;
    logic signed [32:0] j_5;
    logic b_5;
    logic [32:0] neg_val1_6;
    logic [32:0] neg_val2_6;
    logic [32:0] j_6;
    logic b_6;
    neg_val1 = -2'sd1; neg_val2 = -7'sd42;
    // Call unary() begin
    j = 1;
    j--;
    j--;
    `ifndef INTEL_SVA_OFF
        assert (j == neg_val1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j++;
    j++;
    `ifndef INTEL_SVA_OFF
        assert (j == 1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = -C1;
    j = j;
    `ifndef INTEL_SVA_OFF
        assert (j == neg_val2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = -C1;
    j = -j;
    `ifndef INTEL_SVA_OFF
        assert (j == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = -C1;
    b = |j;
    `ifndef INTEL_SVA_OFF
        assert (b) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    b = !(|j);
    `ifndef INTEL_SVA_OFF
        assert (!b) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = ~j;
    `ifndef INTEL_SVA_OFF
        assert (j == 41) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call unary() end
    neg_val1_1 = 32'hFFFFFFFF; neg_val2_1 = 32'hFFFFFFD6;
    // Call unary() begin
    j_1 = 1;
    j_1--;
    j_1--;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == neg_val1_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1++;
    j_1++;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == 1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = -C1;
    j_1 = j_1;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == neg_val2_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = -C1;
    j_1 = -j_1;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = -C1;
    b_1 = |j_1;
    `ifndef INTEL_SVA_OFF
        assert (b_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    b_1 = !(|j_1);
    `ifndef INTEL_SVA_OFF
        assert (!b_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = ~j_1;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == 41) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call unary() end
    neg_val1_2 = -2'sd1; neg_val2_2 = -7'sd42;
    // Call unary() begin
    j_2 = 1;
    j_2--;
    j_2--;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == neg_val1_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2++;
    j_2++;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == 1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = -C1;
    j_2 = j_2;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == neg_val2_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = -C1;
    j_2 = -j_2;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = -C1;
    b_2 = |j_2;
    `ifndef INTEL_SVA_OFF
        assert (b_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    b_2 = !(|j_2);
    `ifndef INTEL_SVA_OFF
        assert (!b_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = ~j_2;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == 41) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call unary() end
    neg_val1_3 = 65535; neg_val2_3 = 65494;
    // Call unary() begin
    j_3 = 1;
    j_3--;
    j_3--;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == neg_val1_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3++;
    j_3++;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == 1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = -C1;
    j_3 = j_3;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == neg_val2_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = -C1;
    j_3 = -j_3;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = -C1;
    b_3 = |j_3;
    `ifndef INTEL_SVA_OFF
        assert (b_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    b_3 = !(|j_3);
    `ifndef INTEL_SVA_OFF
        assert (!b_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = ~j_3;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == 41) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call unary() end
    neg_val1_4 = 33'h1FFFFFFFF; neg_val2_4 = 33'h1FFFFFFD6;
    // Call unary() begin
    j_4 = 1;
    j_4--;
    j_4--;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == neg_val1_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4++;
    j_4++;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == 1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = -C1;
    j_4 = j_4;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == neg_val2_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = -C1;
    j_4 = -j_4;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = -C1;
    b_4 = |j_4;
    `ifndef INTEL_SVA_OFF
        assert (b_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    b_4 = !(|j_4);
    `ifndef INTEL_SVA_OFF
        assert (!b_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = ~j_4;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == 41) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call unary() end
    neg_val1_5 = -2'sd1; neg_val2_5 = -7'sd42;
    // Call unary_bigint() begin
    j_5 = 1;
    j_5--;
    j_5--;
    `ifndef INTEL_SVA_OFF
        assert (j_5 == neg_val1_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5++;
    j_5++;
    `ifndef INTEL_SVA_OFF
        assert (j_5 == 1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5 = -C1;
    j_5 = j_5;
    `ifndef INTEL_SVA_OFF
        assert (j_5 == neg_val2_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5 = -C1;
    j_5 = -j_5;
    `ifndef INTEL_SVA_OFF
        assert (j_5 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5 = -C1;
    b_5 = |64'(j_5);
    `ifndef INTEL_SVA_OFF
        assert (b_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    b_5 = !(|64'(j_5));
    `ifndef INTEL_SVA_OFF
        assert (!b_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call unary_bigint() end
    neg_val1_6 = 33'h1FFFFFFFF; neg_val2_6 = 33'h1FFFFFFD6;
    // Call unary_bigint() begin
    j_6 = 1;
    j_6--;
    j_6--;
    `ifndef INTEL_SVA_OFF
        assert (j_6 == neg_val1_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6++;
    j_6++;
    `ifndef INTEL_SVA_OFF
        assert (j_6 == 1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6 = -C1;
    j_6 = j_6;
    `ifndef INTEL_SVA_OFF
        assert (j_6 == neg_val2_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6 = -C1;
    j_6 = -signed'({1'b0, j_6});
    `ifndef INTEL_SVA_OFF
        assert (j_6 == 42) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6 = -C1;
    b_6 = |64'(j_6);
    `ifndef INTEL_SVA_OFF
        assert (b_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    b_6 = !(|64'(j_6));
    `ifndef INTEL_SVA_OFF
        assert (!b_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call unary_bigint() end
end

//------------------------------------------------------------------------------
// Method process: binary_proc (test_const_negative.cpp:242:5) 

always_comb 
begin : binary_proc     // test_const_negative.cpp:242:5
    integer neg_val1;
    integer neg_val2;
    integer neg_val3;
    logic doDiv;
    integer j;
    integer r;
    integer unsigned neg_val1_1;
    integer unsigned neg_val2_1;
    integer unsigned neg_val3_1;
    logic doDiv_1;
    integer unsigned j_1;
    integer unsigned r_1;
    logic signed [15:0] neg_val1_2;
    logic signed [15:0] neg_val2_2;
    logic signed [15:0] neg_val3_2;
    logic doDiv_2;
    logic signed [15:0] j_2;
    logic signed [15:0] r_2;
    logic [15:0] neg_val1_3;
    logic [15:0] neg_val2_3;
    logic [15:0] neg_val3_3;
    logic doDiv_3;
    logic [15:0] j_3;
    logic [15:0] r_3;
    logic [32:0] neg_val1_4;
    logic [32:0] neg_val2_4;
    logic [32:0] neg_val3_4;
    logic doDiv_4;
    logic [32:0] j_4;
    logic [32:0] r_4;
    logic signed [32:0] neg_val1_5;
    logic signed [32:0] neg_val2_5;
    logic signed [32:0] neg_val3_5;
    logic doDiv_5;
    logic signed [32:0] j_5;
    logic signed [32:0] r_5;
    logic [32:0] neg_val1_6;
    logic [32:0] neg_val2_6;
    logic [32:0] neg_val3_6;
    logic doDiv_6;
    logic [32:0] j_6;
    logic [32:0] r_6;
    logic [15:0] j_7;
    logic [15:0] r_7;
    logic signed [15:0] y;
    logic signed [15:0] z;
    logic [15:0] l1;
    logic [15:0] k;
    logic [15:0] l2;
    logic signed [15:0] jj;
    neg_val1 = -7'sd41; neg_val2 = -8'sd84; neg_val3 = -8'sd84; doDiv = 1;
    // Call binary() begin
    j = -C1;
    r = j + 1;
    `ifndef INTEL_SVA_OFF
        assert (r == neg_val1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r = -C1 + j;
    r = j - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r == neg_val1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r = -C1 - (-j);
    r = -C1 - j;
    r = j * 1 - 1 * (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r == neg_val1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r = (-j) * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (r == neg_val2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r = -C1 * 2;
    `ifndef INTEL_SVA_OFF
        assert (r == neg_val2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r = j / 1 - 1 / (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r == neg_val1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r = 35'(-j * 4) / (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (r == neg_val3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call binary() end
    neg_val1_1 = 32'hFFFFFFD7; neg_val2_1 = 32'hFFFFFFAC; neg_val3_1 = 0; doDiv_1 = 0;
    // Call binary() begin
    j_1 = -C1;
    r_1 = j_1 + 1;
    `ifndef INTEL_SVA_OFF
        assert (r_1 == neg_val1_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_1 = -C1 + j_1;
    r_1 = j_1 - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_1 == neg_val1_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_1 = -C1 - (-j_1);
    r_1 = -C1 - j_1;
    r_1 = j_1 * 1 - 1 * (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_1 == neg_val1_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_1 = (-j_1) * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (r_1 == neg_val2_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_1 = -C1 * 2;
    `ifndef INTEL_SVA_OFF
        assert (r_1 == neg_val2_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call binary() end
    neg_val1_2 = -7'sd41; neg_val2_2 = -8'sd84; neg_val3_2 = -8'sd84; doDiv_2 = 1;
    // Call binary() begin
    j_2 = -C1;
    r_2 = j_2 + 1;
    `ifndef INTEL_SVA_OFF
        assert (r_2 == neg_val1_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_2 = -C1 + j_2;
    r_2 = j_2 - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_2 == neg_val1_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_2 = -C1 - (-j_2);
    r_2 = -C1 - j_2;
    r_2 = j_2 * 1 - 1 * (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_2 == neg_val1_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_2 = (-j_2) * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (r_2 == neg_val2_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_2 = -C1 * 2;
    `ifndef INTEL_SVA_OFF
        assert (r_2 == neg_val2_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_2 = j_2 / 1 - 1 / (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_2 == neg_val1_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_2 = 19'(-j_2 * 4) / (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (r_2 == neg_val3_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call binary() end
    neg_val1_3 = 65495; neg_val2_3 = 65452; neg_val3_3 = 0; doDiv_3 = 0;
    // Call binary() begin
    j_3 = -C1;
    r_3 = j_3 + 1;
    `ifndef INTEL_SVA_OFF
        assert (r_3 == neg_val1_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_3 = -C1 + j_3;
    r_3 = j_3 - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_3 == neg_val1_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_3 = -C1 - (-j_3);
    r_3 = -C1 - j_3;
    r_3 = j_3 * 1 - 1 * (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_3 == neg_val1_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_3 = (-j_3) * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (r_3 == neg_val2_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_3 = -C1 * 2;
    `ifndef INTEL_SVA_OFF
        assert (r_3 == neg_val2_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call binary() end
    neg_val1_4 = 33'h1FFFFFFD7; neg_val2_4 = 33'h1FFFFFFAC; neg_val3_4 = 0; doDiv_4 = 0;
    // Call binary() begin
    j_4 = -C1;
    r_4 = j_4 + 1;
    `ifndef INTEL_SVA_OFF
        assert (r_4 == neg_val1_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_4 = -C1 + j_4;
    r_4 = j_4 - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_4 == neg_val1_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_4 = -C1 - (-j_4);
    r_4 = -C1 - j_4;
    r_4 = j_4 * 1 - 1 * (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_4 == neg_val1_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_4 = (-j_4) * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (r_4 == neg_val2_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_4 = -C1 * 2;
    `ifndef INTEL_SVA_OFF
        assert (r_4 == neg_val2_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call binary() end
    neg_val1_5 = -7'sd41; neg_val2_5 = -8'sd84; neg_val3_5 = -8'sd84; doDiv_5 = 1;
    // Call binary() begin
    j_5 = -C1;
    r_5 = j_5 + 1;
    `ifndef INTEL_SVA_OFF
        assert (r_5 == neg_val1_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_5 = -C1 + j_5;
    r_5 = j_5 - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_5 == neg_val1_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_5 = -C1 - (-j_5);
    r_5 = -C1 - j_5;
    r_5 = j_5 * 1 - 1 * (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_5 == neg_val1_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_5 = (-j_5) * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (r_5 == neg_val2_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_5 = -C1 * 2;
    `ifndef INTEL_SVA_OFF
        assert (r_5 == neg_val2_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_5 = j_5 / 1 - 1 / (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_5 == neg_val1_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_5 = 36'(-j_5 * 4) / (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (r_5 == neg_val3_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call binary() end
    neg_val1_6 = 33'h1FFFFFFD7; neg_val2_6 = 33'h1FFFFFFAC; neg_val3_6 = 33'h1FFFFFFAC; doDiv_6 = 1;
    // Call binary() begin
    j_6 = -C1;
    r_6 = signed'({1'b0, j_6}) + 1;
    `ifndef INTEL_SVA_OFF
        assert (r_6 == neg_val1_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_6 = -C1 + j_6;
    r_6 = signed'({1'b0, j_6}) - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_6 == neg_val1_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_6 = -C1 - (-signed'({1'b0, j_6}));
    r_6 = -C1 - signed'({1'b0, j_6});
    r_6 = signed'({1'b0, j_6}) * 1 - 1 * (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_6 == neg_val1_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_6 = (-signed'({1'b0, j_6})) * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (r_6 == neg_val2_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_6 = -C1 * 2;
    `ifndef INTEL_SVA_OFF
        assert (r_6 == neg_val2_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_6 = signed'({1'b0, j_6}) / 1 - 1 / (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_6 == neg_val1_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_6 = 36'(-signed'({1'b0, j_6}) * 4) / (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (r_6 == neg_val3_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call binary() end
    // Call binary_bigint() begin
    j_7 = -7'sd42;
    r_7 = signed'({1'b0, j_7}) / 1 - 1 / (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (r_7 == 65495) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    r_7 = 19'(-signed'({1'b0, j_7}) * 4) / (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (r_7 == 65452) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    y = -4'sd5;
    z = y - signed'({1'b0, j_7});
    `ifndef INTEL_SVA_OFF
        assert (z == 37) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    z = -y * signed'({1'b0, j_7});
    `ifndef INTEL_SVA_OFF
        assert (z == -9'sd210) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    l1 = 42;
    k = 1 + (-signed'({1'b0, l1}));
    `ifndef INTEL_SVA_OFF
        assert (k == 65495) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    l2 = 42;
    jj = 1 + (-signed'({1'b0, l2}));
    `ifndef INTEL_SVA_OFF
        assert (jj == -7'sd41) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call binary_bigint() end
end

//------------------------------------------------------------------------------
// Method process: compound_proc (test_const_negative.cpp:342:5) 

always_comb 
begin : compound_proc     // test_const_negative.cpp:342:5
    integer neg_val1;
    integer neg_val2;
    integer neg_val3;
    integer j;
    integer unsigned neg_val1_1;
    integer unsigned neg_val2_1;
    integer unsigned neg_val3_1;
    integer unsigned j_1;
    logic signed [15:0] neg_val1_2;
    logic signed [15:0] neg_val2_2;
    logic signed [15:0] neg_val3_2;
    logic signed [15:0] j_2;
    logic [15:0] neg_val1_3;
    logic [15:0] neg_val2_3;
    logic [15:0] neg_val3_3;
    logic [15:0] j_3;
    logic [32:0] neg_val1_4;
    logic [32:0] neg_val2_4;
    logic [32:0] neg_val3_4;
    logic [32:0] j_4;
    logic signed [32:0] neg_val1_5;
    logic signed [32:0] neg_val2_5;
    logic signed [32:0] neg_val3_5;
    logic signed [32:0] j_5;
    logic [32:0] neg_val1_6;
    logic [32:0] neg_val2_6;
    logic [32:0] neg_val3_6;
    logic [32:0] j_6;
    logic [15:0] j_7;
    logic signed [15:0] y;
    logic [15:0] l2;
    logic signed [15:0] jj;
    neg_val1 = -7'sd41; neg_val2 = -8'sd84; neg_val3 = -8'sd84;
    // Call compound() begin
    j = -C1;
    j = j + 1;
    `ifndef INTEL_SVA_OFF
        assert (j == neg_val1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = -C1;
    j = j + (-C1);
    j = -C1;
    j = j - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (j == neg_val1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = -C1;
    j = j - (-j);
    j = -C1;
    j = j - (-C1);
    j = -C1;
    j = j * 1;
    `ifndef INTEL_SVA_OFF
        assert (j + 1 == neg_val1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = C1;
    j = j * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (j == neg_val2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = -C1;
    j = j * 2;
    `ifndef INTEL_SVA_OFF
        assert (j == neg_val2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = -C1 + 1;
    j = j / 1;
    `ifndef INTEL_SVA_OFF
        assert (j == neg_val1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j = -C1;
    j = j * (-4'sd4);
    j = j / (-3'sd2);
    // Call compound() end
    neg_val1_1 = 32'hFFFFFFD7; neg_val2_1 = 32'hFFFFFFAC; neg_val3_1 = 0;
    // Call compound() begin
    j_1 = -C1;
    j_1 = j_1 + 1;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == neg_val1_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = -C1;
    j_1 = j_1 + (-C1);
    j_1 = -C1;
    j_1 = j_1 - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (j_1 == neg_val1_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = -C1;
    j_1 = j_1 - (-j_1);
    j_1 = -C1;
    j_1 = j_1 - (-C1);
    j_1 = -C1;
    j_1 = j_1 * 1;
    `ifndef INTEL_SVA_OFF
        assert (j_1 + 1 == neg_val1_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = C1;
    j_1 = j_1 * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (j_1 == neg_val2_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = -C1;
    j_1 = j_1 * 2;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == neg_val2_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = -C1 + 1;
    j_1 = j_1 / 1;
    `ifndef INTEL_SVA_OFF
        assert (j_1 == neg_val1_1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_1 = -C1;
    j_1 = j_1 * (-4'sd4);
    j_1 = j_1 / (-3'sd2);
    // Call compound() end
    neg_val1_2 = -7'sd41; neg_val2_2 = -8'sd84; neg_val3_2 = -8'sd84;
    // Call compound() begin
    j_2 = -C1;
    j_2 = j_2 + 1;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == neg_val1_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = -C1;
    j_2 = j_2 + (-C1);
    j_2 = -C1;
    j_2 = j_2 - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (j_2 == neg_val1_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = -C1;
    j_2 = j_2 - (-j_2);
    j_2 = -C1;
    j_2 = j_2 - (-C1);
    j_2 = -C1;
    j_2 = j_2 * 1;
    `ifndef INTEL_SVA_OFF
        assert (j_2 + 1 == neg_val1_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = C1;
    j_2 = j_2 * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (j_2 == neg_val2_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = -C1;
    j_2 = j_2 * 2;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == neg_val2_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = -C1 + 1;
    j_2 = j_2 / 1;
    `ifndef INTEL_SVA_OFF
        assert (j_2 == neg_val1_2) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_2 = -C1;
    j_2 = j_2 * (-4'sd4);
    j_2 = j_2 / (-3'sd2);
    // Call compound() end
    neg_val1_3 = 65495; neg_val2_3 = 65452; neg_val3_3 = 0;
    // Call compound() begin
    j_3 = -C1;
    j_3 = j_3 + 1;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == neg_val1_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = -C1;
    j_3 = j_3 + (-C1);
    j_3 = -C1;
    j_3 = j_3 - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (j_3 == neg_val1_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = -C1;
    j_3 = j_3 - (-j_3);
    j_3 = -C1;
    j_3 = j_3 - (-C1);
    j_3 = -C1;
    j_3 = j_3 * 1;
    `ifndef INTEL_SVA_OFF
        assert (j_3 + 1 == neg_val1_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = C1;
    j_3 = j_3 * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (j_3 == neg_val2_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = -C1;
    j_3 = j_3 * 2;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == neg_val2_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = -C1 + 1;
    j_3 = j_3 / 1;
    `ifndef INTEL_SVA_OFF
        assert (j_3 == neg_val1_3) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_3 = -C1;
    j_3 = j_3 * (-4'sd4);
    j_3 = j_3 / (-3'sd2);
    // Call compound() end
    neg_val1_4 = 33'h1FFFFFFD7; neg_val2_4 = 33'h1FFFFFFAC; neg_val3_4 = 0;
    // Call compound() begin
    j_4 = -C1;
    j_4 = j_4 + 1;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == neg_val1_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = -C1;
    j_4 = j_4 + (-C1);
    j_4 = -C1;
    j_4 = j_4 - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (j_4 == neg_val1_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = -C1;
    j_4 = j_4 - (-j_4);
    j_4 = -C1;
    j_4 = j_4 - (-C1);
    j_4 = -C1;
    j_4 = j_4 * 1;
    `ifndef INTEL_SVA_OFF
        assert (j_4 + 1 == neg_val1_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = C1;
    j_4 = j_4 * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (j_4 == neg_val2_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = -C1;
    j_4 = j_4 * 2;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == neg_val2_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = -C1 + 1;
    j_4 = j_4 / 1;
    `ifndef INTEL_SVA_OFF
        assert (j_4 == neg_val1_4) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_4 = -C1;
    j_4 = j_4 * (-4'sd4);
    j_4 = j_4 / (-3'sd2);
    // Call compound() end
    neg_val1_5 = -7'sd41; neg_val2_5 = -8'sd84; neg_val3_5 = -8'sd84;
    // Call compound() begin
    j_5 = -C1;
    j_5 = j_5 + 1;
    `ifndef INTEL_SVA_OFF
        assert (j_5 == neg_val1_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5 = -C1;
    j_5 = j_5 + (-C1);
    j_5 = -C1;
    j_5 = j_5 - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (j_5 == neg_val1_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5 = -C1;
    j_5 = j_5 - (-j_5);
    j_5 = -C1;
    j_5 = j_5 - (-C1);
    j_5 = -C1;
    j_5 = j_5 * 1;
    `ifndef INTEL_SVA_OFF
        assert (j_5 + 1 == neg_val1_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5 = C1;
    j_5 = j_5 * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (j_5 == neg_val2_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5 = -C1;
    j_5 = j_5 * 2;
    `ifndef INTEL_SVA_OFF
        assert (j_5 == neg_val2_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5 = -C1 + 1;
    j_5 = j_5 / 1;
    `ifndef INTEL_SVA_OFF
        assert (j_5 == neg_val1_5) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_5 = -C1;
    j_5 = j_5 * (-4'sd4);
    j_5 = j_5 / (-3'sd2);
    // Call compound() end
    neg_val1_6 = 33'h1FFFFFFD7; neg_val2_6 = 33'h1FFFFFFAC; neg_val3_6 = 33'h1FFFFFFAC;
    // Call compound() begin
    j_6 = -C1;
    j_6 = j_6 + 1;
    `ifndef INTEL_SVA_OFF
        assert (j_6 == neg_val1_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6 = -C1;
    j_6 = j_6 + (-C1);
    j_6 = -C1;
    j_6 = j_6 - (-2'sd1);
    `ifndef INTEL_SVA_OFF
        assert (j_6 == neg_val1_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6 = -C1;
    j_6 = j_6 - (-signed'({1'b0, j_6}));
    j_6 = -C1;
    j_6 = j_6 - (-C1);
    j_6 = -C1;
    j_6 = j_6 * 1;
    `ifndef INTEL_SVA_OFF
        assert (signed'({1'b0, j_6}) + 1 == neg_val1_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6 = C1;
    j_6 = j_6 * (-3'sd2);
    `ifndef INTEL_SVA_OFF
        assert (j_6 == neg_val2_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6 = -C1;
    j_6 = j_6 * 2;
    `ifndef INTEL_SVA_OFF
        assert (j_6 == neg_val2_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6 = -C1 + 1;
    j_6 = j_6 / 1;
    `ifndef INTEL_SVA_OFF
        assert (j_6 == neg_val1_6) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_6 = -C1;
    j_6 = j_6 * (-4'sd4);
    j_6 = j_6 / (-3'sd2);
    // Call compound() end
    // Call compound_bigint() begin
    j_7 = -7'sd42;
    j_7 = j_7 / 1;
    `ifndef INTEL_SVA_OFF
        assert (j_7 == 65494) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    j_7 = -7'sd42;
    j_7 = j_7 * (-4'sd4);
    j_7 = j_7 / (-3'sd2);
    y = -4'sd5;
    j_7 = -7'sd42;
    y = y + (-signed'({1'b0, j_7}));
    `ifndef INTEL_SVA_OFF
        assert (y == 37) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    y = y * signed'({1'b0, j_7});
    `ifndef INTEL_SVA_OFF
        assert (y == -12'sd1554) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    l2 = 42;
    jj = 1;
    jj = jj + (-signed'({1'b0, l2}));
    `ifndef INTEL_SVA_OFF
        assert (jj == -7'sd41) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    jj = -7'sd41;
    jj = jj + signed'({1'b0, l2});
    `ifndef INTEL_SVA_OFF
        assert (jj == 1) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    jj = -7'sd41;
    jj = jj - signed'({1'b0, l2});
    `ifndef INTEL_SVA_OFF
        assert (jj == -8'sd83) else $error("Assertion failed at test_const_negative.cpp:24:20>");
    `endif // INTEL_SVA_OFF
    // Call compound_bigint() end
end

endmodule


